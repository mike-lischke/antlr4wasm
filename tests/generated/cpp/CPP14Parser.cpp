
	import { InputMismatchException } from 'antlr4ts/InputMismatchException';


// Generated from tests/grammars/CPP14.g4 by ANTLR 4.13.0



#include "CPP14Parser.h"


using namespace antlrcpp;
using namespace antlr4;

using namespace antlr4;

namespace {

struct CPP14ParserStaticData final {
  CPP14ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CPP14ParserStaticData(const CPP14ParserStaticData&) = delete;
  CPP14ParserStaticData(CPP14ParserStaticData&&) = delete;
  CPP14ParserStaticData& operator=(const CPP14ParserStaticData&) = delete;
  CPP14ParserStaticData& operator=(CPP14ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cpp14ParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CPP14ParserStaticData *cpp14ParserStaticData = nullptr;

void cpp14ParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cpp14ParserStaticData != nullptr) {
    return;
  }
#else
  assert(cpp14ParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CPP14ParserStaticData>(
    std::vector<std::string>{
      "translationunit", "primaryexpression", "idexpression", "unqualifiedid", 
      "qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer", 
      "lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture", 
      "initcapture", "lambdadeclarator", "postfixexpression", "expressionlist", 
      "pseudodestructorname", "unaryexpression", "unaryoperator", "newexpression", 
      "newplacement", "newtypeid", "newdeclarator", "noptrnewdeclarator", 
      "newinitializer", "deleteexpression", "noexceptexpression", "castexpression", 
      "pmexpression", "multiplicativeexpression", "additiveexpression", 
      "shiftexpression", "relationalexpression", "equalityexpression", "andexpression", 
      "exclusiveorexpression", "inclusiveorexpression", "logicalandexpression", 
      "logicalorexpression", "conditionalexpression", "assignmentexpression", 
      "assignmentoperator", "expression", "constantexpression", "statement", 
      "labeledstatement", "expressionstatement", "compoundstatement", "statementseq", 
      "selectionstatement", "condition", "iterationstatement", "forinitstatement", 
      "forrangedeclaration", "forrangeinitializer", "jumpstatement", "declarationstatement", 
      "declarationseq", "declaration", "blockdeclaration", "aliasdeclaration", 
      "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
      "attributedeclaration", "declspecifier", "declspecifierseq", "storageclassspecifier", 
      "functionspecifier", "typedefname", "typespecifier", "trailingtypespecifier", 
      "typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier", 
      "typename", "decltypespecifier", "elaboratedtypespecifier", "enumname", 
      "enumspecifier", "enumhead", "opaqueenumdeclaration", "enumkey", "enumbase", 
      "enumeratorlist", "enumeratordefinition", "enumerator", "namespacename", 
      "originalnamespacename", "namespacedefinition", "namednamespacedefinition", 
      "originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition", 
      "namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier", 
      "usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification", 
      "attributespecifierseq", "attributespecifier", "alignmentspecifier", 
      "attributelist", "attribute", "attributetoken", "attributescopedtoken", 
      "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
      "balancedtoken", "initdeclaratorlist", "initdeclarator", "declarator", 
      "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", "trailingreturntype", 
      "ptroperator", "cvqualifierseq", "cvqualifier", "refqualifier", "declaratorid", 
      "typeid", "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
      "abstractpackdeclarator", "noptrabstractpackdeclarator", "parameterdeclarationclause", 
      "parameterdeclarationlist", "parameterdeclaration", "functiondefinition", 
      "functionbody", "initializer", "braceorequalinitializer", "initializerclause", 
      "initializerlist", "bracedinitlist", "classname", "classspecifier", 
      "classhead", "classheadname", "classvirtspecifier", "classkey", "memberspecification", 
      "memberdeclaration", "memberdeclaratorlist", "memberdeclarator", "virtspecifierseq", 
      "virtspecifier", "purespecifier", "baseclause", "basespecifierlist", 
      "basespecifier", "classordecltype", "basetypespecifier", "accessspecifier", 
      "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
      "ctorinitializer", "meminitializerlist", "meminitializer", "meminitializerid", 
      "operatorfunctionid", "literaloperatorid", "templatedeclaration", 
      "templateparameterlist", "templateparameter", "typeparameter", "simpletemplateid", 
      "templateid", "templatename", "templateargumentlist", "templateargument", 
      "typenamespecifier", "explicitinstantiation", "explicitspecialization", 
      "tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
      "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
      "typeidlist", "noexceptspecification", "rightShift", "rightShiftAssign", 
      "operator", "literal", "booleanliteral", "pointerliteral", "userdefinedliteral"
    },
    std::vector<std::string>{
      "", "", "", "'alignas'", "'alignof'", "'asm'", "'auto'", "'bool'", 
      "'break'", "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", 
      "'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'", 
      "'decltype'", "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
      "'else'", "'enum'", "'explicit'", "'export'", "'extern'", "'false'", 
      "'final'", "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", 
      "'int'", "'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", 
      "'nullptr'", "'operator'", "'override'", "'private'", "'protected'", 
      "'public'", "'register'", "'reinterpret_cast'", "'return'", "'short'", 
      "'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
      "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", 
      "'throw'", "'true'", "'try'", "'typedef'", "'typeid'", "'typename'", 
      "'union'", "'unsigned'", "'using'", "'virtual'", "'void'", "'volatile'", 
      "'wchar_t'", "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
      "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", 
      "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", 
      "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'", 
      "'||'", "'++'", "'--'", "','", "'->*'", "'->'", "'\\u003F'", "':'", 
      "'::'", "';'", "'.'", "'.*'", "'...'"
    },
    std::vector<std::string>{
      "", "MultiLineMacro", "Directive", "Alignas", "Alignof", "Asm", "Auto", 
      "Bool", "Break", "Case", "Catch", "Char", "Char16", "Char32", "Class", 
      "Const", "Constexpr", "Const_cast", "Continue", "Decltype", "Default", 
      "Delete", "Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
      "Export", "Extern", "False", "Final", "Float", "For", "Friend", "Goto", 
      "If", "Inline", "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
      "Nullptr", "Operator", "Override", "Private", "Protected", "Public", 
      "Register", "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
      "Static", "Static_assert", "Static_cast", "Struct", "Switch", "Template", 
      "This", "Thread_local", "Throw", "True", "Try", "Typedef", "Typeid", 
      "Typename", "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", 
      "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", 
      "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
      "XorAssign", "AndAssign", "OrAssign", "LeftShift", "LeftShiftAssign", 
      "Equal", "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", 
      "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", 
      "Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
      "Integerliteral", "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
      "Binaryliteral", "Integersuffix", "Characterliteral", "Floatingliteral", 
      "Stringliteral", "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
      "Userdefinedstringliteral", "Userdefinedcharacterliteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,142,2468,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,1,0,3,0,400,8,0,
  	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,412,8,1,1,2,1,2,3,2,416,8,
  	2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,427,8,3,1,4,1,4,3,4,431,8,4,
  	1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,446,8,5,1,5,1,
  	5,1,5,1,5,1,5,3,5,453,8,5,1,5,1,5,1,5,5,5,458,8,5,10,5,12,5,461,9,5,1,
  	6,1,6,3,6,465,8,6,1,6,1,6,1,7,1,7,3,7,471,8,7,1,7,1,7,1,8,1,8,1,8,1,8,
  	1,8,1,8,3,8,481,8,8,1,9,1,9,1,10,1,10,1,10,3,10,488,8,10,1,10,1,10,1,
  	10,1,10,3,10,494,8,10,5,10,496,8,10,10,10,12,10,499,9,10,1,11,1,11,3,
  	11,503,8,11,1,12,1,12,1,12,1,12,3,12,509,8,12,1,13,1,13,1,13,1,13,1,13,
  	3,13,516,8,13,1,14,1,14,1,14,1,14,3,14,522,8,14,1,14,3,14,525,8,14,1,
  	14,3,14,528,8,14,1,14,3,14,531,8,14,1,15,1,15,1,15,1,15,1,15,3,15,538,
  	8,15,1,15,1,15,1,15,1,15,1,15,3,15,545,8,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,3,15,597,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,3,15,612,8,15,1,15,1,15,1,15,1,15,3,15,618,8,
  	15,1,15,1,15,1,15,1,15,3,15,624,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,5,15,637,8,15,10,15,12,15,640,9,15,1,16,1,16,1,
  	17,3,17,645,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
  	17,1,17,1,17,3,17,660,8,17,1,17,1,17,1,17,1,17,3,17,666,8,17,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,696,
  	8,18,1,19,1,19,1,20,3,20,701,8,20,1,20,1,20,3,20,705,8,20,1,20,1,20,3,
  	20,709,8,20,1,20,3,20,712,8,20,1,20,1,20,3,20,716,8,20,1,20,1,20,1,20,
  	1,20,3,20,722,8,20,3,20,724,8,20,1,21,1,21,1,21,1,21,1,22,1,22,3,22,732,
  	8,22,1,23,1,23,3,23,736,8,23,1,23,3,23,739,8,23,1,24,1,24,1,24,1,24,1,
  	24,3,24,746,8,24,1,24,1,24,1,24,1,24,1,24,3,24,753,8,24,5,24,755,8,24,
  	10,24,12,24,758,9,24,1,25,1,25,3,25,762,8,25,1,25,1,25,3,25,766,8,25,
  	1,26,3,26,769,8,26,1,26,1,26,1,26,3,26,774,8,26,1,26,1,26,1,26,1,26,3,
  	26,780,8,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,
  	28,793,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,804,8,29,
  	10,29,12,29,807,9,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,5,30,821,8,30,10,30,12,30,824,9,30,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,5,31,835,8,31,10,31,12,31,838,9,31,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,850,8,32,10,32,12,32,853,9,32,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,5,33,870,8,33,10,33,12,33,873,9,33,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,34,5,34,884,8,34,10,34,12,34,887,9,34,1,35,1,35,1,35,1,35,
  	1,35,1,35,5,35,895,8,35,10,35,12,35,898,9,35,1,36,1,36,1,36,1,36,1,36,
  	1,36,5,36,906,8,36,10,36,12,36,909,9,36,1,37,1,37,1,37,1,37,1,37,1,37,
  	5,37,917,8,37,10,37,12,37,920,9,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,
  	928,8,38,10,38,12,38,931,9,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,939,
  	8,39,10,39,12,39,942,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,951,
  	8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,959,8,41,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,972,8,42,1,43,1,43,1,43,1,43,
  	1,43,1,43,5,43,980,8,43,10,43,12,43,983,9,43,1,44,1,44,1,45,1,45,3,45,
  	989,8,45,1,45,1,45,3,45,993,8,45,1,45,1,45,3,45,997,8,45,1,45,1,45,3,
  	45,1001,8,45,1,45,1,45,3,45,1005,8,45,1,45,1,45,1,45,3,45,1010,8,45,1,
  	45,3,45,1013,8,45,1,46,3,46,1016,8,46,1,46,1,46,1,46,1,46,3,46,1022,8,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1030,8,46,1,46,1,46,1,46,3,46,1035,
  	8,46,1,47,3,47,1038,8,47,1,47,1,47,1,48,1,48,3,48,1044,8,48,1,48,1,48,
  	1,49,1,49,1,49,1,49,1,49,5,49,1053,8,49,10,49,12,49,1056,9,49,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,3,50,1078,8,50,1,51,1,51,3,51,1082,8,51,1,51,1,
  	51,1,51,1,51,1,51,1,51,3,51,1090,8,51,1,51,1,51,1,51,1,51,3,51,1096,8,
  	51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
  	52,1,52,1,52,1,52,1,52,3,52,1116,8,52,1,52,1,52,3,52,1120,8,52,1,52,1,
  	52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1133,8,52,1,53,1,
  	53,3,53,1137,8,53,1,54,3,54,1140,8,54,1,54,1,54,1,54,1,55,1,55,3,55,1147,
  	8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1155,8,56,1,56,1,56,1,56,1,56,
  	1,56,1,56,1,56,1,56,3,56,1165,8,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,
  	5,58,1174,8,58,10,58,12,58,1177,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,3,59,1188,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,
  	60,1198,8,60,1,61,1,61,1,61,3,61,1203,8,61,1,61,1,61,1,61,1,61,1,62,3,
  	62,1210,8,62,1,62,3,62,1213,8,62,1,62,1,62,1,62,3,62,1218,8,62,1,62,1,
  	62,1,62,3,62,1223,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,
  	64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1244,8,66,1,67,1,
  	67,3,67,1248,8,67,1,67,1,67,1,67,3,67,1253,8,67,1,68,1,68,1,69,1,69,1,
  	70,1,70,1,71,1,71,1,71,3,71,1264,8,71,1,72,1,72,1,72,1,72,3,72,1270,8,
  	72,1,73,1,73,3,73,1274,8,73,1,73,1,73,1,73,3,73,1279,8,73,1,74,1,74,3,
  	74,1283,8,74,1,74,1,74,1,74,3,74,1288,8,74,1,75,3,75,1291,8,75,1,75,1,
  	75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
  	75,1,75,1,75,1,75,1,75,3,75,1313,8,75,1,76,1,76,1,76,1,76,3,76,1319,8,
  	76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1330,8,77,1,78,1,
  	78,3,78,1334,8,78,1,78,3,78,1337,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
  	78,1,78,3,78,1347,8,78,1,78,1,78,1,78,1,78,3,78,1353,8,78,1,78,3,78,1356,
  	8,78,1,79,1,79,1,80,1,80,1,80,3,80,1363,8,80,1,80,1,80,1,80,1,80,1,80,
  	1,80,1,80,1,80,3,80,1373,8,80,1,81,1,81,3,81,1377,8,81,1,81,3,81,1380,
  	8,81,1,81,3,81,1383,8,81,1,81,1,81,3,81,1387,8,81,1,81,1,81,1,81,3,81,
  	1392,8,81,3,81,1394,8,81,1,82,1,82,3,82,1398,8,82,1,82,1,82,3,82,1402,
  	8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,83,1411,8,83,1,84,1,84,1,84,
  	1,85,1,85,1,85,1,85,1,85,1,85,5,85,1422,8,85,10,85,12,85,1425,9,85,1,
  	86,1,86,1,86,1,86,1,86,3,86,1432,8,86,1,87,1,87,1,88,1,88,3,88,1438,8,
  	88,1,89,1,89,1,90,1,90,3,90,1444,8,90,1,91,1,91,3,91,1448,8,91,1,92,3,
  	92,1451,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,3,93,1460,8,93,1,93,1,
  	93,1,93,1,93,1,93,1,93,1,94,3,94,1469,8,94,1,94,1,94,1,94,1,94,1,94,1,
  	95,3,95,1477,8,95,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,98,3,98,1488,
  	8,98,1,98,1,98,1,99,1,99,3,99,1494,8,99,1,99,1,99,1,99,1,99,1,99,1,99,
  	1,99,1,99,1,99,3,99,1505,8,99,1,100,3,100,1508,8,100,1,100,1,100,1,100,
  	3,100,1513,8,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,
  	1,102,1,102,1,102,1,102,3,102,1528,8,102,1,102,1,102,1,102,1,102,3,102,
  	1534,8,102,1,103,1,103,1,103,1,103,1,103,5,103,1541,8,103,10,103,12,103,
  	1544,9,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1553,8,104,
  	1,105,1,105,1,105,1,105,3,105,1559,8,105,1,105,1,105,1,105,1,105,1,105,
  	1,105,3,105,1567,8,105,1,105,1,105,3,105,1571,8,105,1,106,1,106,3,106,
  	1575,8,106,1,106,1,106,1,106,3,106,1580,8,106,1,106,1,106,1,106,3,106,
  	1585,8,106,1,106,1,106,1,106,1,106,1,106,5,106,1592,8,106,10,106,12,106,
  	1595,9,106,1,107,1,107,3,107,1599,8,107,1,108,1,108,3,108,1603,8,108,
  	1,109,1,109,1,109,1,109,1,110,1,110,1,111,1,111,1,111,1,111,1,112,1,112,
  	3,112,1617,8,112,1,112,1,112,5,112,1621,8,112,10,112,12,112,1624,9,112,
  	1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
  	3,113,1638,8,113,1,114,1,114,1,114,1,114,1,114,1,114,5,114,1646,8,114,
  	10,114,12,114,1649,9,114,1,115,1,115,3,115,1653,8,115,1,116,1,116,1,116,
  	1,116,1,116,3,116,1660,8,116,1,117,1,117,1,117,1,117,3,117,1666,8,117,
  	1,118,1,118,1,118,3,118,1671,8,118,1,118,1,118,1,118,1,118,3,118,1677,
  	8,118,1,118,1,118,1,118,1,118,1,118,3,118,1684,8,118,1,118,1,118,3,118,
  	1688,8,118,5,118,1690,8,118,10,118,12,118,1693,9,118,1,119,1,119,1,119,
  	1,119,3,119,1699,8,119,1,119,3,119,1702,8,119,1,119,3,119,1705,8,119,
  	1,119,3,119,1708,8,119,1,120,1,120,1,120,3,120,1713,8,120,1,121,1,121,
  	3,121,1717,8,121,1,121,3,121,1720,8,121,1,121,1,121,3,121,1724,8,121,
  	1,121,1,121,3,121,1728,8,121,1,121,1,121,1,121,3,121,1733,8,121,1,121,
  	3,121,1736,8,121,3,121,1738,8,121,1,122,1,122,3,122,1742,8,122,1,123,
  	1,123,1,124,1,124,1,125,3,125,1749,8,125,1,125,1,125,1,126,1,126,3,126,
  	1755,8,126,1,127,1,127,3,127,1759,8,127,1,127,1,127,1,127,1,127,3,127,
  	1765,8,127,1,128,1,128,1,128,3,128,1770,8,128,3,128,1772,8,128,1,129,
  	1,129,1,129,1,129,3,129,1778,8,129,1,129,1,129,3,129,1782,8,129,1,129,
  	1,129,1,129,1,129,3,129,1788,8,129,1,129,1,129,1,129,1,129,1,129,3,129,
  	1795,8,129,1,129,1,129,3,129,1799,8,129,5,129,1801,8,129,10,129,12,129,
  	1804,9,129,1,130,1,130,1,130,1,130,3,130,1810,8,130,1,131,1,131,1,131,
  	1,131,1,131,1,131,1,131,1,131,3,131,1820,8,131,1,131,1,131,3,131,1824,
  	8,131,5,131,1826,8,131,10,131,12,131,1829,9,131,1,132,3,132,1832,8,132,
  	1,132,3,132,1835,8,132,1,132,1,132,1,132,1,132,3,132,1841,8,132,1,133,
  	1,133,1,133,1,133,1,133,1,133,5,133,1849,8,133,10,133,12,133,1852,9,133,
  	1,134,3,134,1855,8,134,1,134,1,134,1,134,1,134,3,134,1861,8,134,1,134,
  	1,134,1,134,1,134,1,134,1,134,3,134,1869,8,134,1,134,1,134,3,134,1873,
  	8,134,1,134,3,134,1876,8,134,1,134,1,134,3,134,1880,8,134,1,134,1,134,
  	1,134,3,134,1885,8,134,1,135,3,135,1888,8,135,1,135,3,135,1891,8,135,
  	1,135,1,135,3,135,1895,8,135,1,135,1,135,1,136,3,136,1900,8,136,1,136,
  	1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1910,8,136,1,137,1,137,
  	1,137,1,137,1,137,3,137,1917,8,137,1,138,1,138,1,138,3,138,1922,8,138,
  	1,139,1,139,3,139,1926,8,139,1,140,1,140,1,140,3,140,1931,8,140,1,140,
  	1,140,1,140,1,140,3,140,1937,8,140,5,140,1939,8,140,10,140,12,140,1942,
  	9,140,1,141,1,141,1,141,3,141,1947,8,141,1,141,1,141,1,141,1,141,3,141,
  	1953,8,141,1,142,1,142,3,142,1957,8,142,1,143,1,143,1,143,3,143,1962,
  	8,143,1,143,1,143,1,144,1,144,3,144,1968,8,144,1,144,1,144,3,144,1972,
  	8,144,1,144,3,144,1975,8,144,1,144,1,144,3,144,1979,8,144,1,144,3,144,
  	1982,8,144,3,144,1984,8,144,1,145,3,145,1987,8,145,1,145,1,145,1,146,
  	1,146,1,147,1,147,1,148,1,148,3,148,1997,8,148,1,148,1,148,1,148,3,148,
  	2002,8,148,3,148,2004,8,148,1,149,3,149,2007,8,149,1,149,3,149,2010,8,
  	149,1,149,3,149,2013,8,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,
  	3,149,2022,8,149,1,150,1,150,1,150,1,150,1,150,1,150,5,150,2030,8,150,
  	10,150,12,150,2033,9,150,1,151,1,151,3,151,2037,8,151,1,151,3,151,2040,
  	8,151,1,151,1,151,3,151,2044,8,151,1,151,3,151,2047,8,151,1,151,3,151,
  	2050,8,151,1,151,1,151,3,151,2054,8,151,1,152,1,152,1,152,1,152,1,152,
  	5,152,2061,8,152,10,152,12,152,2064,9,152,1,153,1,153,1,154,1,154,1,154,
  	1,154,1,155,1,155,1,155,1,156,1,156,1,156,3,156,2078,8,156,1,156,1,156,
  	1,156,1,156,3,156,2084,8,156,5,156,2086,8,156,10,156,12,156,2089,9,156,
  	1,157,3,157,2092,8,157,1,157,1,157,3,157,2096,8,157,1,157,1,157,3,157,
  	2100,8,157,1,157,1,157,3,157,2104,8,157,1,157,1,157,3,157,2108,8,157,
  	1,157,1,157,3,157,2112,8,157,1,158,3,158,2115,8,158,1,158,1,158,3,158,
  	2119,8,158,1,159,1,159,1,160,1,160,1,161,1,161,1,161,1,162,1,162,3,162,
  	2130,8,162,1,163,1,163,3,163,2134,8,163,1,164,1,164,1,164,1,165,1,165,
  	3,165,2141,8,165,1,165,1,165,3,165,2145,8,165,1,165,1,165,1,165,3,165,
  	2150,8,165,1,166,1,166,1,166,3,166,2155,8,166,1,166,1,166,1,166,1,166,
  	1,166,3,166,2162,8,166,1,167,1,167,3,167,2166,8,167,1,168,1,168,1,168,
  	1,169,1,169,1,169,1,169,1,169,3,169,2176,8,169,1,170,1,170,1,170,1,170,
  	1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,171,5,171,2190,8,171,10,171,
  	12,171,2193,9,171,1,172,1,172,3,172,2197,8,172,1,173,1,173,3,173,2201,
  	8,173,1,173,3,173,2204,8,173,1,173,1,173,3,173,2208,8,173,1,173,1,173,
  	1,173,1,173,3,173,2214,8,173,1,173,3,173,2217,8,173,1,173,1,173,3,173,
  	2221,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2231,
  	8,173,1,173,3,173,2234,8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,
  	2242,8,173,1,173,1,173,1,173,3,173,2247,8,173,1,174,1,174,1,174,3,174,
  	2252,8,174,1,174,1,174,1,175,1,175,1,175,1,175,3,175,2260,8,175,1,175,
  	1,175,1,175,1,175,1,175,3,175,2267,8,175,1,175,1,175,3,175,2271,8,175,
  	1,176,1,176,1,177,1,177,1,177,3,177,2278,8,177,1,177,1,177,1,177,1,177,
  	3,177,2284,8,177,5,177,2286,8,177,10,177,12,177,2289,9,177,1,178,1,178,
  	1,178,3,178,2294,8,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,
  	2303,8,179,1,179,1,179,3,179,2307,8,179,1,180,3,180,2310,8,180,1,180,
  	1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,183,
  	1,183,3,183,2326,8,183,1,183,1,183,1,183,1,184,1,184,3,184,2333,8,184,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,186,3,186,2342,8,186,1,186,1,186,
  	1,186,1,186,3,186,2348,8,186,1,186,1,186,3,186,2352,8,186,1,186,3,186,
  	2355,8,186,1,187,1,187,3,187,2359,8,187,1,188,1,188,3,188,2363,8,188,
  	1,189,1,189,1,189,3,189,2368,8,189,1,189,1,189,1,190,1,190,1,190,3,190,
  	2375,8,190,1,190,1,190,1,190,1,190,3,190,2381,8,190,5,190,2383,8,190,
  	10,190,12,190,2386,9,190,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2394,
  	8,191,1,192,1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,
  	1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
  	1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
  	1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
  	1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,2451,8,194,1,195,
  	1,195,1,195,1,195,1,195,1,195,1,195,3,195,2460,8,195,1,196,1,196,1,197,
  	1,197,1,198,1,198,1,198,0,34,10,20,30,48,58,60,62,64,66,68,70,72,74,76,
  	78,86,98,116,170,206,212,224,228,236,258,262,266,280,300,304,312,342,
  	354,380,199,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
  	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
  	234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
  	270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
  	306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
  	342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
  	378,380,382,384,386,388,390,392,394,396,0,11,2,0,90,90,94,94,2,0,84,86,
  	90,93,5,0,29,29,40,40,50,50,56,56,63,63,3,0,27,27,37,37,73,73,2,0,15,
  	15,75,75,2,0,90,90,111,111,3,0,14,14,59,59,70,70,2,0,31,31,46,46,1,0,
  	47,49,2,0,30,30,65,65,1,0,135,138,2757,0,399,1,0,0,0,2,411,1,0,0,0,4,
  	415,1,0,0,0,6,426,1,0,0,0,8,428,1,0,0,0,10,445,1,0,0,0,12,462,1,0,0,0,
  	14,468,1,0,0,0,16,480,1,0,0,0,18,482,1,0,0,0,20,484,1,0,0,0,22,502,1,
  	0,0,0,24,508,1,0,0,0,26,515,1,0,0,0,28,517,1,0,0,0,30,596,1,0,0,0,32,
  	641,1,0,0,0,34,665,1,0,0,0,36,695,1,0,0,0,38,697,1,0,0,0,40,723,1,0,0,
  	0,42,725,1,0,0,0,44,729,1,0,0,0,46,738,1,0,0,0,48,740,1,0,0,0,50,765,
  	1,0,0,0,52,779,1,0,0,0,54,781,1,0,0,0,56,792,1,0,0,0,58,794,1,0,0,0,60,
  	808,1,0,0,0,62,825,1,0,0,0,64,839,1,0,0,0,66,854,1,0,0,0,68,874,1,0,0,
  	0,70,888,1,0,0,0,72,899,1,0,0,0,74,910,1,0,0,0,76,921,1,0,0,0,78,932,
  	1,0,0,0,80,950,1,0,0,0,82,958,1,0,0,0,84,971,1,0,0,0,86,973,1,0,0,0,88,
  	984,1,0,0,0,90,1012,1,0,0,0,92,1034,1,0,0,0,94,1037,1,0,0,0,96,1041,1,
  	0,0,0,98,1047,1,0,0,0,100,1077,1,0,0,0,102,1095,1,0,0,0,104,1132,1,0,
  	0,0,106,1136,1,0,0,0,108,1139,1,0,0,0,110,1146,1,0,0,0,112,1164,1,0,0,
  	0,114,1166,1,0,0,0,116,1168,1,0,0,0,118,1187,1,0,0,0,120,1197,1,0,0,0,
  	122,1199,1,0,0,0,124,1222,1,0,0,0,126,1224,1,0,0,0,128,1232,1,0,0,0,130,
  	1234,1,0,0,0,132,1243,1,0,0,0,134,1252,1,0,0,0,136,1254,1,0,0,0,138,1256,
  	1,0,0,0,140,1258,1,0,0,0,142,1263,1,0,0,0,144,1269,1,0,0,0,146,1278,1,
  	0,0,0,148,1287,1,0,0,0,150,1312,1,0,0,0,152,1318,1,0,0,0,154,1329,1,0,
  	0,0,156,1355,1,0,0,0,158,1357,1,0,0,0,160,1372,1,0,0,0,162,1393,1,0,0,
  	0,164,1395,1,0,0,0,166,1410,1,0,0,0,168,1412,1,0,0,0,170,1415,1,0,0,0,
  	172,1431,1,0,0,0,174,1433,1,0,0,0,176,1437,1,0,0,0,178,1439,1,0,0,0,180,
  	1443,1,0,0,0,182,1447,1,0,0,0,184,1450,1,0,0,0,186,1459,1,0,0,0,188,1468,
  	1,0,0,0,190,1476,1,0,0,0,192,1478,1,0,0,0,194,1480,1,0,0,0,196,1487,1,
  	0,0,0,198,1504,1,0,0,0,200,1507,1,0,0,0,202,1517,1,0,0,0,204,1533,1,0,
  	0,0,206,1535,1,0,0,0,208,1552,1,0,0,0,210,1570,1,0,0,0,212,1579,1,0,0,
  	0,214,1596,1,0,0,0,216,1602,1,0,0,0,218,1604,1,0,0,0,220,1608,1,0,0,0,
  	222,1610,1,0,0,0,224,1614,1,0,0,0,226,1637,1,0,0,0,228,1639,1,0,0,0,230,
  	1650,1,0,0,0,232,1659,1,0,0,0,234,1665,1,0,0,0,236,1676,1,0,0,0,238,1694,
  	1,0,0,0,240,1709,1,0,0,0,242,1737,1,0,0,0,244,1739,1,0,0,0,246,1743,1,
  	0,0,0,248,1745,1,0,0,0,250,1748,1,0,0,0,252,1752,1,0,0,0,254,1764,1,0,
  	0,0,256,1771,1,0,0,0,258,1787,1,0,0,0,260,1809,1,0,0,0,262,1811,1,0,0,
  	0,264,1840,1,0,0,0,266,1842,1,0,0,0,268,1884,1,0,0,0,270,1887,1,0,0,0,
  	272,1909,1,0,0,0,274,1916,1,0,0,0,276,1921,1,0,0,0,278,1925,1,0,0,0,280,
  	1927,1,0,0,0,282,1952,1,0,0,0,284,1956,1,0,0,0,286,1958,1,0,0,0,288,1983,
  	1,0,0,0,290,1986,1,0,0,0,292,1990,1,0,0,0,294,1992,1,0,0,0,296,2003,1,
  	0,0,0,298,2021,1,0,0,0,300,2023,1,0,0,0,302,2053,1,0,0,0,304,2055,1,0,
  	0,0,306,2065,1,0,0,0,308,2067,1,0,0,0,310,2071,1,0,0,0,312,2074,1,0,0,
  	0,314,2111,1,0,0,0,316,2118,1,0,0,0,318,2120,1,0,0,0,320,2122,1,0,0,0,
  	322,2124,1,0,0,0,324,2127,1,0,0,0,326,2131,1,0,0,0,328,2135,1,0,0,0,330,
  	2149,1,0,0,0,332,2161,1,0,0,0,334,2165,1,0,0,0,336,2167,1,0,0,0,338,2175,
  	1,0,0,0,340,2177,1,0,0,0,342,2183,1,0,0,0,344,2196,1,0,0,0,346,2246,1,
  	0,0,0,348,2248,1,0,0,0,350,2270,1,0,0,0,352,2272,1,0,0,0,354,2274,1,0,
  	0,0,356,2293,1,0,0,0,358,2306,1,0,0,0,360,2309,1,0,0,0,362,2314,1,0,0,
  	0,364,2319,1,0,0,0,366,2323,1,0,0,0,368,2330,1,0,0,0,370,2334,1,0,0,0,
  	372,2354,1,0,0,0,374,2356,1,0,0,0,376,2362,1,0,0,0,378,2364,1,0,0,0,380,
  	2371,1,0,0,0,382,2393,1,0,0,0,384,2395,1,0,0,0,386,2398,1,0,0,0,388,2450,
  	1,0,0,0,390,2459,1,0,0,0,392,2461,1,0,0,0,394,2463,1,0,0,0,396,2465,1,
  	0,0,0,398,400,3,116,58,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,
  	0,0,401,402,5,0,0,1,402,1,1,0,0,0,403,412,3,390,195,0,404,412,5,62,0,
  	0,405,406,5,78,0,0,406,407,3,86,43,0,407,408,5,79,0,0,408,412,1,0,0,0,
  	409,412,3,4,2,0,410,412,3,12,6,0,411,403,1,0,0,0,411,404,1,0,0,0,411,
  	405,1,0,0,0,411,409,1,0,0,0,411,410,1,0,0,0,412,3,1,0,0,0,413,416,3,6,
  	3,0,414,416,3,8,4,0,415,413,1,0,0,0,415,414,1,0,0,0,416,5,1,0,0,0,417,
  	427,5,125,0,0,418,427,3,336,168,0,419,427,3,322,161,0,420,427,3,338,169,
  	0,421,422,5,92,0,0,422,427,3,284,142,0,423,424,5,92,0,0,424,427,3,154,
  	77,0,425,427,3,350,175,0,426,417,1,0,0,0,426,418,1,0,0,0,426,419,1,0,
  	0,0,426,420,1,0,0,0,426,421,1,0,0,0,426,423,1,0,0,0,426,425,1,0,0,0,427,
  	7,1,0,0,0,428,430,3,10,5,0,429,431,5,61,0,0,430,429,1,0,0,0,430,431,1,
  	0,0,0,431,432,1,0,0,0,432,433,3,6,3,0,433,9,1,0,0,0,434,435,6,5,-1,0,
  	435,446,5,120,0,0,436,437,3,152,76,0,437,438,5,120,0,0,438,446,1,0,0,
  	0,439,440,3,176,88,0,440,441,5,120,0,0,441,446,1,0,0,0,442,443,3,154,
  	77,0,443,444,5,120,0,0,444,446,1,0,0,0,445,434,1,0,0,0,445,436,1,0,0,
  	0,445,439,1,0,0,0,445,442,1,0,0,0,446,459,1,0,0,0,447,448,10,2,0,0,448,
  	449,5,125,0,0,449,458,5,120,0,0,450,452,10,1,0,0,451,453,5,61,0,0,452,
  	451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,3,348,174,0,455,456,
  	5,120,0,0,456,458,1,0,0,0,457,447,1,0,0,0,457,450,1,0,0,0,458,461,1,0,
  	0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,11,1,0,0,0,461,459,1,0,0,0,462,
  	464,3,14,7,0,463,465,3,28,14,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,
  	1,0,0,0,466,467,3,96,48,0,467,13,1,0,0,0,468,470,5,80,0,0,469,471,3,16,
  	8,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,5,81,0,0,
  	473,15,1,0,0,0,474,481,3,18,9,0,475,481,3,20,10,0,476,477,3,18,9,0,477,
  	478,5,115,0,0,478,479,3,20,10,0,479,481,1,0,0,0,480,474,1,0,0,0,480,475,
  	1,0,0,0,480,476,1,0,0,0,481,17,1,0,0,0,482,483,7,0,0,0,483,19,1,0,0,0,
  	484,485,6,10,-1,0,485,487,3,22,11,0,486,488,5,124,0,0,487,486,1,0,0,0,
  	487,488,1,0,0,0,488,497,1,0,0,0,489,490,10,1,0,0,490,491,5,115,0,0,491,
  	493,3,22,11,0,492,494,5,124,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,496,
  	1,0,0,0,495,489,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,
  	0,498,21,1,0,0,0,499,497,1,0,0,0,500,503,3,24,12,0,501,503,3,26,13,0,
  	502,500,1,0,0,0,502,501,1,0,0,0,503,23,1,0,0,0,504,509,5,125,0,0,505,
  	506,5,90,0,0,506,509,5,125,0,0,507,509,5,62,0,0,508,504,1,0,0,0,508,505,
  	1,0,0,0,508,507,1,0,0,0,509,25,1,0,0,0,510,511,5,125,0,0,511,516,3,274,
  	137,0,512,513,5,90,0,0,513,514,5,125,0,0,514,516,3,274,137,0,515,510,
  	1,0,0,0,515,512,1,0,0,0,516,27,1,0,0,0,517,518,5,78,0,0,518,519,3,264,
  	132,0,519,521,5,79,0,0,520,522,5,40,0,0,521,520,1,0,0,0,521,522,1,0,0,
  	0,522,524,1,0,0,0,523,525,3,376,188,0,524,523,1,0,0,0,524,525,1,0,0,0,
  	525,527,1,0,0,0,526,528,3,206,103,0,527,526,1,0,0,0,527,528,1,0,0,0,528,
  	530,1,0,0,0,529,531,3,240,120,0,530,529,1,0,0,0,530,531,1,0,0,0,531,29,
  	1,0,0,0,532,533,6,15,-1,0,533,597,3,2,1,0,534,535,3,150,75,0,535,537,
  	5,78,0,0,536,538,3,32,16,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,
  	0,0,0,539,540,5,79,0,0,540,597,1,0,0,0,541,542,3,358,179,0,542,544,5,
  	78,0,0,543,545,3,32,16,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,
  	0,0,546,547,5,79,0,0,547,597,1,0,0,0,548,549,3,150,75,0,549,550,3,282,
  	141,0,550,597,1,0,0,0,551,552,3,358,179,0,552,553,3,282,141,0,553,597,
  	1,0,0,0,554,555,5,24,0,0,555,556,5,95,0,0,556,557,3,252,126,0,557,558,
  	5,96,0,0,558,559,5,78,0,0,559,560,3,86,43,0,560,561,5,79,0,0,561,597,
  	1,0,0,0,562,563,5,58,0,0,563,564,5,95,0,0,564,565,3,252,126,0,565,566,
  	5,96,0,0,566,567,5,78,0,0,567,568,3,86,43,0,568,569,5,79,0,0,569,597,
  	1,0,0,0,570,571,5,51,0,0,571,572,5,95,0,0,572,573,3,252,126,0,573,574,
  	5,96,0,0,574,575,5,78,0,0,575,576,3,86,43,0,576,577,5,79,0,0,577,597,
  	1,0,0,0,578,579,5,17,0,0,579,580,5,95,0,0,580,581,3,252,126,0,581,582,
  	5,96,0,0,582,583,5,78,0,0,583,584,3,86,43,0,584,585,5,79,0,0,585,597,
  	1,0,0,0,586,587,5,68,0,0,587,588,5,78,0,0,588,589,3,86,43,0,589,590,5,
  	79,0,0,590,597,1,0,0,0,591,592,5,68,0,0,592,593,5,78,0,0,593,594,3,252,
  	126,0,594,595,5,79,0,0,595,597,1,0,0,0,596,532,1,0,0,0,596,534,1,0,0,
  	0,596,541,1,0,0,0,596,548,1,0,0,0,596,551,1,0,0,0,596,554,1,0,0,0,596,
  	562,1,0,0,0,596,570,1,0,0,0,596,578,1,0,0,0,596,586,1,0,0,0,596,591,1,
  	0,0,0,597,638,1,0,0,0,598,599,10,19,0,0,599,600,5,80,0,0,600,601,3,86,
  	43,0,601,602,5,81,0,0,602,637,1,0,0,0,603,604,10,18,0,0,604,605,5,80,
  	0,0,605,606,3,282,141,0,606,607,5,81,0,0,607,637,1,0,0,0,608,609,10,17,
  	0,0,609,611,5,78,0,0,610,612,3,32,16,0,611,610,1,0,0,0,611,612,1,0,0,
  	0,612,613,1,0,0,0,613,637,5,79,0,0,614,615,10,12,0,0,615,617,5,122,0,
  	0,616,618,5,61,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,
  	637,3,4,2,0,620,621,10,11,0,0,621,623,5,117,0,0,622,624,5,61,0,0,623,
  	622,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,637,3,4,2,0,626,627,10,
  	10,0,0,627,628,5,122,0,0,628,637,3,34,17,0,629,630,10,9,0,0,630,631,5,
  	117,0,0,631,637,3,34,17,0,632,633,10,8,0,0,633,637,5,113,0,0,634,635,
  	10,7,0,0,635,637,5,114,0,0,636,598,1,0,0,0,636,603,1,0,0,0,636,608,1,
  	0,0,0,636,614,1,0,0,0,636,620,1,0,0,0,636,626,1,0,0,0,636,629,1,0,0,0,
  	636,632,1,0,0,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,
  	1,0,0,0,639,31,1,0,0,0,640,638,1,0,0,0,641,642,3,280,140,0,642,33,1,0,
  	0,0,643,645,3,10,5,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,
  	646,647,3,152,76,0,647,648,5,120,0,0,648,649,5,92,0,0,649,650,3,152,76,
  	0,650,666,1,0,0,0,651,652,3,10,5,0,652,653,5,61,0,0,653,654,3,348,174,
  	0,654,655,5,120,0,0,655,656,5,92,0,0,656,657,3,152,76,0,657,666,1,0,0,
  	0,658,660,3,10,5,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,
  	662,5,92,0,0,662,666,3,152,76,0,663,664,5,92,0,0,664,666,3,154,77,0,665,
  	644,1,0,0,0,665,651,1,0,0,0,665,659,1,0,0,0,665,663,1,0,0,0,666,35,1,
  	0,0,0,667,696,3,30,15,0,668,669,5,113,0,0,669,696,3,56,28,0,670,671,5,
  	114,0,0,671,696,3,56,28,0,672,673,3,38,19,0,673,674,3,56,28,0,674,696,
  	1,0,0,0,675,676,5,55,0,0,676,696,3,36,18,0,677,678,5,55,0,0,678,679,5,
  	78,0,0,679,680,3,252,126,0,680,681,5,79,0,0,681,696,1,0,0,0,682,683,5,
  	55,0,0,683,684,5,124,0,0,684,685,5,78,0,0,685,686,5,125,0,0,686,696,5,
  	79,0,0,687,688,5,4,0,0,688,689,5,78,0,0,689,690,3,252,126,0,690,691,5,
  	79,0,0,691,696,1,0,0,0,692,696,3,54,27,0,693,696,3,40,20,0,694,696,3,
  	52,26,0,695,667,1,0,0,0,695,668,1,0,0,0,695,670,1,0,0,0,695,672,1,0,0,
  	0,695,675,1,0,0,0,695,677,1,0,0,0,695,682,1,0,0,0,695,687,1,0,0,0,695,
  	692,1,0,0,0,695,693,1,0,0,0,695,694,1,0,0,0,696,37,1,0,0,0,697,698,7,
  	1,0,0,698,39,1,0,0,0,699,701,5,120,0,0,700,699,1,0,0,0,700,701,1,0,0,
  	0,701,702,1,0,0,0,702,704,5,42,0,0,703,705,3,42,21,0,704,703,1,0,0,0,
  	704,705,1,0,0,0,705,706,1,0,0,0,706,708,3,44,22,0,707,709,3,50,25,0,708,
  	707,1,0,0,0,708,709,1,0,0,0,709,724,1,0,0,0,710,712,5,120,0,0,711,710,
  	1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,715,5,42,0,0,714,716,3,42,
  	21,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,718,5,78,0,0,
  	718,719,3,252,126,0,719,721,5,79,0,0,720,722,3,50,25,0,721,720,1,0,0,
  	0,721,722,1,0,0,0,722,724,1,0,0,0,723,700,1,0,0,0,723,711,1,0,0,0,724,
  	41,1,0,0,0,725,726,5,78,0,0,726,727,3,32,16,0,727,728,5,79,0,0,728,43,
  	1,0,0,0,729,731,3,146,73,0,730,732,3,46,23,0,731,730,1,0,0,0,731,732,
  	1,0,0,0,732,45,1,0,0,0,733,735,3,242,121,0,734,736,3,46,23,0,735,734,
  	1,0,0,0,735,736,1,0,0,0,736,739,1,0,0,0,737,739,3,48,24,0,738,733,1,0,
  	0,0,738,737,1,0,0,0,739,47,1,0,0,0,740,741,6,24,-1,0,741,742,5,80,0,0,
  	742,743,3,86,43,0,743,745,5,81,0,0,744,746,3,206,103,0,745,744,1,0,0,
  	0,745,746,1,0,0,0,746,756,1,0,0,0,747,748,10,1,0,0,748,749,5,80,0,0,749,
  	750,3,88,44,0,750,752,5,81,0,0,751,753,3,206,103,0,752,751,1,0,0,0,752,
  	753,1,0,0,0,753,755,1,0,0,0,754,747,1,0,0,0,755,758,1,0,0,0,756,754,1,
  	0,0,0,756,757,1,0,0,0,757,49,1,0,0,0,758,756,1,0,0,0,759,761,5,78,0,0,
  	760,762,3,32,16,0,761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,
  	766,5,79,0,0,764,766,3,282,141,0,765,759,1,0,0,0,765,764,1,0,0,0,766,
  	51,1,0,0,0,767,769,5,120,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,
  	1,0,0,0,770,771,5,21,0,0,771,780,3,56,28,0,772,774,5,120,0,0,773,772,
  	1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,21,0,0,776,777,5,80,
  	0,0,777,778,5,81,0,0,778,780,3,56,28,0,779,768,1,0,0,0,779,773,1,0,0,
  	0,780,53,1,0,0,0,781,782,5,43,0,0,782,783,5,78,0,0,783,784,3,86,43,0,
  	784,785,5,79,0,0,785,55,1,0,0,0,786,793,3,36,18,0,787,788,5,78,0,0,788,
  	789,3,252,126,0,789,790,5,79,0,0,790,791,3,56,28,0,791,793,1,0,0,0,792,
  	786,1,0,0,0,792,787,1,0,0,0,793,57,1,0,0,0,794,795,6,29,-1,0,795,796,
  	3,56,28,0,796,805,1,0,0,0,797,798,10,2,0,0,798,799,5,123,0,0,799,804,
  	3,56,28,0,800,801,10,1,0,0,801,802,5,116,0,0,802,804,3,56,28,0,803,797,
  	1,0,0,0,803,800,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,
  	0,806,59,1,0,0,0,807,805,1,0,0,0,808,809,6,30,-1,0,809,810,3,58,29,0,
  	810,822,1,0,0,0,811,812,10,3,0,0,812,813,5,86,0,0,813,821,3,58,29,0,814,
  	815,10,2,0,0,815,816,5,87,0,0,816,821,3,58,29,0,817,818,10,1,0,0,818,
  	819,5,88,0,0,819,821,3,58,29,0,820,811,1,0,0,0,820,814,1,0,0,0,820,817,
  	1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,61,1,0,0,
  	0,824,822,1,0,0,0,825,826,6,31,-1,0,826,827,3,60,30,0,827,836,1,0,0,0,
  	828,829,10,2,0,0,829,830,5,84,0,0,830,835,3,60,30,0,831,832,10,1,0,0,
  	832,833,5,85,0,0,833,835,3,60,30,0,834,828,1,0,0,0,834,831,1,0,0,0,835,
  	838,1,0,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,63,1,0,0,0,838,836,1,
  	0,0,0,839,840,6,32,-1,0,840,841,3,62,31,0,841,851,1,0,0,0,842,843,10,
  	2,0,0,843,844,5,105,0,0,844,850,3,62,31,0,845,846,10,1,0,0,846,847,3,
  	384,192,0,847,848,3,62,31,0,848,850,1,0,0,0,849,842,1,0,0,0,849,845,1,
  	0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,65,1,0,0,0,
  	853,851,1,0,0,0,854,855,6,33,-1,0,855,856,3,64,32,0,856,871,1,0,0,0,857,
  	858,10,4,0,0,858,859,5,95,0,0,859,870,3,64,32,0,860,861,10,3,0,0,861,
  	862,5,96,0,0,862,870,3,64,32,0,863,864,10,2,0,0,864,865,5,109,0,0,865,
  	870,3,64,32,0,866,867,10,1,0,0,867,868,5,110,0,0,868,870,3,64,32,0,869,
  	857,1,0,0,0,869,860,1,0,0,0,869,863,1,0,0,0,869,866,1,0,0,0,870,873,1,
  	0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,67,1,0,0,0,873,871,1,0,0,0,
  	874,875,6,34,-1,0,875,876,3,66,33,0,876,885,1,0,0,0,877,878,10,2,0,0,
  	878,879,5,107,0,0,879,884,3,66,33,0,880,881,10,1,0,0,881,882,5,108,0,
  	0,882,884,3,66,33,0,883,877,1,0,0,0,883,880,1,0,0,0,884,887,1,0,0,0,885,
  	883,1,0,0,0,885,886,1,0,0,0,886,69,1,0,0,0,887,885,1,0,0,0,888,889,6,
  	35,-1,0,889,890,3,68,34,0,890,896,1,0,0,0,891,892,10,1,0,0,892,893,5,
  	90,0,0,893,895,3,68,34,0,894,891,1,0,0,0,895,898,1,0,0,0,896,894,1,0,
  	0,0,896,897,1,0,0,0,897,71,1,0,0,0,898,896,1,0,0,0,899,900,6,36,-1,0,
  	900,901,3,70,35,0,901,907,1,0,0,0,902,903,10,1,0,0,903,904,5,89,0,0,904,
  	906,3,70,35,0,905,902,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,
  	1,0,0,0,908,73,1,0,0,0,909,907,1,0,0,0,910,911,6,37,-1,0,911,912,3,72,
  	36,0,912,918,1,0,0,0,913,914,10,1,0,0,914,915,5,91,0,0,915,917,3,72,36,
  	0,916,913,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,
  	75,1,0,0,0,920,918,1,0,0,0,921,922,6,38,-1,0,922,923,3,74,37,0,923,929,
  	1,0,0,0,924,925,10,1,0,0,925,926,5,111,0,0,926,928,3,74,37,0,927,924,
  	1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,77,1,0,0,
  	0,931,929,1,0,0,0,932,933,6,39,-1,0,933,934,3,76,38,0,934,940,1,0,0,0,
  	935,936,10,1,0,0,936,937,5,112,0,0,937,939,3,76,38,0,938,935,1,0,0,0,
  	939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,79,1,0,0,0,942,940,
  	1,0,0,0,943,951,3,78,39,0,944,945,3,78,39,0,945,946,5,118,0,0,946,947,
  	3,86,43,0,947,948,5,119,0,0,948,949,3,82,41,0,949,951,1,0,0,0,950,943,
  	1,0,0,0,950,944,1,0,0,0,951,81,1,0,0,0,952,959,3,80,40,0,953,954,3,78,
  	39,0,954,955,3,84,42,0,955,956,3,278,139,0,956,959,1,0,0,0,957,959,3,
  	374,187,0,958,952,1,0,0,0,958,953,1,0,0,0,958,957,1,0,0,0,959,83,1,0,
  	0,0,960,972,5,94,0,0,961,972,5,99,0,0,962,972,5,100,0,0,963,972,5,101,
  	0,0,964,972,5,97,0,0,965,972,5,98,0,0,966,972,3,386,193,0,967,972,5,106,
  	0,0,968,972,5,103,0,0,969,972,5,102,0,0,970,972,5,104,0,0,971,960,1,0,
  	0,0,971,961,1,0,0,0,971,962,1,0,0,0,971,963,1,0,0,0,971,964,1,0,0,0,971,
  	965,1,0,0,0,971,966,1,0,0,0,971,967,1,0,0,0,971,968,1,0,0,0,971,969,1,
  	0,0,0,971,970,1,0,0,0,972,85,1,0,0,0,973,974,6,43,-1,0,974,975,3,82,41,
  	0,975,981,1,0,0,0,976,977,10,1,0,0,977,978,5,115,0,0,978,980,3,82,41,
  	0,979,976,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,
  	87,1,0,0,0,983,981,1,0,0,0,984,985,3,80,40,0,985,89,1,0,0,0,986,1013,
  	3,92,46,0,987,989,3,206,103,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,
  	1,0,0,0,990,1013,3,94,47,0,991,993,3,206,103,0,992,991,1,0,0,0,992,993,
  	1,0,0,0,993,994,1,0,0,0,994,1013,3,96,48,0,995,997,3,206,103,0,996,995,
  	1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,1013,3,100,50,0,999,1001,
  	3,206,103,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,
  	1013,3,104,52,0,1003,1005,3,206,103,0,1004,1003,1,0,0,0,1004,1005,1,0,
  	0,0,1005,1006,1,0,0,0,1006,1013,3,112,56,0,1007,1013,3,114,57,0,1008,
  	1010,3,206,103,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,
  	0,1011,1013,3,364,182,0,1012,986,1,0,0,0,1012,988,1,0,0,0,1012,992,1,
  	0,0,0,1012,996,1,0,0,0,1012,1000,1,0,0,0,1012,1004,1,0,0,0,1012,1007,
  	1,0,0,0,1012,1009,1,0,0,0,1013,91,1,0,0,0,1014,1016,3,206,103,0,1015,
  	1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1018,5,125,0,0,
  	1018,1019,5,119,0,0,1019,1035,3,90,45,0,1020,1022,3,206,103,0,1021,1020,
  	1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1024,5,9,0,0,1024,1025,
  	3,88,44,0,1025,1026,5,119,0,0,1026,1027,3,90,45,0,1027,1035,1,0,0,0,1028,
  	1030,3,206,103,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,
  	0,1031,1032,5,20,0,0,1032,1033,5,119,0,0,1033,1035,3,90,45,0,1034,1015,
  	1,0,0,0,1034,1021,1,0,0,0,1034,1029,1,0,0,0,1035,93,1,0,0,0,1036,1038,
  	3,86,43,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,
  	1040,5,121,0,0,1040,95,1,0,0,0,1041,1043,5,82,0,0,1042,1044,3,98,49,0,
  	1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,83,
  	0,0,1046,97,1,0,0,0,1047,1048,6,49,-1,0,1048,1049,3,90,45,0,1049,1054,
  	1,0,0,0,1050,1051,10,1,0,0,1051,1053,3,90,45,0,1052,1050,1,0,0,0,1053,
  	1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,99,1,0,0,0,1056,
  	1054,1,0,0,0,1057,1058,5,36,0,0,1058,1059,5,78,0,0,1059,1060,3,102,51,
  	0,1060,1061,5,79,0,0,1061,1062,3,90,45,0,1062,1078,1,0,0,0,1063,1064,
  	5,36,0,0,1064,1065,5,78,0,0,1065,1066,3,102,51,0,1066,1067,5,79,0,0,1067,
  	1068,3,90,45,0,1068,1069,5,25,0,0,1069,1070,3,90,45,0,1070,1078,1,0,0,
  	0,1071,1072,5,60,0,0,1072,1073,5,78,0,0,1073,1074,3,102,51,0,1074,1075,
  	5,79,0,0,1075,1076,3,90,45,0,1076,1078,1,0,0,0,1077,1057,1,0,0,0,1077,
  	1063,1,0,0,0,1077,1071,1,0,0,0,1078,101,1,0,0,0,1079,1096,3,86,43,0,1080,
  	1082,3,206,103,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,
  	0,1083,1084,3,134,67,0,1084,1085,3,232,116,0,1085,1086,5,94,0,0,1086,
  	1087,3,278,139,0,1087,1096,1,0,0,0,1088,1090,3,206,103,0,1089,1088,1,
  	0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1092,3,134,67,0,1092,1093,
  	3,232,116,0,1093,1094,3,282,141,0,1094,1096,1,0,0,0,1095,1079,1,0,0,0,
  	1095,1081,1,0,0,0,1095,1089,1,0,0,0,1096,103,1,0,0,0,1097,1098,5,77,0,
  	0,1098,1099,5,78,0,0,1099,1100,3,102,51,0,1100,1101,5,79,0,0,1101,1102,
  	3,90,45,0,1102,1133,1,0,0,0,1103,1104,5,22,0,0,1104,1105,3,90,45,0,1105,
  	1106,5,77,0,0,1106,1107,5,78,0,0,1107,1108,3,86,43,0,1108,1109,5,79,0,
  	0,1109,1110,5,121,0,0,1110,1133,1,0,0,0,1111,1112,5,33,0,0,1112,1113,
  	5,78,0,0,1113,1115,3,106,53,0,1114,1116,3,102,51,0,1115,1114,1,0,0,0,
  	1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1119,5,121,0,0,1118,1120,3,86,
  	43,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,1122,
  	5,79,0,0,1122,1123,3,90,45,0,1123,1133,1,0,0,0,1124,1125,5,33,0,0,1125,
  	1126,5,78,0,0,1126,1127,3,108,54,0,1127,1128,5,119,0,0,1128,1129,3,110,
  	55,0,1129,1130,5,79,0,0,1130,1131,3,90,45,0,1131,1133,1,0,0,0,1132,1097,
  	1,0,0,0,1132,1103,1,0,0,0,1132,1111,1,0,0,0,1132,1124,1,0,0,0,1133,105,
  	1,0,0,0,1134,1137,3,94,47,0,1135,1137,3,124,62,0,1136,1134,1,0,0,0,1136,
  	1135,1,0,0,0,1137,107,1,0,0,0,1138,1140,3,206,103,0,1139,1138,1,0,0,0,
  	1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1142,3,134,67,0,1142,1143,3,
  	232,116,0,1143,109,1,0,0,0,1144,1147,3,86,43,0,1145,1147,3,282,141,0,
  	1146,1144,1,0,0,0,1146,1145,1,0,0,0,1147,111,1,0,0,0,1148,1149,5,8,0,
  	0,1149,1165,5,121,0,0,1150,1151,5,18,0,0,1151,1165,5,121,0,0,1152,1154,
  	5,52,0,0,1153,1155,3,86,43,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,
  	1156,1,0,0,0,1156,1165,5,121,0,0,1157,1158,5,52,0,0,1158,1159,3,282,141,
  	0,1159,1160,5,121,0,0,1160,1165,1,0,0,0,1161,1162,5,35,0,0,1162,1163,
  	5,125,0,0,1163,1165,5,121,0,0,1164,1148,1,0,0,0,1164,1150,1,0,0,0,1164,
  	1152,1,0,0,0,1164,1157,1,0,0,0,1164,1161,1,0,0,0,1165,113,1,0,0,0,1166,
  	1167,3,120,60,0,1167,115,1,0,0,0,1168,1169,6,58,-1,0,1169,1170,3,118,
  	59,0,1170,1175,1,0,0,0,1171,1172,10,1,0,0,1172,1174,3,118,59,0,1173,1171,
  	1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,117,
  	1,0,0,0,1177,1175,1,0,0,0,1178,1188,3,120,60,0,1179,1188,3,270,135,0,
  	1180,1188,3,340,170,0,1181,1188,3,360,180,0,1182,1188,3,362,181,0,1183,
  	1188,3,204,102,0,1184,1188,3,180,90,0,1185,1188,3,128,64,0,1186,1188,
  	3,130,65,0,1187,1178,1,0,0,0,1187,1179,1,0,0,0,1187,1180,1,0,0,0,1187,
  	1181,1,0,0,0,1187,1182,1,0,0,0,1187,1183,1,0,0,0,1187,1184,1,0,0,0,1187,
  	1185,1,0,0,0,1187,1186,1,0,0,0,1188,119,1,0,0,0,1189,1198,3,124,62,0,
  	1190,1198,3,202,101,0,1191,1198,3,194,97,0,1192,1198,3,198,99,0,1193,
  	1198,3,200,100,0,1194,1198,3,126,63,0,1195,1198,3,122,61,0,1196,1198,
  	3,164,82,0,1197,1189,1,0,0,0,1197,1190,1,0,0,0,1197,1191,1,0,0,0,1197,
  	1192,1,0,0,0,1197,1193,1,0,0,0,1197,1194,1,0,0,0,1197,1195,1,0,0,0,1197,
  	1196,1,0,0,0,1198,121,1,0,0,0,1199,1200,5,72,0,0,1200,1202,5,125,0,0,
  	1201,1203,3,206,103,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,
  	0,0,0,1204,1205,5,94,0,0,1205,1206,3,252,126,0,1206,1207,5,121,0,0,1207,
  	123,1,0,0,0,1208,1210,3,134,67,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,
  	1210,1212,1,0,0,0,1211,1213,3,228,114,0,1212,1211,1,0,0,0,1212,1213,1,
  	0,0,0,1213,1214,1,0,0,0,1214,1223,5,121,0,0,1215,1217,3,206,103,0,1216,
  	1218,3,134,67,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,
  	1219,1220,3,228,114,0,1220,1221,5,121,0,0,1221,1223,1,0,0,0,1222,1209,
  	1,0,0,0,1222,1215,1,0,0,0,1223,125,1,0,0,0,1224,1225,5,57,0,0,1225,1226,
  	5,78,0,0,1226,1227,3,88,44,0,1227,1228,5,115,0,0,1228,1229,5,134,0,0,
  	1229,1230,5,79,0,0,1230,1231,5,121,0,0,1231,127,1,0,0,0,1232,1233,5,121,
  	0,0,1233,129,1,0,0,0,1234,1235,3,206,103,0,1235,1236,5,121,0,0,1236,131,
  	1,0,0,0,1237,1244,3,136,68,0,1238,1244,3,142,71,0,1239,1244,3,138,69,
  	0,1240,1244,5,34,0,0,1241,1244,5,67,0,0,1242,1244,5,16,0,0,1243,1237,
  	1,0,0,0,1243,1238,1,0,0,0,1243,1239,1,0,0,0,1243,1240,1,0,0,0,1243,1241,
  	1,0,0,0,1243,1242,1,0,0,0,1244,133,1,0,0,0,1245,1247,3,132,66,0,1246,
  	1248,3,206,103,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1253,1,0,0,
  	0,1249,1250,3,132,66,0,1250,1251,3,134,67,0,1251,1253,1,0,0,0,1252,1245,
  	1,0,0,0,1252,1249,1,0,0,0,1253,135,1,0,0,0,1254,1255,7,2,0,0,1255,137,
  	1,0,0,0,1256,1257,7,3,0,0,1257,139,1,0,0,0,1258,1259,5,125,0,0,1259,141,
  	1,0,0,0,1260,1264,3,144,72,0,1261,1264,3,286,143,0,1262,1264,3,160,80,
  	0,1263,1260,1,0,0,0,1263,1261,1,0,0,0,1263,1262,1,0,0,0,1264,143,1,0,
  	0,0,1265,1270,3,150,75,0,1266,1270,3,156,78,0,1267,1270,3,358,179,0,1268,
  	1270,3,246,123,0,1269,1265,1,0,0,0,1269,1266,1,0,0,0,1269,1267,1,0,0,
  	0,1269,1268,1,0,0,0,1270,145,1,0,0,0,1271,1273,3,142,71,0,1272,1274,3,
  	206,103,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1279,1,0,0,0,1275,
  	1276,3,142,71,0,1276,1277,3,146,73,0,1277,1279,1,0,0,0,1278,1271,1,0,
  	0,0,1278,1275,1,0,0,0,1279,147,1,0,0,0,1280,1282,3,144,72,0,1281,1283,
  	3,206,103,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,1288,1,0,0,0,1284,
  	1285,3,144,72,0,1285,1286,3,148,74,0,1286,1288,1,0,0,0,1287,1280,1,0,
  	0,0,1287,1284,1,0,0,0,1288,149,1,0,0,0,1289,1291,3,10,5,0,1290,1289,1,
  	0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1313,3,152,76,0,1293,1294,
  	3,10,5,0,1294,1295,5,61,0,0,1295,1296,3,348,174,0,1296,1313,1,0,0,0,1297,
  	1313,5,11,0,0,1298,1313,5,12,0,0,1299,1313,5,13,0,0,1300,1313,5,76,0,
  	0,1301,1313,5,7,0,0,1302,1313,5,53,0,0,1303,1313,5,38,0,0,1304,1313,5,
  	39,0,0,1305,1313,5,54,0,0,1306,1313,5,71,0,0,1307,1313,5,32,0,0,1308,
  	1313,5,23,0,0,1309,1313,5,74,0,0,1310,1313,5,6,0,0,1311,1313,3,154,77,
  	0,1312,1290,1,0,0,0,1312,1293,1,0,0,0,1312,1297,1,0,0,0,1312,1298,1,0,
  	0,0,1312,1299,1,0,0,0,1312,1300,1,0,0,0,1312,1301,1,0,0,0,1312,1302,1,
  	0,0,0,1312,1303,1,0,0,0,1312,1304,1,0,0,0,1312,1305,1,0,0,0,1312,1306,
  	1,0,0,0,1312,1307,1,0,0,0,1312,1308,1,0,0,0,1312,1309,1,0,0,0,1312,1310,
  	1,0,0,0,1312,1311,1,0,0,0,1313,151,1,0,0,0,1314,1319,3,284,142,0,1315,
  	1319,3,158,79,0,1316,1319,3,140,70,0,1317,1319,3,348,174,0,1318,1314,
  	1,0,0,0,1318,1315,1,0,0,0,1318,1316,1,0,0,0,1318,1317,1,0,0,0,1319,153,
  	1,0,0,0,1320,1321,5,19,0,0,1321,1322,5,78,0,0,1322,1323,3,86,43,0,1323,
  	1324,5,79,0,0,1324,1330,1,0,0,0,1325,1326,5,19,0,0,1326,1327,5,78,0,0,
  	1327,1328,5,6,0,0,1328,1330,5,79,0,0,1329,1320,1,0,0,0,1329,1325,1,0,
  	0,0,1330,155,1,0,0,0,1331,1333,3,294,147,0,1332,1334,3,206,103,0,1333,
  	1332,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1337,3,10,5,0,1336,
  	1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1339,5,125,0,0,
  	1339,1356,1,0,0,0,1340,1341,3,294,147,0,1341,1342,3,348,174,0,1342,1356,
  	1,0,0,0,1343,1344,3,294,147,0,1344,1346,3,10,5,0,1345,1347,5,61,0,0,1346,
  	1345,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1349,3,348,174,
  	0,1349,1356,1,0,0,0,1350,1352,5,26,0,0,1351,1353,3,10,5,0,1352,1351,1,
  	0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,0,0,1354,1356,5,125,0,0,1355,1331,
  	1,0,0,0,1355,1340,1,0,0,0,1355,1343,1,0,0,0,1355,1350,1,0,0,0,1356,157,
  	1,0,0,0,1357,1358,5,125,0,0,1358,159,1,0,0,0,1359,1360,3,162,81,0,1360,
  	1362,5,82,0,0,1361,1363,3,170,85,0,1362,1361,1,0,0,0,1362,1363,1,0,0,
  	0,1363,1364,1,0,0,0,1364,1365,5,83,0,0,1365,1373,1,0,0,0,1366,1367,3,
  	162,81,0,1367,1368,5,82,0,0,1368,1369,3,170,85,0,1369,1370,5,115,0,0,
  	1370,1371,5,83,0,0,1371,1373,1,0,0,0,1372,1359,1,0,0,0,1372,1366,1,0,
  	0,0,1373,161,1,0,0,0,1374,1376,3,166,83,0,1375,1377,3,206,103,0,1376,
  	1375,1,0,0,0,1376,1377,1,0,0,0,1377,1379,1,0,0,0,1378,1380,5,125,0,0,
  	1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,0,0,1381,1383,3,168,
  	84,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1394,1,0,0,0,1384,1386,
  	3,166,83,0,1385,1387,3,206,103,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,
  	1387,1388,1,0,0,0,1388,1389,3,10,5,0,1389,1391,5,125,0,0,1390,1392,3,
  	168,84,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1394,1,0,0,0,1393,1374,
  	1,0,0,0,1393,1384,1,0,0,0,1394,163,1,0,0,0,1395,1397,3,166,83,0,1396,
  	1398,3,206,103,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,
  	0,1399,1401,5,125,0,0,1400,1402,3,168,84,0,1401,1400,1,0,0,0,1401,1402,
  	1,0,0,0,1402,1403,1,0,0,0,1403,1404,5,121,0,0,1404,165,1,0,0,0,1405,1411,
  	5,26,0,0,1406,1407,5,26,0,0,1407,1411,5,14,0,0,1408,1409,5,26,0,0,1409,
  	1411,5,59,0,0,1410,1405,1,0,0,0,1410,1406,1,0,0,0,1410,1408,1,0,0,0,1411,
  	167,1,0,0,0,1412,1413,5,119,0,0,1413,1414,3,146,73,0,1414,169,1,0,0,0,
  	1415,1416,6,85,-1,0,1416,1417,3,172,86,0,1417,1423,1,0,0,0,1418,1419,
  	10,1,0,0,1419,1420,5,115,0,0,1420,1422,3,172,86,0,1421,1418,1,0,0,0,1422,
  	1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,171,1,0,0,0,1425,
  	1423,1,0,0,0,1426,1432,3,174,87,0,1427,1428,3,174,87,0,1428,1429,5,94,
  	0,0,1429,1430,3,88,44,0,1430,1432,1,0,0,0,1431,1426,1,0,0,0,1431,1427,
  	1,0,0,0,1432,173,1,0,0,0,1433,1434,5,125,0,0,1434,175,1,0,0,0,1435,1438,
  	3,178,89,0,1436,1438,3,192,96,0,1437,1435,1,0,0,0,1437,1436,1,0,0,0,1438,
  	177,1,0,0,0,1439,1440,5,125,0,0,1440,179,1,0,0,0,1441,1444,3,182,91,0,
  	1442,1444,3,188,94,0,1443,1441,1,0,0,0,1443,1442,1,0,0,0,1444,181,1,0,
  	0,0,1445,1448,3,184,92,0,1446,1448,3,186,93,0,1447,1445,1,0,0,0,1447,
  	1446,1,0,0,0,1448,183,1,0,0,0,1449,1451,5,37,0,0,1450,1449,1,0,0,0,1450,
  	1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,5,41,0,0,1453,1454,5,125,0,0,
  	1454,1455,5,82,0,0,1455,1456,3,190,95,0,1456,1457,5,83,0,0,1457,185,1,
  	0,0,0,1458,1460,5,37,0,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1461,
  	1,0,0,0,1461,1462,5,41,0,0,1462,1463,3,178,89,0,1463,1464,5,82,0,0,1464,
  	1465,3,190,95,0,1465,1466,5,83,0,0,1466,187,1,0,0,0,1467,1469,5,37,0,
  	0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1471,5,41,
  	0,0,1471,1472,5,82,0,0,1472,1473,3,190,95,0,1473,1474,5,83,0,0,1474,189,
  	1,0,0,0,1475,1477,3,116,58,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,
  	191,1,0,0,0,1478,1479,5,125,0,0,1479,193,1,0,0,0,1480,1481,5,41,0,0,1481,
  	1482,5,125,0,0,1482,1483,5,94,0,0,1483,1484,3,196,98,0,1484,1485,5,121,
  	0,0,1485,195,1,0,0,0,1486,1488,3,10,5,0,1487,1486,1,0,0,0,1487,1488,1,
  	0,0,0,1488,1489,1,0,0,0,1489,1490,3,176,88,0,1490,197,1,0,0,0,1491,1493,
  	5,72,0,0,1492,1494,5,69,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,
  	1495,1,0,0,0,1495,1496,3,10,5,0,1496,1497,3,6,3,0,1497,1498,5,121,0,0,
  	1498,1505,1,0,0,0,1499,1500,5,72,0,0,1500,1501,5,120,0,0,1501,1502,3,
  	6,3,0,1502,1503,5,121,0,0,1503,1505,1,0,0,0,1504,1491,1,0,0,0,1504,1499,
  	1,0,0,0,1505,199,1,0,0,0,1506,1508,3,206,103,0,1507,1506,1,0,0,0,1507,
  	1508,1,0,0,0,1508,1509,1,0,0,0,1509,1510,5,72,0,0,1510,1512,5,41,0,0,
  	1511,1513,3,10,5,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,
  	0,0,1514,1515,3,176,88,0,1515,1516,5,121,0,0,1516,201,1,0,0,0,1517,1518,
  	5,5,0,0,1518,1519,5,78,0,0,1519,1520,5,134,0,0,1520,1521,5,79,0,0,1521,
  	1522,5,121,0,0,1522,203,1,0,0,0,1523,1524,5,29,0,0,1524,1525,5,134,0,
  	0,1525,1527,5,82,0,0,1526,1528,3,116,58,0,1527,1526,1,0,0,0,1527,1528,
  	1,0,0,0,1528,1529,1,0,0,0,1529,1534,5,83,0,0,1530,1531,5,29,0,0,1531,
  	1532,5,134,0,0,1532,1534,3,118,59,0,1533,1523,1,0,0,0,1533,1530,1,0,0,
  	0,1534,205,1,0,0,0,1535,1536,6,103,-1,0,1536,1537,3,208,104,0,1537,1542,
  	1,0,0,0,1538,1539,10,1,0,0,1539,1541,3,208,104,0,1540,1538,1,0,0,0,1541,
  	1544,1,0,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,207,1,0,0,0,1544,
  	1542,1,0,0,0,1545,1546,5,80,0,0,1546,1547,5,80,0,0,1547,1548,3,212,106,
  	0,1548,1549,5,81,0,0,1549,1550,5,81,0,0,1550,1553,1,0,0,0,1551,1553,3,
  	210,105,0,1552,1545,1,0,0,0,1552,1551,1,0,0,0,1553,209,1,0,0,0,1554,1555,
  	5,3,0,0,1555,1556,5,78,0,0,1556,1558,3,252,126,0,1557,1559,5,124,0,0,
  	1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1561,5,79,
  	0,0,1561,1571,1,0,0,0,1562,1563,5,3,0,0,1563,1564,5,78,0,0,1564,1566,
  	3,88,44,0,1565,1567,5,124,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,
  	1568,1,0,0,0,1568,1569,5,79,0,0,1569,1571,1,0,0,0,1570,1554,1,0,0,0,1570,
  	1562,1,0,0,0,1571,211,1,0,0,0,1572,1574,6,106,-1,0,1573,1575,3,214,107,
  	0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1580,1,0,0,0,1576,1577,3,214,
  	107,0,1577,1578,5,124,0,0,1578,1580,1,0,0,0,1579,1572,1,0,0,0,1579,1576,
  	1,0,0,0,1580,1593,1,0,0,0,1581,1582,10,3,0,0,1582,1584,5,115,0,0,1583,
  	1585,3,214,107,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1592,1,0,0,
  	0,1586,1587,10,1,0,0,1587,1588,5,115,0,0,1588,1589,3,214,107,0,1589,1590,
  	5,124,0,0,1590,1592,1,0,0,0,1591,1581,1,0,0,0,1591,1586,1,0,0,0,1592,
  	1595,1,0,0,0,1593,1591,1,0,0,0,1593,1594,1,0,0,0,1594,213,1,0,0,0,1595,
  	1593,1,0,0,0,1596,1598,3,216,108,0,1597,1599,3,222,111,0,1598,1597,1,
  	0,0,0,1598,1599,1,0,0,0,1599,215,1,0,0,0,1600,1603,5,125,0,0,1601,1603,
  	3,218,109,0,1602,1600,1,0,0,0,1602,1601,1,0,0,0,1603,217,1,0,0,0,1604,
  	1605,3,220,110,0,1605,1606,5,120,0,0,1606,1607,5,125,0,0,1607,219,1,0,
  	0,0,1608,1609,5,125,0,0,1609,221,1,0,0,0,1610,1611,5,78,0,0,1611,1612,
  	3,224,112,0,1612,1613,5,79,0,0,1613,223,1,0,0,0,1614,1616,6,112,-1,0,
  	1615,1617,3,226,113,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1622,1,
  	0,0,0,1618,1619,10,1,0,0,1619,1621,3,226,113,0,1620,1618,1,0,0,0,1621,
  	1624,1,0,0,0,1622,1620,1,0,0,0,1622,1623,1,0,0,0,1623,225,1,0,0,0,1624,
  	1622,1,0,0,0,1625,1626,5,78,0,0,1626,1627,3,224,112,0,1627,1628,5,79,
  	0,0,1628,1638,1,0,0,0,1629,1630,5,80,0,0,1630,1631,3,224,112,0,1631,1632,
  	5,81,0,0,1632,1638,1,0,0,0,1633,1634,5,82,0,0,1634,1635,3,224,112,0,1635,
  	1636,5,83,0,0,1636,1638,1,0,0,0,1637,1625,1,0,0,0,1637,1629,1,0,0,0,1637,
  	1633,1,0,0,0,1638,227,1,0,0,0,1639,1640,6,114,-1,0,1640,1641,3,230,115,
  	0,1641,1647,1,0,0,0,1642,1643,10,1,0,0,1643,1644,5,115,0,0,1644,1646,
  	3,230,115,0,1645,1642,1,0,0,0,1646,1649,1,0,0,0,1647,1645,1,0,0,0,1647,
  	1648,1,0,0,0,1648,229,1,0,0,0,1649,1647,1,0,0,0,1650,1652,3,232,116,0,
  	1651,1653,3,274,137,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,231,1,
  	0,0,0,1654,1660,3,234,117,0,1655,1656,3,236,118,0,1656,1657,3,238,119,
  	0,1657,1658,3,240,120,0,1658,1660,1,0,0,0,1659,1654,1,0,0,0,1659,1655,
  	1,0,0,0,1660,233,1,0,0,0,1661,1666,3,236,118,0,1662,1663,3,242,121,0,
  	1663,1664,3,234,117,0,1664,1666,1,0,0,0,1665,1661,1,0,0,0,1665,1662,1,
  	0,0,0,1666,235,1,0,0,0,1667,1668,6,118,-1,0,1668,1670,3,250,125,0,1669,
  	1671,3,206,103,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,1677,1,0,0,
  	0,1672,1673,5,78,0,0,1673,1674,3,234,117,0,1674,1675,5,79,0,0,1675,1677,
  	1,0,0,0,1676,1667,1,0,0,0,1676,1672,1,0,0,0,1677,1691,1,0,0,0,1678,1679,
  	10,3,0,0,1679,1690,3,238,119,0,1680,1681,10,2,0,0,1681,1683,5,80,0,0,
  	1682,1684,3,88,44,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,
  	0,0,1685,1687,5,81,0,0,1686,1688,3,206,103,0,1687,1686,1,0,0,0,1687,1688,
  	1,0,0,0,1688,1690,1,0,0,0,1689,1678,1,0,0,0,1689,1680,1,0,0,0,1690,1693,
  	1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,237,1,0,0,0,1693,1691,
  	1,0,0,0,1694,1695,5,78,0,0,1695,1696,3,264,132,0,1696,1698,5,79,0,0,1697,
  	1699,3,244,122,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,
  	0,1700,1702,3,248,124,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1704,
  	1,0,0,0,1703,1705,3,376,188,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,
  	1707,1,0,0,0,1706,1708,3,206,103,0,1707,1706,1,0,0,0,1707,1708,1,0,0,
  	0,1708,239,1,0,0,0,1709,1710,5,117,0,0,1710,1712,3,148,74,0,1711,1713,
  	3,254,127,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,241,1,0,0,0,1714,
  	1716,5,86,0,0,1715,1717,3,206,103,0,1716,1715,1,0,0,0,1716,1717,1,0,0,
  	0,1717,1719,1,0,0,0,1718,1720,3,244,122,0,1719,1718,1,0,0,0,1719,1720,
  	1,0,0,0,1720,1738,1,0,0,0,1721,1723,5,90,0,0,1722,1724,3,206,103,0,1723,
  	1722,1,0,0,0,1723,1724,1,0,0,0,1724,1738,1,0,0,0,1725,1727,5,111,0,0,
  	1726,1728,3,206,103,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1738,1,
  	0,0,0,1729,1730,3,10,5,0,1730,1732,5,86,0,0,1731,1733,3,206,103,0,1732,
  	1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1736,3,244,122,
  	0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,1,0,0,0,1737,1714,1,0,
  	0,0,1737,1721,1,0,0,0,1737,1725,1,0,0,0,1737,1729,1,0,0,0,1738,243,1,
  	0,0,0,1739,1741,3,246,123,0,1740,1742,3,244,122,0,1741,1740,1,0,0,0,1741,
  	1742,1,0,0,0,1742,245,1,0,0,0,1743,1744,7,4,0,0,1744,247,1,0,0,0,1745,
  	1746,7,5,0,0,1746,249,1,0,0,0,1747,1749,5,124,0,0,1748,1747,1,0,0,0,1748,
  	1749,1,0,0,0,1749,1750,1,0,0,0,1750,1751,3,4,2,0,1751,251,1,0,0,0,1752,
  	1754,3,146,73,0,1753,1755,3,254,127,0,1754,1753,1,0,0,0,1754,1755,1,0,
  	0,0,1755,253,1,0,0,0,1756,1765,3,256,128,0,1757,1759,3,258,129,0,1758,
  	1757,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1761,3,238,119,
  	0,1761,1762,3,240,120,0,1762,1765,1,0,0,0,1763,1765,3,260,130,0,1764,
  	1756,1,0,0,0,1764,1758,1,0,0,0,1764,1763,1,0,0,0,1765,255,1,0,0,0,1766,
  	1772,3,258,129,0,1767,1769,3,242,121,0,1768,1770,3,256,128,0,1769,1768,
  	1,0,0,0,1769,1770,1,0,0,0,1770,1772,1,0,0,0,1771,1766,1,0,0,0,1771,1767,
  	1,0,0,0,1772,257,1,0,0,0,1773,1774,6,129,-1,0,1774,1788,3,238,119,0,1775,
  	1777,5,80,0,0,1776,1778,3,88,44,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,
  	1778,1779,1,0,0,0,1779,1781,5,81,0,0,1780,1782,3,206,103,0,1781,1780,
  	1,0,0,0,1781,1782,1,0,0,0,1782,1788,1,0,0,0,1783,1784,5,78,0,0,1784,1785,
  	3,256,128,0,1785,1786,5,79,0,0,1786,1788,1,0,0,0,1787,1773,1,0,0,0,1787,
  	1775,1,0,0,0,1787,1783,1,0,0,0,1788,1802,1,0,0,0,1789,1790,10,5,0,0,1790,
  	1801,3,238,119,0,1791,1792,10,3,0,0,1792,1794,5,80,0,0,1793,1795,3,88,
  	44,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1798,
  	5,81,0,0,1797,1799,3,206,103,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
  	1801,1,0,0,0,1800,1789,1,0,0,0,1800,1791,1,0,0,0,1801,1804,1,0,0,0,1802,
  	1800,1,0,0,0,1802,1803,1,0,0,0,1803,259,1,0,0,0,1804,1802,1,0,0,0,1805,
  	1810,3,262,131,0,1806,1807,3,242,121,0,1807,1808,3,260,130,0,1808,1810,
  	1,0,0,0,1809,1805,1,0,0,0,1809,1806,1,0,0,0,1810,261,1,0,0,0,1811,1812,
  	6,131,-1,0,1812,1813,5,124,0,0,1813,1827,1,0,0,0,1814,1815,10,3,0,0,1815,
  	1826,3,238,119,0,1816,1817,10,2,0,0,1817,1819,5,80,0,0,1818,1820,3,88,
  	44,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1823,
  	5,81,0,0,1822,1824,3,206,103,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
  	1826,1,0,0,0,1825,1814,1,0,0,0,1825,1816,1,0,0,0,1826,1829,1,0,0,0,1827,
  	1825,1,0,0,0,1827,1828,1,0,0,0,1828,263,1,0,0,0,1829,1827,1,0,0,0,1830,
  	1832,3,266,133,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,
  	0,1833,1835,5,124,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1841,1,
  	0,0,0,1836,1837,3,266,133,0,1837,1838,5,115,0,0,1838,1839,5,124,0,0,1839,
  	1841,1,0,0,0,1840,1831,1,0,0,0,1840,1836,1,0,0,0,1841,265,1,0,0,0,1842,
  	1843,6,133,-1,0,1843,1844,3,268,134,0,1844,1850,1,0,0,0,1845,1846,10,
  	1,0,0,1846,1847,5,115,0,0,1847,1849,3,268,134,0,1848,1845,1,0,0,0,1849,
  	1852,1,0,0,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,267,1,0,0,0,1852,
  	1850,1,0,0,0,1853,1855,3,206,103,0,1854,1853,1,0,0,0,1854,1855,1,0,0,
  	0,1855,1856,1,0,0,0,1856,1857,3,134,67,0,1857,1858,3,232,116,0,1858,1885,
  	1,0,0,0,1859,1861,3,206,103,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,
  	1862,1,0,0,0,1862,1863,3,134,67,0,1863,1864,3,232,116,0,1864,1865,5,94,
  	0,0,1865,1866,3,278,139,0,1866,1885,1,0,0,0,1867,1869,3,206,103,0,1868,
  	1867,1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1872,3,134,67,0,
  	1871,1873,3,254,127,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1885,1,
  	0,0,0,1874,1876,3,206,103,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,
  	1877,1,0,0,0,1877,1879,3,134,67,0,1878,1880,3,254,127,0,1879,1878,1,0,
  	0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,1882,5,94,0,0,1882,1883,
  	3,278,139,0,1883,1885,1,0,0,0,1884,1854,1,0,0,0,1884,1860,1,0,0,0,1884,
  	1868,1,0,0,0,1884,1875,1,0,0,0,1885,269,1,0,0,0,1886,1888,3,206,103,0,
  	1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1891,3,134,
  	67,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1894,
  	3,232,116,0,1893,1895,3,304,152,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,
  	1895,1896,1,0,0,0,1896,1897,3,272,136,0,1897,271,1,0,0,0,1898,1900,3,
  	328,164,0,1899,1898,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,
  	1910,3,96,48,0,1902,1910,3,366,183,0,1903,1904,5,94,0,0,1904,1905,5,20,
  	0,0,1905,1910,5,121,0,0,1906,1907,5,94,0,0,1907,1908,5,21,0,0,1908,1910,
  	5,121,0,0,1909,1899,1,0,0,0,1909,1902,1,0,0,0,1909,1903,1,0,0,0,1909,
  	1906,1,0,0,0,1910,273,1,0,0,0,1911,1917,3,276,138,0,1912,1913,5,78,0,
  	0,1913,1914,3,32,16,0,1914,1915,5,79,0,0,1915,1917,1,0,0,0,1916,1911,
  	1,0,0,0,1916,1912,1,0,0,0,1917,275,1,0,0,0,1918,1919,5,94,0,0,1919,1922,
  	3,278,139,0,1920,1922,3,282,141,0,1921,1918,1,0,0,0,1921,1920,1,0,0,0,
  	1922,277,1,0,0,0,1923,1926,3,82,41,0,1924,1926,3,282,141,0,1925,1923,
  	1,0,0,0,1925,1924,1,0,0,0,1926,279,1,0,0,0,1927,1928,6,140,-1,0,1928,
  	1930,3,278,139,0,1929,1931,5,124,0,0,1930,1929,1,0,0,0,1930,1931,1,0,
  	0,0,1931,1940,1,0,0,0,1932,1933,10,1,0,0,1933,1934,5,115,0,0,1934,1936,
  	3,278,139,0,1935,1937,5,124,0,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,
  	1939,1,0,0,0,1938,1932,1,0,0,0,1939,1942,1,0,0,0,1940,1938,1,0,0,0,1940,
  	1941,1,0,0,0,1941,281,1,0,0,0,1942,1940,1,0,0,0,1943,1944,5,82,0,0,1944,
  	1946,3,280,140,0,1945,1947,5,115,0,0,1946,1945,1,0,0,0,1946,1947,1,0,
  	0,0,1947,1948,1,0,0,0,1948,1949,5,83,0,0,1949,1953,1,0,0,0,1950,1951,
  	5,82,0,0,1951,1953,5,83,0,0,1952,1943,1,0,0,0,1952,1950,1,0,0,0,1953,
  	283,1,0,0,0,1954,1957,5,125,0,0,1955,1957,3,348,174,0,1956,1954,1,0,0,
  	0,1956,1955,1,0,0,0,1957,285,1,0,0,0,1958,1959,3,288,144,0,1959,1961,
  	5,82,0,0,1960,1962,3,296,148,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,
  	1963,1,0,0,0,1963,1964,5,83,0,0,1964,287,1,0,0,0,1965,1967,3,294,147,
  	0,1966,1968,3,206,103,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,
  	1,0,0,0,1969,1971,3,290,145,0,1970,1972,3,292,146,0,1971,1970,1,0,0,0,
  	1971,1972,1,0,0,0,1972,1974,1,0,0,0,1973,1975,3,310,155,0,1974,1973,1,
  	0,0,0,1974,1975,1,0,0,0,1975,1984,1,0,0,0,1976,1978,3,294,147,0,1977,
  	1979,3,206,103,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,1981,1,0,0,
  	0,1980,1982,3,310,155,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1984,
  	1,0,0,0,1983,1965,1,0,0,0,1983,1976,1,0,0,0,1984,289,1,0,0,0,1985,1987,
  	3,10,5,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,
  	3,284,142,0,1989,291,1,0,0,0,1990,1991,5,31,0,0,1991,293,1,0,0,0,1992,
  	1993,7,6,0,0,1993,295,1,0,0,0,1994,1996,3,298,149,0,1995,1997,3,296,148,
  	0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,2004,1,0,0,0,1998,1999,3,320,
  	160,0,1999,2001,5,119,0,0,2000,2002,3,296,148,0,2001,2000,1,0,0,0,2001,
  	2002,1,0,0,0,2002,2004,1,0,0,0,2003,1994,1,0,0,0,2003,1998,1,0,0,0,2004,
  	297,1,0,0,0,2005,2007,3,206,103,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,
  	2007,2009,1,0,0,0,2008,2010,3,134,67,0,2009,2008,1,0,0,0,2009,2010,1,
  	0,0,0,2010,2012,1,0,0,0,2011,2013,3,300,150,0,2012,2011,1,0,0,0,2012,
  	2013,1,0,0,0,2013,2014,1,0,0,0,2014,2022,5,121,0,0,2015,2022,3,270,135,
  	0,2016,2022,3,198,99,0,2017,2022,3,126,63,0,2018,2022,3,340,170,0,2019,
  	2022,3,122,61,0,2020,2022,3,128,64,0,2021,2006,1,0,0,0,2021,2015,1,0,
  	0,0,2021,2016,1,0,0,0,2021,2017,1,0,0,0,2021,2018,1,0,0,0,2021,2019,1,
  	0,0,0,2021,2020,1,0,0,0,2022,299,1,0,0,0,2023,2024,6,150,-1,0,2024,2025,
  	3,302,151,0,2025,2031,1,0,0,0,2026,2027,10,1,0,0,2027,2028,5,115,0,0,
  	2028,2030,3,302,151,0,2029,2026,1,0,0,0,2030,2033,1,0,0,0,2031,2029,1,
  	0,0,0,2031,2032,1,0,0,0,2032,301,1,0,0,0,2033,2031,1,0,0,0,2034,2036,
  	3,232,116,0,2035,2037,3,304,152,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,
  	2037,2039,1,0,0,0,2038,2040,3,308,154,0,2039,2038,1,0,0,0,2039,2040,1,
  	0,0,0,2040,2054,1,0,0,0,2041,2043,3,232,116,0,2042,2044,3,276,138,0,2043,
  	2042,1,0,0,0,2043,2044,1,0,0,0,2044,2054,1,0,0,0,2045,2047,5,125,0,0,
  	2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2049,1,0,0,0,2048,2050,3,206,
  	103,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2052,
  	5,119,0,0,2052,2054,3,88,44,0,2053,2034,1,0,0,0,2053,2041,1,0,0,0,2053,
  	2046,1,0,0,0,2054,303,1,0,0,0,2055,2056,6,152,-1,0,2056,2057,3,306,153,
  	0,2057,2062,1,0,0,0,2058,2059,10,1,0,0,2059,2061,3,306,153,0,2060,2058,
  	1,0,0,0,2061,2064,1,0,0,0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,305,
  	1,0,0,0,2064,2062,1,0,0,0,2065,2066,7,7,0,0,2066,307,1,0,0,0,2067,2068,
  	5,94,0,0,2068,2069,5,128,0,0,2069,2070,6,154,-1,0,2070,309,1,0,0,0,2071,
  	2072,5,119,0,0,2072,2073,3,312,156,0,2073,311,1,0,0,0,2074,2075,6,156,
  	-1,0,2075,2077,3,314,157,0,2076,2078,5,124,0,0,2077,2076,1,0,0,0,2077,
  	2078,1,0,0,0,2078,2087,1,0,0,0,2079,2080,10,1,0,0,2080,2081,5,115,0,0,
  	2081,2083,3,314,157,0,2082,2084,5,124,0,0,2083,2082,1,0,0,0,2083,2084,
  	1,0,0,0,2084,2086,1,0,0,0,2085,2079,1,0,0,0,2086,2089,1,0,0,0,2087,2085,
  	1,0,0,0,2087,2088,1,0,0,0,2088,313,1,0,0,0,2089,2087,1,0,0,0,2090,2092,
  	3,206,103,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,1,0,0,0,2093,
  	2112,3,318,159,0,2094,2096,3,206,103,0,2095,2094,1,0,0,0,2095,2096,1,
  	0,0,0,2096,2097,1,0,0,0,2097,2099,5,73,0,0,2098,2100,3,320,160,0,2099,
  	2098,1,0,0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2112,3,318,159,
  	0,2102,2104,3,206,103,0,2103,2102,1,0,0,0,2103,2104,1,0,0,0,2104,2105,
  	1,0,0,0,2105,2107,3,320,160,0,2106,2108,5,73,0,0,2107,2106,1,0,0,0,2107,
  	2108,1,0,0,0,2108,2109,1,0,0,0,2109,2110,3,318,159,0,2110,2112,1,0,0,
  	0,2111,2091,1,0,0,0,2111,2095,1,0,0,0,2111,2103,1,0,0,0,2112,315,1,0,
  	0,0,2113,2115,3,10,5,0,2114,2113,1,0,0,0,2114,2115,1,0,0,0,2115,2116,
  	1,0,0,0,2116,2119,3,284,142,0,2117,2119,3,154,77,0,2118,2114,1,0,0,0,
  	2118,2117,1,0,0,0,2119,317,1,0,0,0,2120,2121,3,316,158,0,2121,319,1,0,
  	0,0,2122,2123,7,8,0,0,2123,321,1,0,0,0,2124,2125,5,45,0,0,2125,2126,3,
  	324,162,0,2126,323,1,0,0,0,2127,2129,3,146,73,0,2128,2130,3,326,163,0,
  	2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,325,1,0,0,0,2131,2133,3,242,
  	121,0,2132,2134,3,326,163,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,
  	327,1,0,0,0,2135,2136,5,119,0,0,2136,2137,3,330,165,0,2137,329,1,0,0,
  	0,2138,2140,3,332,166,0,2139,2141,5,124,0,0,2140,2139,1,0,0,0,2140,2141,
  	1,0,0,0,2141,2150,1,0,0,0,2142,2144,3,332,166,0,2143,2145,5,124,0,0,2144,
  	2143,1,0,0,0,2144,2145,1,0,0,0,2145,2146,1,0,0,0,2146,2147,5,115,0,0,
  	2147,2148,3,330,165,0,2148,2150,1,0,0,0,2149,2138,1,0,0,0,2149,2142,1,
  	0,0,0,2150,331,1,0,0,0,2151,2152,3,334,167,0,2152,2154,5,78,0,0,2153,
  	2155,3,32,16,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,2156,1,0,0,0,
  	2156,2157,5,79,0,0,2157,2162,1,0,0,0,2158,2159,3,334,167,0,2159,2160,
  	3,282,141,0,2160,2162,1,0,0,0,2161,2151,1,0,0,0,2161,2158,1,0,0,0,2162,
  	333,1,0,0,0,2163,2166,3,316,158,0,2164,2166,5,125,0,0,2165,2163,1,0,0,
  	0,2165,2164,1,0,0,0,2166,335,1,0,0,0,2167,2168,5,45,0,0,2168,2169,3,388,
  	194,0,2169,337,1,0,0,0,2170,2171,5,45,0,0,2171,2172,5,134,0,0,2172,2176,
  	5,125,0,0,2173,2174,5,45,0,0,2174,2176,5,137,0,0,2175,2170,1,0,0,0,2175,
  	2173,1,0,0,0,2176,339,1,0,0,0,2177,2178,5,61,0,0,2178,2179,5,95,0,0,2179,
  	2180,3,342,171,0,2180,2181,5,96,0,0,2181,2182,3,118,59,0,2182,341,1,0,
  	0,0,2183,2184,6,171,-1,0,2184,2185,3,344,172,0,2185,2191,1,0,0,0,2186,
  	2187,10,1,0,0,2187,2188,5,115,0,0,2188,2190,3,344,172,0,2189,2186,1,0,
  	0,0,2190,2193,1,0,0,0,2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,343,1,
  	0,0,0,2193,2191,1,0,0,0,2194,2197,3,346,173,0,2195,2197,3,268,134,0,2196,
  	2194,1,0,0,0,2196,2195,1,0,0,0,2197,345,1,0,0,0,2198,2200,5,14,0,0,2199,
  	2201,5,124,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2203,1,0,0,0,
  	2202,2204,5,125,0,0,2203,2202,1,0,0,0,2203,2204,1,0,0,0,2204,2247,1,0,
  	0,0,2205,2207,5,14,0,0,2206,2208,5,125,0,0,2207,2206,1,0,0,0,2207,2208,
  	1,0,0,0,2208,2209,1,0,0,0,2209,2210,5,94,0,0,2210,2247,3,252,126,0,2211,
  	2213,5,69,0,0,2212,2214,5,124,0,0,2213,2212,1,0,0,0,2213,2214,1,0,0,0,
  	2214,2216,1,0,0,0,2215,2217,5,125,0,0,2216,2215,1,0,0,0,2216,2217,1,0,
  	0,0,2217,2247,1,0,0,0,2218,2220,5,69,0,0,2219,2221,5,125,0,0,2220,2219,
  	1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,2222,2223,5,94,0,0,2223,2247,
  	3,252,126,0,2224,2225,5,61,0,0,2225,2226,5,95,0,0,2226,2227,3,342,171,
  	0,2227,2228,5,96,0,0,2228,2230,5,14,0,0,2229,2231,5,124,0,0,2230,2229,
  	1,0,0,0,2230,2231,1,0,0,0,2231,2233,1,0,0,0,2232,2234,5,125,0,0,2233,
  	2232,1,0,0,0,2233,2234,1,0,0,0,2234,2247,1,0,0,0,2235,2236,5,61,0,0,2236,
  	2237,5,95,0,0,2237,2238,3,342,171,0,2238,2239,5,96,0,0,2239,2241,5,14,
  	0,0,2240,2242,5,125,0,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,
  	1,0,0,0,2243,2244,5,94,0,0,2244,2245,3,4,2,0,2245,2247,1,0,0,0,2246,2198,
  	1,0,0,0,2246,2205,1,0,0,0,2246,2211,1,0,0,0,2246,2218,1,0,0,0,2246,2224,
  	1,0,0,0,2246,2235,1,0,0,0,2247,347,1,0,0,0,2248,2249,3,352,176,0,2249,
  	2251,5,95,0,0,2250,2252,3,354,177,0,2251,2250,1,0,0,0,2251,2252,1,0,0,
  	0,2252,2253,1,0,0,0,2253,2254,5,96,0,0,2254,349,1,0,0,0,2255,2271,3,348,
  	174,0,2256,2257,3,336,168,0,2257,2259,5,95,0,0,2258,2260,3,354,177,0,
  	2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,1,0,0,0,2261,2262,5,96,
  	0,0,2262,2271,1,0,0,0,2263,2264,3,338,169,0,2264,2266,5,95,0,0,2265,2267,
  	3,354,177,0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,
  	2269,5,96,0,0,2269,2271,1,0,0,0,2270,2255,1,0,0,0,2270,2256,1,0,0,0,2270,
  	2263,1,0,0,0,2271,351,1,0,0,0,2272,2273,5,125,0,0,2273,353,1,0,0,0,2274,
  	2275,6,177,-1,0,2275,2277,3,356,178,0,2276,2278,5,124,0,0,2277,2276,1,
  	0,0,0,2277,2278,1,0,0,0,2278,2287,1,0,0,0,2279,2280,10,1,0,0,2280,2281,
  	5,115,0,0,2281,2283,3,356,178,0,2282,2284,5,124,0,0,2283,2282,1,0,0,0,
  	2283,2284,1,0,0,0,2284,2286,1,0,0,0,2285,2279,1,0,0,0,2286,2289,1,0,0,
  	0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,355,1,0,0,0,2289,2287,1,0,
  	0,0,2290,2294,3,252,126,0,2291,2294,3,88,44,0,2292,2294,3,4,2,0,2293,
  	2290,1,0,0,0,2293,2291,1,0,0,0,2293,2292,1,0,0,0,2294,357,1,0,0,0,2295,
  	2296,5,69,0,0,2296,2297,3,10,5,0,2297,2298,5,125,0,0,2298,2307,1,0,0,
  	0,2299,2300,5,69,0,0,2300,2302,3,10,5,0,2301,2303,5,61,0,0,2302,2301,
  	1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,2304,2305,3,348,174,0,2305,
  	2307,1,0,0,0,2306,2295,1,0,0,0,2306,2299,1,0,0,0,2307,359,1,0,0,0,2308,
  	2310,5,29,0,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,
  	2312,5,61,0,0,2312,2313,3,118,59,0,2313,361,1,0,0,0,2314,2315,5,61,0,
  	0,2315,2316,5,95,0,0,2316,2317,5,96,0,0,2317,2318,3,118,59,0,2318,363,
  	1,0,0,0,2319,2320,5,66,0,0,2320,2321,3,96,48,0,2321,2322,3,368,184,0,
  	2322,365,1,0,0,0,2323,2325,5,66,0,0,2324,2326,3,328,164,0,2325,2324,1,
  	0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,2328,3,96,48,0,2328,2329,
  	3,368,184,0,2329,367,1,0,0,0,2330,2332,3,370,185,0,2331,2333,3,368,184,
  	0,2332,2331,1,0,0,0,2332,2333,1,0,0,0,2333,369,1,0,0,0,2334,2335,5,10,
  	0,0,2335,2336,5,78,0,0,2336,2337,3,372,186,0,2337,2338,5,79,0,0,2338,
  	2339,3,96,48,0,2339,371,1,0,0,0,2340,2342,3,206,103,0,2341,2340,1,0,0,
  	0,2341,2342,1,0,0,0,2342,2343,1,0,0,0,2343,2344,3,146,73,0,2344,2345,
  	3,232,116,0,2345,2355,1,0,0,0,2346,2348,3,206,103,0,2347,2346,1,0,0,0,
  	2347,2348,1,0,0,0,2348,2349,1,0,0,0,2349,2351,3,146,73,0,2350,2352,3,
  	254,127,0,2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,2355,1,0,0,0,2353,
  	2355,5,124,0,0,2354,2341,1,0,0,0,2354,2347,1,0,0,0,2354,2353,1,0,0,0,
  	2355,373,1,0,0,0,2356,2358,5,64,0,0,2357,2359,3,82,41,0,2358,2357,1,0,
  	0,0,2358,2359,1,0,0,0,2359,375,1,0,0,0,2360,2363,3,378,189,0,2361,2363,
  	3,382,191,0,2362,2360,1,0,0,0,2362,2361,1,0,0,0,2363,377,1,0,0,0,2364,
  	2365,5,64,0,0,2365,2367,5,78,0,0,2366,2368,3,380,190,0,2367,2366,1,0,
  	0,0,2367,2368,1,0,0,0,2368,2369,1,0,0,0,2369,2370,5,79,0,0,2370,379,1,
  	0,0,0,2371,2372,6,190,-1,0,2372,2374,3,252,126,0,2373,2375,5,124,0,0,
  	2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,2384,1,0,0,0,2376,2377,10,1,
  	0,0,2377,2378,5,115,0,0,2378,2380,3,252,126,0,2379,2381,5,124,0,0,2380,
  	2379,1,0,0,0,2380,2381,1,0,0,0,2381,2383,1,0,0,0,2382,2376,1,0,0,0,2383,
  	2386,1,0,0,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,381,1,0,0,0,2386,
  	2384,1,0,0,0,2387,2388,5,43,0,0,2388,2389,5,78,0,0,2389,2390,3,88,44,
  	0,2390,2391,5,79,0,0,2391,2394,1,0,0,0,2392,2394,5,43,0,0,2393,2387,1,
  	0,0,0,2393,2392,1,0,0,0,2394,383,1,0,0,0,2395,2396,5,96,0,0,2396,2397,
  	5,96,0,0,2397,385,1,0,0,0,2398,2399,5,96,0,0,2399,2400,5,96,0,0,2400,
  	2401,5,94,0,0,2401,387,1,0,0,0,2402,2451,5,42,0,0,2403,2451,5,21,0,0,
  	2404,2405,5,42,0,0,2405,2406,5,80,0,0,2406,2451,5,81,0,0,2407,2408,5,
  	21,0,0,2408,2409,5,80,0,0,2409,2451,5,81,0,0,2410,2451,5,84,0,0,2411,
  	2451,5,85,0,0,2412,2451,5,86,0,0,2413,2451,5,87,0,0,2414,2451,5,88,0,
  	0,2415,2451,5,89,0,0,2416,2451,5,90,0,0,2417,2451,5,91,0,0,2418,2451,
  	5,92,0,0,2419,2451,5,93,0,0,2420,2451,5,94,0,0,2421,2451,5,95,0,0,2422,
  	2451,5,96,0,0,2423,2451,5,97,0,0,2424,2451,5,98,0,0,2425,2451,5,99,0,
  	0,2426,2451,5,100,0,0,2427,2451,5,101,0,0,2428,2451,5,102,0,0,2429,2451,
  	5,103,0,0,2430,2451,5,104,0,0,2431,2451,5,105,0,0,2432,2451,3,384,192,
  	0,2433,2451,3,386,193,0,2434,2451,5,106,0,0,2435,2451,5,107,0,0,2436,
  	2451,5,108,0,0,2437,2451,5,109,0,0,2438,2451,5,110,0,0,2439,2451,5,111,
  	0,0,2440,2451,5,112,0,0,2441,2451,5,113,0,0,2442,2451,5,114,0,0,2443,
  	2451,5,115,0,0,2444,2451,5,116,0,0,2445,2451,5,117,0,0,2446,2447,5,78,
  	0,0,2447,2451,5,79,0,0,2448,2449,5,80,0,0,2449,2451,5,81,0,0,2450,2402,
  	1,0,0,0,2450,2403,1,0,0,0,2450,2404,1,0,0,0,2450,2407,1,0,0,0,2450,2410,
  	1,0,0,0,2450,2411,1,0,0,0,2450,2412,1,0,0,0,2450,2413,1,0,0,0,2450,2414,
  	1,0,0,0,2450,2415,1,0,0,0,2450,2416,1,0,0,0,2450,2417,1,0,0,0,2450,2418,
  	1,0,0,0,2450,2419,1,0,0,0,2450,2420,1,0,0,0,2450,2421,1,0,0,0,2450,2422,
  	1,0,0,0,2450,2423,1,0,0,0,2450,2424,1,0,0,0,2450,2425,1,0,0,0,2450,2426,
  	1,0,0,0,2450,2427,1,0,0,0,2450,2428,1,0,0,0,2450,2429,1,0,0,0,2450,2430,
  	1,0,0,0,2450,2431,1,0,0,0,2450,2432,1,0,0,0,2450,2433,1,0,0,0,2450,2434,
  	1,0,0,0,2450,2435,1,0,0,0,2450,2436,1,0,0,0,2450,2437,1,0,0,0,2450,2438,
  	1,0,0,0,2450,2439,1,0,0,0,2450,2440,1,0,0,0,2450,2441,1,0,0,0,2450,2442,
  	1,0,0,0,2450,2443,1,0,0,0,2450,2444,1,0,0,0,2450,2445,1,0,0,0,2450,2446,
  	1,0,0,0,2450,2448,1,0,0,0,2451,389,1,0,0,0,2452,2460,5,126,0,0,2453,2460,
  	5,132,0,0,2454,2460,5,133,0,0,2455,2460,5,134,0,0,2456,2460,3,392,196,
  	0,2457,2460,3,394,197,0,2458,2460,3,396,198,0,2459,2452,1,0,0,0,2459,
  	2453,1,0,0,0,2459,2454,1,0,0,0,2459,2455,1,0,0,0,2459,2456,1,0,0,0,2459,
  	2457,1,0,0,0,2459,2458,1,0,0,0,2460,391,1,0,0,0,2461,2462,7,9,0,0,2462,
  	393,1,0,0,0,2463,2464,5,44,0,0,2464,395,1,0,0,0,2465,2466,7,10,0,0,2466,
  	397,1,0,0,0,315,399,411,415,426,430,445,452,457,459,464,470,480,487,493,
  	497,502,508,515,521,524,527,530,537,544,596,611,617,623,636,638,644,659,
  	665,695,700,704,708,711,715,721,723,731,735,738,745,752,756,761,765,768,
  	773,779,792,803,805,820,822,834,836,849,851,869,871,883,885,896,907,918,
  	929,940,950,958,971,981,988,992,996,1000,1004,1009,1012,1015,1021,1029,
  	1034,1037,1043,1054,1077,1081,1089,1095,1115,1119,1132,1136,1139,1146,
  	1154,1164,1175,1187,1197,1202,1209,1212,1217,1222,1243,1247,1252,1263,
  	1269,1273,1278,1282,1287,1290,1312,1318,1329,1333,1336,1346,1352,1355,
  	1362,1372,1376,1379,1382,1386,1391,1393,1397,1401,1410,1423,1431,1437,
  	1443,1447,1450,1459,1468,1476,1487,1493,1504,1507,1512,1527,1533,1542,
  	1552,1558,1566,1570,1574,1579,1584,1591,1593,1598,1602,1616,1622,1637,
  	1647,1652,1659,1665,1670,1676,1683,1687,1689,1691,1698,1701,1704,1707,
  	1712,1716,1719,1723,1727,1732,1735,1737,1741,1748,1754,1758,1764,1769,
  	1771,1777,1781,1787,1794,1798,1800,1802,1809,1819,1823,1825,1827,1831,
  	1834,1840,1850,1854,1860,1868,1872,1875,1879,1884,1887,1890,1894,1899,
  	1909,1916,1921,1925,1930,1936,1940,1946,1952,1956,1961,1967,1971,1974,
  	1978,1981,1983,1986,1996,2001,2003,2006,2009,2012,2021,2031,2036,2039,
  	2043,2046,2049,2053,2062,2077,2083,2087,2091,2095,2099,2103,2107,2111,
  	2114,2118,2129,2133,2140,2144,2149,2154,2161,2165,2175,2191,2196,2200,
  	2203,2207,2213,2216,2220,2230,2233,2241,2246,2251,2259,2266,2270,2277,
  	2283,2287,2293,2302,2306,2309,2325,2332,2341,2347,2351,2354,2358,2362,
  	2367,2374,2380,2384,2393,2450,2459
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cpp14ParserStaticData = staticData.release();
}

}

CPP14Parser::CPP14Parser(TokenStream *input) : CPP14Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CPP14Parser::CPP14Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CPP14Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cpp14ParserStaticData->atn, cpp14ParserStaticData->decisionToDFA, cpp14ParserStaticData->sharedContextCache, options);
}

CPP14Parser::~CPP14Parser() {
  delete _interpreter;
}

const atn::ATN& CPP14Parser::getATN() const {
  return *cpp14ParserStaticData->atn;
}

std::string CPP14Parser::getGrammarFileName() const {
  return "CPP14.g4";
}

const std::vector<std::string>& CPP14Parser::getRuleNames() const {
  return cpp14ParserStaticData->ruleNames;
}

const dfa::Vocabulary& CPP14Parser::getVocabulary() const {
  return cpp14ParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CPP14Parser::getSerializedATN() const {
  return cpp14ParserStaticData->serializedATN;
}


//----------------- TranslationunitContext ------------------------------------------------------------------

CPP14Parser::TranslationunitContext::TranslationunitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TranslationunitContext::EOF() {
  return getToken(CPP14Parser::EOF, 0);
}

CPP14Parser::DeclarationseqContext* CPP14Parser::TranslationunitContext::declarationseq() {
  return getRuleContext<CPP14Parser::DeclarationseqContext>(0);
}


size_t CPP14Parser::TranslationunitContext::getRuleIndex() const {
  return CPP14Parser::RuleTranslationunit;
}


CPP14Parser::TranslationunitContext* CPP14Parser::translationunit() {
  TranslationunitContext *_localctx = _tracker.createInstance<TranslationunitContext>(_ctx, getState());
  enterRule(_localctx, 0, CPP14Parser::RuleTranslationunit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6096708528351086360) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 459384754220313597) != 0)) {
      setState(398);
      declarationseq(0);
    }
    setState(401);
    match(CPP14Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryexpressionContext ------------------------------------------------------------------

CPP14Parser::PrimaryexpressionContext::PrimaryexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::LiteralContext* CPP14Parser::PrimaryexpressionContext::literal() {
  return getRuleContext<CPP14Parser::LiteralContext>(0);
}

tree::TerminalNode* CPP14Parser::PrimaryexpressionContext::This() {
  return getToken(CPP14Parser::This, 0);
}

tree::TerminalNode* CPP14Parser::PrimaryexpressionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::PrimaryexpressionContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::PrimaryexpressionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::IdexpressionContext* CPP14Parser::PrimaryexpressionContext::idexpression() {
  return getRuleContext<CPP14Parser::IdexpressionContext>(0);
}

CPP14Parser::LambdaexpressionContext* CPP14Parser::PrimaryexpressionContext::lambdaexpression() {
  return getRuleContext<CPP14Parser::LambdaexpressionContext>(0);
}


size_t CPP14Parser::PrimaryexpressionContext::getRuleIndex() const {
  return CPP14Parser::RulePrimaryexpression;
}


CPP14Parser::PrimaryexpressionContext* CPP14Parser::primaryexpression() {
  PrimaryexpressionContext *_localctx = _tracker.createInstance<PrimaryexpressionContext>(_ctx, getState());
  enterRule(_localctx, 2, CPP14Parser::RulePrimaryexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(411);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::False:
      case CPP14Parser::Nullptr:
      case CPP14Parser::True:
      case CPP14Parser::Integerliteral:
      case CPP14Parser::Characterliteral:
      case CPP14Parser::Floatingliteral:
      case CPP14Parser::Stringliteral:
      case CPP14Parser::Userdefinedintegerliteral:
      case CPP14Parser::Userdefinedfloatingliteral:
      case CPP14Parser::Userdefinedstringliteral:
      case CPP14Parser::Userdefinedcharacterliteral: {
        enterOuterAlt(_localctx, 1);
        setState(403);
        literal();
        break;
      }

      case CPP14Parser::This: {
        enterOuterAlt(_localctx, 2);
        setState(404);
        match(CPP14Parser::This);
        break;
      }

      case CPP14Parser::LeftParen: {
        enterOuterAlt(_localctx, 3);
        setState(405);
        match(CPP14Parser::LeftParen);
        setState(406);
        expression(0);
        setState(407);
        match(CPP14Parser::RightParen);
        break;
      }

      case CPP14Parser::Decltype:
      case CPP14Parser::Operator:
      case CPP14Parser::Tilde:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 4);
        setState(409);
        idexpression();
        break;
      }

      case CPP14Parser::LeftBracket: {
        enterOuterAlt(_localctx, 5);
        setState(410);
        lambdaexpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdexpressionContext ------------------------------------------------------------------

CPP14Parser::IdexpressionContext::IdexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::UnqualifiedidContext* CPP14Parser::IdexpressionContext::unqualifiedid() {
  return getRuleContext<CPP14Parser::UnqualifiedidContext>(0);
}

CPP14Parser::QualifiedidContext* CPP14Parser::IdexpressionContext::qualifiedid() {
  return getRuleContext<CPP14Parser::QualifiedidContext>(0);
}


size_t CPP14Parser::IdexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleIdexpression;
}


CPP14Parser::IdexpressionContext* CPP14Parser::idexpression() {
  IdexpressionContext *_localctx = _tracker.createInstance<IdexpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, CPP14Parser::RuleIdexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(415);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(413);
      unqualifiedid();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(414);
      qualifiedid();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnqualifiedidContext ------------------------------------------------------------------

CPP14Parser::UnqualifiedidContext::UnqualifiedidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::UnqualifiedidContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::OperatorfunctionidContext* CPP14Parser::UnqualifiedidContext::operatorfunctionid() {
  return getRuleContext<CPP14Parser::OperatorfunctionidContext>(0);
}

CPP14Parser::ConversionfunctionidContext* CPP14Parser::UnqualifiedidContext::conversionfunctionid() {
  return getRuleContext<CPP14Parser::ConversionfunctionidContext>(0);
}

CPP14Parser::LiteraloperatoridContext* CPP14Parser::UnqualifiedidContext::literaloperatorid() {
  return getRuleContext<CPP14Parser::LiteraloperatoridContext>(0);
}

tree::TerminalNode* CPP14Parser::UnqualifiedidContext::Tilde() {
  return getToken(CPP14Parser::Tilde, 0);
}

CPP14Parser::ClassnameContext* CPP14Parser::UnqualifiedidContext::classname() {
  return getRuleContext<CPP14Parser::ClassnameContext>(0);
}

CPP14Parser::DecltypespecifierContext* CPP14Parser::UnqualifiedidContext::decltypespecifier() {
  return getRuleContext<CPP14Parser::DecltypespecifierContext>(0);
}

CPP14Parser::TemplateidContext* CPP14Parser::UnqualifiedidContext::templateid() {
  return getRuleContext<CPP14Parser::TemplateidContext>(0);
}


size_t CPP14Parser::UnqualifiedidContext::getRuleIndex() const {
  return CPP14Parser::RuleUnqualifiedid;
}


CPP14Parser::UnqualifiedidContext* CPP14Parser::unqualifiedid() {
  UnqualifiedidContext *_localctx = _tracker.createInstance<UnqualifiedidContext>(_ctx, getState());
  enterRule(_localctx, 6, CPP14Parser::RuleUnqualifiedid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(426);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(417);
      match(CPP14Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(418);
      operatorfunctionid();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(419);
      conversionfunctionid();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(420);
      literaloperatorid();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(421);
      match(CPP14Parser::Tilde);
      setState(422);
      classname();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(423);
      match(CPP14Parser::Tilde);
      setState(424);
      decltypespecifier();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(425);
      templateid();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedidContext ------------------------------------------------------------------

CPP14Parser::QualifiedidContext::QualifiedidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::QualifiedidContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

CPP14Parser::UnqualifiedidContext* CPP14Parser::QualifiedidContext::unqualifiedid() {
  return getRuleContext<CPP14Parser::UnqualifiedidContext>(0);
}

tree::TerminalNode* CPP14Parser::QualifiedidContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}


size_t CPP14Parser::QualifiedidContext::getRuleIndex() const {
  return CPP14Parser::RuleQualifiedid;
}


CPP14Parser::QualifiedidContext* CPP14Parser::qualifiedid() {
  QualifiedidContext *_localctx = _tracker.createInstance<QualifiedidContext>(_ctx, getState());
  enterRule(_localctx, 8, CPP14Parser::RuleQualifiedid);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(428);
    nestednamespecifier(0);
    setState(430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Template) {
      setState(429);
      match(CPP14Parser::Template);
    }
    setState(432);
    unqualifiedid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestednamespecifierContext ------------------------------------------------------------------

CPP14Parser::NestednamespecifierContext::NestednamespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NestednamespecifierContext::Doublecolon() {
  return getToken(CPP14Parser::Doublecolon, 0);
}

CPP14Parser::TypenameContext* CPP14Parser::NestednamespecifierContext::typename_() {
  return getRuleContext<CPP14Parser::TypenameContext>(0);
}

CPP14Parser::NamespacenameContext* CPP14Parser::NestednamespecifierContext::namespacename() {
  return getRuleContext<CPP14Parser::NamespacenameContext>(0);
}

CPP14Parser::DecltypespecifierContext* CPP14Parser::NestednamespecifierContext::decltypespecifier() {
  return getRuleContext<CPP14Parser::DecltypespecifierContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::NestednamespecifierContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::NestednamespecifierContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::NestednamespecifierContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}

tree::TerminalNode* CPP14Parser::NestednamespecifierContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}


size_t CPP14Parser::NestednamespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleNestednamespecifier;
}



CPP14Parser::NestednamespecifierContext* CPP14Parser::nestednamespecifier() {
   return nestednamespecifier(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::nestednamespecifier(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::NestednamespecifierContext *_localctx = _tracker.createInstance<NestednamespecifierContext>(_ctx, parentState);
  CPP14Parser::NestednamespecifierContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 10;
  enterRecursionRule(_localctx, 10, CPP14Parser::RuleNestednamespecifier, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(445);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(435);
      match(CPP14Parser::Doublecolon);
      break;
    }

    case 2: {
      setState(436);
      typename_();
      setState(437);
      match(CPP14Parser::Doublecolon);
      break;
    }

    case 3: {
      setState(439);
      namespacename();
      setState(440);
      match(CPP14Parser::Doublecolon);
      break;
    }

    case 4: {
      setState(442);
      decltypespecifier();
      setState(443);
      match(CPP14Parser::Doublecolon);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(459);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(457);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NestednamespecifierContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNestednamespecifier);
          setState(447);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(448);
          match(CPP14Parser::Identifier);
          setState(449);
          match(CPP14Parser::Doublecolon);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NestednamespecifierContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNestednamespecifier);
          setState(450);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(452);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CPP14Parser::Template) {
            setState(451);
            match(CPP14Parser::Template);
          }
          setState(454);
          simpletemplateid();
          setState(455);
          match(CPP14Parser::Doublecolon);
          break;
        }

        default:
          break;
        } 
      }
      setState(461);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LambdaexpressionContext ------------------------------------------------------------------

CPP14Parser::LambdaexpressionContext::LambdaexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::LambdaintroducerContext* CPP14Parser::LambdaexpressionContext::lambdaintroducer() {
  return getRuleContext<CPP14Parser::LambdaintroducerContext>(0);
}

CPP14Parser::CompoundstatementContext* CPP14Parser::LambdaexpressionContext::compoundstatement() {
  return getRuleContext<CPP14Parser::CompoundstatementContext>(0);
}

CPP14Parser::LambdadeclaratorContext* CPP14Parser::LambdaexpressionContext::lambdadeclarator() {
  return getRuleContext<CPP14Parser::LambdadeclaratorContext>(0);
}


size_t CPP14Parser::LambdaexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleLambdaexpression;
}


CPP14Parser::LambdaexpressionContext* CPP14Parser::lambdaexpression() {
  LambdaexpressionContext *_localctx = _tracker.createInstance<LambdaexpressionContext>(_ctx, getState());
  enterRule(_localctx, 12, CPP14Parser::RuleLambdaexpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    lambdaintroducer();
    setState(464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::LeftParen) {
      setState(463);
      lambdadeclarator();
    }
    setState(466);
    compoundstatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaintroducerContext ------------------------------------------------------------------

CPP14Parser::LambdaintroducerContext::LambdaintroducerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::LambdaintroducerContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::LambdaintroducerContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

CPP14Parser::LambdacaptureContext* CPP14Parser::LambdaintroducerContext::lambdacapture() {
  return getRuleContext<CPP14Parser::LambdacaptureContext>(0);
}


size_t CPP14Parser::LambdaintroducerContext::getRuleIndex() const {
  return CPP14Parser::RuleLambdaintroducer;
}


CPP14Parser::LambdaintroducerContext* CPP14Parser::lambdaintroducer() {
  LambdaintroducerContext *_localctx = _tracker.createInstance<LambdaintroducerContext>(_ctx, getState());
  enterRule(_localctx, 14, CPP14Parser::RuleLambdaintroducer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(468);
    match(CPP14Parser::LeftBracket);
    setState(470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 62) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 62)) & -9223372032291373055) != 0)) {
      setState(469);
      lambdacapture();
    }
    setState(472);
    match(CPP14Parser::RightBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdacaptureContext ------------------------------------------------------------------

CPP14Parser::LambdacaptureContext::LambdacaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::CapturedefaultContext* CPP14Parser::LambdacaptureContext::capturedefault() {
  return getRuleContext<CPP14Parser::CapturedefaultContext>(0);
}

CPP14Parser::CapturelistContext* CPP14Parser::LambdacaptureContext::capturelist() {
  return getRuleContext<CPP14Parser::CapturelistContext>(0);
}

tree::TerminalNode* CPP14Parser::LambdacaptureContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::LambdacaptureContext::getRuleIndex() const {
  return CPP14Parser::RuleLambdacapture;
}


CPP14Parser::LambdacaptureContext* CPP14Parser::lambdacapture() {
  LambdacaptureContext *_localctx = _tracker.createInstance<LambdacaptureContext>(_ctx, getState());
  enterRule(_localctx, 16, CPP14Parser::RuleLambdacapture);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(480);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(474);
      capturedefault();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(475);
      capturelist(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(476);
      capturedefault();
      setState(477);
      match(CPP14Parser::Comma);
      setState(478);
      capturelist(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CapturedefaultContext ------------------------------------------------------------------

CPP14Parser::CapturedefaultContext::CapturedefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::CapturedefaultContext::And() {
  return getToken(CPP14Parser::And, 0);
}

tree::TerminalNode* CPP14Parser::CapturedefaultContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}


size_t CPP14Parser::CapturedefaultContext::getRuleIndex() const {
  return CPP14Parser::RuleCapturedefault;
}


CPP14Parser::CapturedefaultContext* CPP14Parser::capturedefault() {
  CapturedefaultContext *_localctx = _tracker.createInstance<CapturedefaultContext>(_ctx, getState());
  enterRule(_localctx, 18, CPP14Parser::RuleCapturedefault);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    _la = _input->LA(1);
    if (!(_la == CPP14Parser::And

    || _la == CPP14Parser::Assign)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CapturelistContext ------------------------------------------------------------------

CPP14Parser::CapturelistContext::CapturelistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::CaptureContext* CPP14Parser::CapturelistContext::capture() {
  return getRuleContext<CPP14Parser::CaptureContext>(0);
}

tree::TerminalNode* CPP14Parser::CapturelistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::CapturelistContext* CPP14Parser::CapturelistContext::capturelist() {
  return getRuleContext<CPP14Parser::CapturelistContext>(0);
}

tree::TerminalNode* CPP14Parser::CapturelistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::CapturelistContext::getRuleIndex() const {
  return CPP14Parser::RuleCapturelist;
}



CPP14Parser::CapturelistContext* CPP14Parser::capturelist() {
   return capturelist(0);
}

CPP14Parser::CapturelistContext* CPP14Parser::capturelist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::CapturelistContext *_localctx = _tracker.createInstance<CapturelistContext>(_ctx, parentState);
  CPP14Parser::CapturelistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 20;
  enterRecursionRule(_localctx, 20, CPP14Parser::RuleCapturelist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(485);
    capture();
    setState(487);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(486);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(497);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CapturelistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCapturelist);
        setState(489);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(490);
        match(CPP14Parser::Comma);
        setState(491);
        capture();
        setState(493);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
        case 1: {
          setState(492);
          match(CPP14Parser::Ellipsis);
          break;
        }

        default:
          break;
        } 
      }
      setState(499);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CaptureContext ------------------------------------------------------------------

CPP14Parser::CaptureContext::CaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::SimplecaptureContext* CPP14Parser::CaptureContext::simplecapture() {
  return getRuleContext<CPP14Parser::SimplecaptureContext>(0);
}

CPP14Parser::InitcaptureContext* CPP14Parser::CaptureContext::initcapture() {
  return getRuleContext<CPP14Parser::InitcaptureContext>(0);
}


size_t CPP14Parser::CaptureContext::getRuleIndex() const {
  return CPP14Parser::RuleCapture;
}


CPP14Parser::CaptureContext* CPP14Parser::capture() {
  CaptureContext *_localctx = _tracker.createInstance<CaptureContext>(_ctx, getState());
  enterRule(_localctx, 22, CPP14Parser::RuleCapture);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(500);
      simplecapture();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(501);
      initcapture();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplecaptureContext ------------------------------------------------------------------

CPP14Parser::SimplecaptureContext::SimplecaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::SimplecaptureContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::SimplecaptureContext::And() {
  return getToken(CPP14Parser::And, 0);
}

tree::TerminalNode* CPP14Parser::SimplecaptureContext::This() {
  return getToken(CPP14Parser::This, 0);
}


size_t CPP14Parser::SimplecaptureContext::getRuleIndex() const {
  return CPP14Parser::RuleSimplecapture;
}


CPP14Parser::SimplecaptureContext* CPP14Parser::simplecapture() {
  SimplecaptureContext *_localctx = _tracker.createInstance<SimplecaptureContext>(_ctx, getState());
  enterRule(_localctx, 24, CPP14Parser::RuleSimplecapture);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(508);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(504);
        match(CPP14Parser::Identifier);
        break;
      }

      case CPP14Parser::And: {
        enterOuterAlt(_localctx, 2);
        setState(505);
        match(CPP14Parser::And);
        setState(506);
        match(CPP14Parser::Identifier);
        break;
      }

      case CPP14Parser::This: {
        enterOuterAlt(_localctx, 3);
        setState(507);
        match(CPP14Parser::This);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitcaptureContext ------------------------------------------------------------------

CPP14Parser::InitcaptureContext::InitcaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::InitcaptureContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::InitializerContext* CPP14Parser::InitcaptureContext::initializer() {
  return getRuleContext<CPP14Parser::InitializerContext>(0);
}

tree::TerminalNode* CPP14Parser::InitcaptureContext::And() {
  return getToken(CPP14Parser::And, 0);
}


size_t CPP14Parser::InitcaptureContext::getRuleIndex() const {
  return CPP14Parser::RuleInitcapture;
}


CPP14Parser::InitcaptureContext* CPP14Parser::initcapture() {
  InitcaptureContext *_localctx = _tracker.createInstance<InitcaptureContext>(_ctx, getState());
  enterRule(_localctx, 26, CPP14Parser::RuleInitcapture);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(510);
        match(CPP14Parser::Identifier);
        setState(511);
        initializer();
        break;
      }

      case CPP14Parser::And: {
        enterOuterAlt(_localctx, 2);
        setState(512);
        match(CPP14Parser::And);
        setState(513);
        match(CPP14Parser::Identifier);
        setState(514);
        initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdadeclaratorContext ------------------------------------------------------------------

CPP14Parser::LambdadeclaratorContext::LambdadeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::LambdadeclaratorContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ParameterdeclarationclauseContext* CPP14Parser::LambdadeclaratorContext::parameterdeclarationclause() {
  return getRuleContext<CPP14Parser::ParameterdeclarationclauseContext>(0);
}

tree::TerminalNode* CPP14Parser::LambdadeclaratorContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::LambdadeclaratorContext::Mutable() {
  return getToken(CPP14Parser::Mutable, 0);
}

CPP14Parser::ExceptionspecificationContext* CPP14Parser::LambdadeclaratorContext::exceptionspecification() {
  return getRuleContext<CPP14Parser::ExceptionspecificationContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::LambdadeclaratorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::TrailingreturntypeContext* CPP14Parser::LambdadeclaratorContext::trailingreturntype() {
  return getRuleContext<CPP14Parser::TrailingreturntypeContext>(0);
}


size_t CPP14Parser::LambdadeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleLambdadeclarator;
}


CPP14Parser::LambdadeclaratorContext* CPP14Parser::lambdadeclarator() {
  LambdadeclaratorContext *_localctx = _tracker.createInstance<LambdadeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 28, CPP14Parser::RuleLambdadeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(CPP14Parser::LeftParen);
    setState(518);
    parameterdeclarationclause();
    setState(519);
    match(CPP14Parser::RightParen);
    setState(521);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Mutable) {
      setState(520);
      match(CPP14Parser::Mutable);
    }
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Noexcept

    || _la == CPP14Parser::Throw) {
      setState(523);
      exceptionspecification();
    }
    setState(527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
      setState(526);
      attributespecifierseq(0);
    }
    setState(530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Arrow) {
      setState(529);
      trailingreturntype();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixexpressionContext ------------------------------------------------------------------

CPP14Parser::PostfixexpressionContext::PostfixexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PrimaryexpressionContext* CPP14Parser::PostfixexpressionContext::primaryexpression() {
  return getRuleContext<CPP14Parser::PrimaryexpressionContext>(0);
}

CPP14Parser::SimpletypespecifierContext* CPP14Parser::PostfixexpressionContext::simpletypespecifier() {
  return getRuleContext<CPP14Parser::SimpletypespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::ExpressionlistContext* CPP14Parser::PostfixexpressionContext::expressionlist() {
  return getRuleContext<CPP14Parser::ExpressionlistContext>(0);
}

CPP14Parser::TypenamespecifierContext* CPP14Parser::PostfixexpressionContext::typenamespecifier() {
  return getRuleContext<CPP14Parser::TypenamespecifierContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::PostfixexpressionContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Dynamic_cast() {
  return getToken(CPP14Parser::Dynamic_cast, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::PostfixexpressionContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::PostfixexpressionContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Static_cast() {
  return getToken(CPP14Parser::Static_cast, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Reinterpret_cast() {
  return getToken(CPP14Parser::Reinterpret_cast, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Const_cast() {
  return getToken(CPP14Parser::Const_cast, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Typeid() {
  return getToken(CPP14Parser::Typeid, 0);
}

CPP14Parser::PostfixexpressionContext* CPP14Parser::PostfixexpressionContext::postfixexpression() {
  return getRuleContext<CPP14Parser::PostfixexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Dot() {
  return getToken(CPP14Parser::Dot, 0);
}

CPP14Parser::IdexpressionContext* CPP14Parser::PostfixexpressionContext::idexpression() {
  return getRuleContext<CPP14Parser::IdexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::Arrow() {
  return getToken(CPP14Parser::Arrow, 0);
}

CPP14Parser::PseudodestructornameContext* CPP14Parser::PostfixexpressionContext::pseudodestructorname() {
  return getRuleContext<CPP14Parser::PseudodestructornameContext>(0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::PlusPlus() {
  return getToken(CPP14Parser::PlusPlus, 0);
}

tree::TerminalNode* CPP14Parser::PostfixexpressionContext::MinusMinus() {
  return getToken(CPP14Parser::MinusMinus, 0);
}


size_t CPP14Parser::PostfixexpressionContext::getRuleIndex() const {
  return CPP14Parser::RulePostfixexpression;
}



CPP14Parser::PostfixexpressionContext* CPP14Parser::postfixexpression() {
   return postfixexpression(0);
}

CPP14Parser::PostfixexpressionContext* CPP14Parser::postfixexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::PostfixexpressionContext *_localctx = _tracker.createInstance<PostfixexpressionContext>(_ctx, parentState);
  CPP14Parser::PostfixexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 30;
  enterRecursionRule(_localctx, 30, CPP14Parser::RulePostfixexpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(596);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(533);
      primaryexpression();
      break;
    }

    case 2: {
      setState(534);
      simpletypespecifier();
      setState(535);
      match(CPP14Parser::LeftParen);
      setState(537);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6991275472553596083) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(536);
        expressionlist();
      }
      setState(539);
      match(CPP14Parser::RightParen);
      break;
    }

    case 3: {
      setState(541);
      typenamespecifier();
      setState(542);
      match(CPP14Parser::LeftParen);
      setState(544);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6991275472553596083) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(543);
        expressionlist();
      }
      setState(546);
      match(CPP14Parser::RightParen);
      break;
    }

    case 4: {
      setState(548);
      simpletypespecifier();
      setState(549);
      bracedinitlist();
      break;
    }

    case 5: {
      setState(551);
      typenamespecifier();
      setState(552);
      bracedinitlist();
      break;
    }

    case 6: {
      setState(554);
      match(CPP14Parser::Dynamic_cast);
      setState(555);
      match(CPP14Parser::Less);
      setState(556);
      typeid_();
      setState(557);
      match(CPP14Parser::Greater);
      setState(558);
      match(CPP14Parser::LeftParen);
      setState(559);
      expression(0);
      setState(560);
      match(CPP14Parser::RightParen);
      break;
    }

    case 7: {
      setState(562);
      match(CPP14Parser::Static_cast);
      setState(563);
      match(CPP14Parser::Less);
      setState(564);
      typeid_();
      setState(565);
      match(CPP14Parser::Greater);
      setState(566);
      match(CPP14Parser::LeftParen);
      setState(567);
      expression(0);
      setState(568);
      match(CPP14Parser::RightParen);
      break;
    }

    case 8: {
      setState(570);
      match(CPP14Parser::Reinterpret_cast);
      setState(571);
      match(CPP14Parser::Less);
      setState(572);
      typeid_();
      setState(573);
      match(CPP14Parser::Greater);
      setState(574);
      match(CPP14Parser::LeftParen);
      setState(575);
      expression(0);
      setState(576);
      match(CPP14Parser::RightParen);
      break;
    }

    case 9: {
      setState(578);
      match(CPP14Parser::Const_cast);
      setState(579);
      match(CPP14Parser::Less);
      setState(580);
      typeid_();
      setState(581);
      match(CPP14Parser::Greater);
      setState(582);
      match(CPP14Parser::LeftParen);
      setState(583);
      expression(0);
      setState(584);
      match(CPP14Parser::RightParen);
      break;
    }

    case 10: {
      setState(586);
      match(CPP14Parser::Typeid);
      setState(587);
      match(CPP14Parser::LeftParen);
      setState(588);
      expression(0);
      setState(589);
      match(CPP14Parser::RightParen);
      break;
    }

    case 11: {
      setState(591);
      match(CPP14Parser::Typeid);
      setState(592);
      match(CPP14Parser::LeftParen);
      setState(593);
      typeid_();
      setState(594);
      match(CPP14Parser::RightParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(638);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(636);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(598);

          if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
          setState(599);
          match(CPP14Parser::LeftBracket);
          setState(600);
          expression(0);
          setState(601);
          match(CPP14Parser::RightBracket);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(603);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(604);
          match(CPP14Parser::LeftBracket);
          setState(605);
          bracedinitlist();
          setState(606);
          match(CPP14Parser::RightBracket);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(608);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(609);
          match(CPP14Parser::LeftParen);
          setState(611);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 6991275472553596083) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 132)) & 127) != 0)) {
            setState(610);
            expressionlist();
          }
          setState(613);
          match(CPP14Parser::RightParen);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(614);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(615);
          match(CPP14Parser::Dot);
          setState(617);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CPP14Parser::Template) {
            setState(616);
            match(CPP14Parser::Template);
          }
          setState(619);
          idexpression();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(620);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(621);
          match(CPP14Parser::Arrow);
          setState(623);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CPP14Parser::Template) {
            setState(622);
            match(CPP14Parser::Template);
          }
          setState(625);
          idexpression();
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(626);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(627);
          match(CPP14Parser::Dot);
          setState(628);
          pseudodestructorname();
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(629);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(630);
          match(CPP14Parser::Arrow);
          setState(631);
          pseudodestructorname();
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(632);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(633);
          match(CPP14Parser::PlusPlus);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<PostfixexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixexpression);
          setState(634);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(635);
          match(CPP14Parser::MinusMinus);
          break;
        }

        default:
          break;
        } 
      }
      setState(640);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionlistContext ------------------------------------------------------------------

CPP14Parser::ExpressionlistContext::ExpressionlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::InitializerlistContext* CPP14Parser::ExpressionlistContext::initializerlist() {
  return getRuleContext<CPP14Parser::InitializerlistContext>(0);
}


size_t CPP14Parser::ExpressionlistContext::getRuleIndex() const {
  return CPP14Parser::RuleExpressionlist;
}


CPP14Parser::ExpressionlistContext* CPP14Parser::expressionlist() {
  ExpressionlistContext *_localctx = _tracker.createInstance<ExpressionlistContext>(_ctx, getState());
  enterRule(_localctx, 32, CPP14Parser::RuleExpressionlist);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    initializerlist(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudodestructornameContext ------------------------------------------------------------------

CPP14Parser::PseudodestructornameContext::PseudodestructornameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CPP14Parser::TypenameContext *> CPP14Parser::PseudodestructornameContext::typename_() {
  return getRuleContexts<CPP14Parser::TypenameContext>();
}

CPP14Parser::TypenameContext* CPP14Parser::PseudodestructornameContext::typename_(size_t i) {
  return getRuleContext<CPP14Parser::TypenameContext>(i);
}

tree::TerminalNode* CPP14Parser::PseudodestructornameContext::Doublecolon() {
  return getToken(CPP14Parser::Doublecolon, 0);
}

tree::TerminalNode* CPP14Parser::PseudodestructornameContext::Tilde() {
  return getToken(CPP14Parser::Tilde, 0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::PseudodestructornameContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::PseudodestructornameContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::PseudodestructornameContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}

CPP14Parser::DecltypespecifierContext* CPP14Parser::PseudodestructornameContext::decltypespecifier() {
  return getRuleContext<CPP14Parser::DecltypespecifierContext>(0);
}


size_t CPP14Parser::PseudodestructornameContext::getRuleIndex() const {
  return CPP14Parser::RulePseudodestructorname;
}


CPP14Parser::PseudodestructornameContext* CPP14Parser::pseudodestructorname() {
  PseudodestructornameContext *_localctx = _tracker.createInstance<PseudodestructornameContext>(_ctx, getState());
  enterRule(_localctx, 34, CPP14Parser::RulePseudodestructorname);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(665);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(644);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
      case 1: {
        setState(643);
        nestednamespecifier(0);
        break;
      }

      default:
        break;
      }
      setState(646);
      typename_();
      setState(647);
      match(CPP14Parser::Doublecolon);
      setState(648);
      match(CPP14Parser::Tilde);
      setState(649);
      typename_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(651);
      nestednamespecifier(0);
      setState(652);
      match(CPP14Parser::Template);
      setState(653);
      simpletemplateid();
      setState(654);
      match(CPP14Parser::Doublecolon);
      setState(655);
      match(CPP14Parser::Tilde);
      setState(656);
      typename_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(659);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Decltype || _la == CPP14Parser::Doublecolon

      || _la == CPP14Parser::Identifier) {
        setState(658);
        nestednamespecifier(0);
      }
      setState(661);
      match(CPP14Parser::Tilde);
      setState(662);
      typename_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(663);
      match(CPP14Parser::Tilde);
      setState(664);
      decltypespecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryexpressionContext ------------------------------------------------------------------

CPP14Parser::UnaryexpressionContext::UnaryexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PostfixexpressionContext* CPP14Parser::UnaryexpressionContext::postfixexpression() {
  return getRuleContext<CPP14Parser::PostfixexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::PlusPlus() {
  return getToken(CPP14Parser::PlusPlus, 0);
}

CPP14Parser::CastexpressionContext* CPP14Parser::UnaryexpressionContext::castexpression() {
  return getRuleContext<CPP14Parser::CastexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::MinusMinus() {
  return getToken(CPP14Parser::MinusMinus, 0);
}

CPP14Parser::UnaryoperatorContext* CPP14Parser::UnaryexpressionContext::unaryoperator() {
  return getRuleContext<CPP14Parser::UnaryoperatorContext>(0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::Sizeof() {
  return getToken(CPP14Parser::Sizeof, 0);
}

CPP14Parser::UnaryexpressionContext* CPP14Parser::UnaryexpressionContext::unaryexpression() {
  return getRuleContext<CPP14Parser::UnaryexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::UnaryexpressionContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::UnaryexpressionContext::Alignof() {
  return getToken(CPP14Parser::Alignof, 0);
}

CPP14Parser::NoexceptexpressionContext* CPP14Parser::UnaryexpressionContext::noexceptexpression() {
  return getRuleContext<CPP14Parser::NoexceptexpressionContext>(0);
}

CPP14Parser::NewexpressionContext* CPP14Parser::UnaryexpressionContext::newexpression() {
  return getRuleContext<CPP14Parser::NewexpressionContext>(0);
}

CPP14Parser::DeleteexpressionContext* CPP14Parser::UnaryexpressionContext::deleteexpression() {
  return getRuleContext<CPP14Parser::DeleteexpressionContext>(0);
}


size_t CPP14Parser::UnaryexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleUnaryexpression;
}


CPP14Parser::UnaryexpressionContext* CPP14Parser::unaryexpression() {
  UnaryexpressionContext *_localctx = _tracker.createInstance<UnaryexpressionContext>(_ctx, getState());
  enterRule(_localctx, 36, CPP14Parser::RuleUnaryexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(695);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(667);
      postfixexpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(668);
      match(CPP14Parser::PlusPlus);
      setState(669);
      castexpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(670);
      match(CPP14Parser::MinusMinus);
      setState(671);
      castexpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(672);
      unaryoperator();
      setState(673);
      castexpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(675);
      match(CPP14Parser::Sizeof);
      setState(676);
      unaryexpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(677);
      match(CPP14Parser::Sizeof);
      setState(678);
      match(CPP14Parser::LeftParen);
      setState(679);
      typeid_();
      setState(680);
      match(CPP14Parser::RightParen);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(682);
      match(CPP14Parser::Sizeof);
      setState(683);
      match(CPP14Parser::Ellipsis);
      setState(684);
      match(CPP14Parser::LeftParen);
      setState(685);
      match(CPP14Parser::Identifier);
      setState(686);
      match(CPP14Parser::RightParen);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(687);
      match(CPP14Parser::Alignof);
      setState(688);
      match(CPP14Parser::LeftParen);
      setState(689);
      typeid_();
      setState(690);
      match(CPP14Parser::RightParen);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(692);
      noexceptexpression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(693);
      newexpression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(694);
      deleteexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryoperatorContext ------------------------------------------------------------------

CPP14Parser::UnaryoperatorContext::UnaryoperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::Or() {
  return getToken(CPP14Parser::Or, 0);
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::Star() {
  return getToken(CPP14Parser::Star, 0);
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::And() {
  return getToken(CPP14Parser::And, 0);
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::Plus() {
  return getToken(CPP14Parser::Plus, 0);
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::Not() {
  return getToken(CPP14Parser::Not, 0);
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::Tilde() {
  return getToken(CPP14Parser::Tilde, 0);
}

tree::TerminalNode* CPP14Parser::UnaryoperatorContext::Minus() {
  return getToken(CPP14Parser::Minus, 0);
}


size_t CPP14Parser::UnaryoperatorContext::getRuleIndex() const {
  return CPP14Parser::RuleUnaryoperator;
}


CPP14Parser::UnaryoperatorContext* CPP14Parser::unaryoperator() {
  UnaryoperatorContext *_localctx = _tracker.createInstance<UnaryoperatorContext>(_ctx, getState());
  enterRule(_localctx, 38, CPP14Parser::RuleUnaryoperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(697);
    _la = _input->LA(1);
    if (!(((((_la - 84) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 84)) & 967) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewexpressionContext ------------------------------------------------------------------

CPP14Parser::NewexpressionContext::NewexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NewexpressionContext::New() {
  return getToken(CPP14Parser::New, 0);
}

CPP14Parser::NewtypeidContext* CPP14Parser::NewexpressionContext::newtypeid() {
  return getRuleContext<CPP14Parser::NewtypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::NewexpressionContext::Doublecolon() {
  return getToken(CPP14Parser::Doublecolon, 0);
}

CPP14Parser::NewplacementContext* CPP14Parser::NewexpressionContext::newplacement() {
  return getRuleContext<CPP14Parser::NewplacementContext>(0);
}

CPP14Parser::NewinitializerContext* CPP14Parser::NewexpressionContext::newinitializer() {
  return getRuleContext<CPP14Parser::NewinitializerContext>(0);
}

tree::TerminalNode* CPP14Parser::NewexpressionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::NewexpressionContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::NewexpressionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::NewexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleNewexpression;
}


CPP14Parser::NewexpressionContext* CPP14Parser::newexpression() {
  NewexpressionContext *_localctx = _tracker.createInstance<NewexpressionContext>(_ctx, getState());
  enterRule(_localctx, 40, CPP14Parser::RuleNewexpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(723);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(700);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Doublecolon) {
        setState(699);
        match(CPP14Parser::Doublecolon);
      }
      setState(702);
      match(CPP14Parser::New);
      setState(704);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::LeftParen) {
        setState(703);
        newplacement();
      }
      setState(706);
      newtypeid();
      setState(708);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
      case 1: {
        setState(707);
        newinitializer();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(711);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Doublecolon) {
        setState(710);
        match(CPP14Parser::Doublecolon);
      }
      setState(713);
      match(CPP14Parser::New);
      setState(715);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
      case 1: {
        setState(714);
        newplacement();
        break;
      }

      default:
        break;
      }
      setState(717);
      match(CPP14Parser::LeftParen);
      setState(718);
      typeid_();
      setState(719);
      match(CPP14Parser::RightParen);
      setState(721);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
      case 1: {
        setState(720);
        newinitializer();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewplacementContext ------------------------------------------------------------------

CPP14Parser::NewplacementContext::NewplacementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NewplacementContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ExpressionlistContext* CPP14Parser::NewplacementContext::expressionlist() {
  return getRuleContext<CPP14Parser::ExpressionlistContext>(0);
}

tree::TerminalNode* CPP14Parser::NewplacementContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::NewplacementContext::getRuleIndex() const {
  return CPP14Parser::RuleNewplacement;
}


CPP14Parser::NewplacementContext* CPP14Parser::newplacement() {
  NewplacementContext *_localctx = _tracker.createInstance<NewplacementContext>(_ctx, getState());
  enterRule(_localctx, 42, CPP14Parser::RuleNewplacement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(725);
    match(CPP14Parser::LeftParen);
    setState(726);
    expressionlist();
    setState(727);
    match(CPP14Parser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewtypeidContext ------------------------------------------------------------------

CPP14Parser::NewtypeidContext::NewtypeidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypespecifierseqContext* CPP14Parser::NewtypeidContext::typespecifierseq() {
  return getRuleContext<CPP14Parser::TypespecifierseqContext>(0);
}

CPP14Parser::NewdeclaratorContext* CPP14Parser::NewtypeidContext::newdeclarator() {
  return getRuleContext<CPP14Parser::NewdeclaratorContext>(0);
}


size_t CPP14Parser::NewtypeidContext::getRuleIndex() const {
  return CPP14Parser::RuleNewtypeid;
}


CPP14Parser::NewtypeidContext* CPP14Parser::newtypeid() {
  NewtypeidContext *_localctx = _tracker.createInstance<NewtypeidContext>(_ctx, getState());
  enterRule(_localctx, 44, CPP14Parser::RuleNewtypeid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(729);
    typespecifierseq();
    setState(731);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(730);
      newdeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewdeclaratorContext ------------------------------------------------------------------

CPP14Parser::NewdeclaratorContext::NewdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PtroperatorContext* CPP14Parser::NewdeclaratorContext::ptroperator() {
  return getRuleContext<CPP14Parser::PtroperatorContext>(0);
}

CPP14Parser::NewdeclaratorContext* CPP14Parser::NewdeclaratorContext::newdeclarator() {
  return getRuleContext<CPP14Parser::NewdeclaratorContext>(0);
}

CPP14Parser::NoptrnewdeclaratorContext* CPP14Parser::NewdeclaratorContext::noptrnewdeclarator() {
  return getRuleContext<CPP14Parser::NoptrnewdeclaratorContext>(0);
}


size_t CPP14Parser::NewdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleNewdeclarator;
}


CPP14Parser::NewdeclaratorContext* CPP14Parser::newdeclarator() {
  NewdeclaratorContext *_localctx = _tracker.createInstance<NewdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 46, CPP14Parser::RuleNewdeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(738);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Decltype:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::AndAnd:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(733);
        ptroperator();
        setState(735);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
        case 1: {
          setState(734);
          newdeclarator();
          break;
        }

        default:
          break;
        }
        break;
      }

      case CPP14Parser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(737);
        noptrnewdeclarator(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoptrnewdeclaratorContext ------------------------------------------------------------------

CPP14Parser::NoptrnewdeclaratorContext::NoptrnewdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NoptrnewdeclaratorContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::NoptrnewdeclaratorContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrnewdeclaratorContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::NoptrnewdeclaratorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::NoptrnewdeclaratorContext* CPP14Parser::NoptrnewdeclaratorContext::noptrnewdeclarator() {
  return getRuleContext<CPP14Parser::NoptrnewdeclaratorContext>(0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::NoptrnewdeclaratorContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}


size_t CPP14Parser::NoptrnewdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleNoptrnewdeclarator;
}



CPP14Parser::NoptrnewdeclaratorContext* CPP14Parser::noptrnewdeclarator() {
   return noptrnewdeclarator(0);
}

CPP14Parser::NoptrnewdeclaratorContext* CPP14Parser::noptrnewdeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::NoptrnewdeclaratorContext *_localctx = _tracker.createInstance<NoptrnewdeclaratorContext>(_ctx, parentState);
  CPP14Parser::NoptrnewdeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 48;
  enterRecursionRule(_localctx, 48, CPP14Parser::RuleNoptrnewdeclarator, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(741);
    match(CPP14Parser::LeftBracket);
    setState(742);
    expression(0);
    setState(743);
    match(CPP14Parser::RightBracket);
    setState(745);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(744);
      attributespecifierseq(0);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(756);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NoptrnewdeclaratorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNoptrnewdeclarator);
        setState(747);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(748);
        match(CPP14Parser::LeftBracket);
        setState(749);
        constantexpression();
        setState(750);
        match(CPP14Parser::RightBracket);
        setState(752);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
        case 1: {
          setState(751);
          attributespecifierseq(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(758);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- NewinitializerContext ------------------------------------------------------------------

CPP14Parser::NewinitializerContext::NewinitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NewinitializerContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

tree::TerminalNode* CPP14Parser::NewinitializerContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::ExpressionlistContext* CPP14Parser::NewinitializerContext::expressionlist() {
  return getRuleContext<CPP14Parser::ExpressionlistContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::NewinitializerContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}


size_t CPP14Parser::NewinitializerContext::getRuleIndex() const {
  return CPP14Parser::RuleNewinitializer;
}


CPP14Parser::NewinitializerContext* CPP14Parser::newinitializer() {
  NewinitializerContext *_localctx = _tracker.createInstance<NewinitializerContext>(_ctx, getState());
  enterRule(_localctx, 50, CPP14Parser::RuleNewinitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(765);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::LeftParen: {
        enterOuterAlt(_localctx, 1);
        setState(759);
        match(CPP14Parser::LeftParen);
        setState(761);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 6991275472553596083) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 127) != 0)) {
          setState(760);
          expressionlist();
        }
        setState(763);
        match(CPP14Parser::RightParen);
        break;
      }

      case CPP14Parser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(764);
        bracedinitlist();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteexpressionContext ------------------------------------------------------------------

CPP14Parser::DeleteexpressionContext::DeleteexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::DeleteexpressionContext::Delete() {
  return getToken(CPP14Parser::Delete, 0);
}

CPP14Parser::CastexpressionContext* CPP14Parser::DeleteexpressionContext::castexpression() {
  return getRuleContext<CPP14Parser::CastexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::DeleteexpressionContext::Doublecolon() {
  return getToken(CPP14Parser::Doublecolon, 0);
}

tree::TerminalNode* CPP14Parser::DeleteexpressionContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::DeleteexpressionContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}


size_t CPP14Parser::DeleteexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleDeleteexpression;
}


CPP14Parser::DeleteexpressionContext* CPP14Parser::deleteexpression() {
  DeleteexpressionContext *_localctx = _tracker.createInstance<DeleteexpressionContext>(_ctx, getState());
  enterRule(_localctx, 52, CPP14Parser::RuleDeleteexpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(779);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(768);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Doublecolon) {
        setState(767);
        match(CPP14Parser::Doublecolon);
      }
      setState(770);
      match(CPP14Parser::Delete);
      setState(771);
      castexpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(773);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Doublecolon) {
        setState(772);
        match(CPP14Parser::Doublecolon);
      }
      setState(775);
      match(CPP14Parser::Delete);
      setState(776);
      match(CPP14Parser::LeftBracket);
      setState(777);
      match(CPP14Parser::RightBracket);
      setState(778);
      castexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoexceptexpressionContext ------------------------------------------------------------------

CPP14Parser::NoexceptexpressionContext::NoexceptexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NoexceptexpressionContext::Noexcept() {
  return getToken(CPP14Parser::Noexcept, 0);
}

tree::TerminalNode* CPP14Parser::NoexceptexpressionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::NoexceptexpressionContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::NoexceptexpressionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::NoexceptexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleNoexceptexpression;
}


CPP14Parser::NoexceptexpressionContext* CPP14Parser::noexceptexpression() {
  NoexceptexpressionContext *_localctx = _tracker.createInstance<NoexceptexpressionContext>(_ctx, getState());
  enterRule(_localctx, 54, CPP14Parser::RuleNoexceptexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(781);
    match(CPP14Parser::Noexcept);
    setState(782);
    match(CPP14Parser::LeftParen);
    setState(783);
    expression(0);
    setState(784);
    match(CPP14Parser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastexpressionContext ------------------------------------------------------------------

CPP14Parser::CastexpressionContext::CastexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::UnaryexpressionContext* CPP14Parser::CastexpressionContext::unaryexpression() {
  return getRuleContext<CPP14Parser::UnaryexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::CastexpressionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::CastexpressionContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::CastexpressionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::CastexpressionContext* CPP14Parser::CastexpressionContext::castexpression() {
  return getRuleContext<CPP14Parser::CastexpressionContext>(0);
}


size_t CPP14Parser::CastexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleCastexpression;
}


CPP14Parser::CastexpressionContext* CPP14Parser::castexpression() {
  CastexpressionContext *_localctx = _tracker.createInstance<CastexpressionContext>(_ctx, getState());
  enterRule(_localctx, 56, CPP14Parser::RuleCastexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(792);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(786);
      unaryexpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(787);
      match(CPP14Parser::LeftParen);
      setState(788);
      typeid_();
      setState(789);
      match(CPP14Parser::RightParen);
      setState(790);
      castexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PmexpressionContext ------------------------------------------------------------------

CPP14Parser::PmexpressionContext::PmexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::CastexpressionContext* CPP14Parser::PmexpressionContext::castexpression() {
  return getRuleContext<CPP14Parser::CastexpressionContext>(0);
}

CPP14Parser::PmexpressionContext* CPP14Parser::PmexpressionContext::pmexpression() {
  return getRuleContext<CPP14Parser::PmexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::PmexpressionContext::DotStar() {
  return getToken(CPP14Parser::DotStar, 0);
}

tree::TerminalNode* CPP14Parser::PmexpressionContext::ArrowStar() {
  return getToken(CPP14Parser::ArrowStar, 0);
}


size_t CPP14Parser::PmexpressionContext::getRuleIndex() const {
  return CPP14Parser::RulePmexpression;
}



CPP14Parser::PmexpressionContext* CPP14Parser::pmexpression() {
   return pmexpression(0);
}

CPP14Parser::PmexpressionContext* CPP14Parser::pmexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::PmexpressionContext *_localctx = _tracker.createInstance<PmexpressionContext>(_ctx, parentState);
  CPP14Parser::PmexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 58;
  enterRecursionRule(_localctx, 58, CPP14Parser::RulePmexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(795);
    castexpression();
    _ctx->stop = _input->LT(-1);
    setState(805);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(803);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PmexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePmexpression);
          setState(797);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(798);
          match(CPP14Parser::DotStar);
          setState(799);
          castexpression();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PmexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePmexpression);
          setState(800);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(801);
          match(CPP14Parser::ArrowStar);
          setState(802);
          castexpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(807);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MultiplicativeexpressionContext ------------------------------------------------------------------

CPP14Parser::MultiplicativeexpressionContext::MultiplicativeexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PmexpressionContext* CPP14Parser::MultiplicativeexpressionContext::pmexpression() {
  return getRuleContext<CPP14Parser::PmexpressionContext>(0);
}

CPP14Parser::MultiplicativeexpressionContext* CPP14Parser::MultiplicativeexpressionContext::multiplicativeexpression() {
  return getRuleContext<CPP14Parser::MultiplicativeexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::MultiplicativeexpressionContext::Star() {
  return getToken(CPP14Parser::Star, 0);
}

tree::TerminalNode* CPP14Parser::MultiplicativeexpressionContext::Div() {
  return getToken(CPP14Parser::Div, 0);
}

tree::TerminalNode* CPP14Parser::MultiplicativeexpressionContext::Mod() {
  return getToken(CPP14Parser::Mod, 0);
}


size_t CPP14Parser::MultiplicativeexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleMultiplicativeexpression;
}



CPP14Parser::MultiplicativeexpressionContext* CPP14Parser::multiplicativeexpression() {
   return multiplicativeexpression(0);
}

CPP14Parser::MultiplicativeexpressionContext* CPP14Parser::multiplicativeexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::MultiplicativeexpressionContext *_localctx = _tracker.createInstance<MultiplicativeexpressionContext>(_ctx, parentState);
  CPP14Parser::MultiplicativeexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 60;
  enterRecursionRule(_localctx, 60, CPP14Parser::RuleMultiplicativeexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(809);
    pmexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(822);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(820);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<MultiplicativeexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeexpression);
          setState(811);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(812);
          match(CPP14Parser::Star);
          setState(813);
          pmexpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<MultiplicativeexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeexpression);
          setState(814);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(815);
          match(CPP14Parser::Div);
          setState(816);
          pmexpression(0);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<MultiplicativeexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeexpression);
          setState(817);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(818);
          match(CPP14Parser::Mod);
          setState(819);
          pmexpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(824);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveexpressionContext ------------------------------------------------------------------

CPP14Parser::AdditiveexpressionContext::AdditiveexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::MultiplicativeexpressionContext* CPP14Parser::AdditiveexpressionContext::multiplicativeexpression() {
  return getRuleContext<CPP14Parser::MultiplicativeexpressionContext>(0);
}

CPP14Parser::AdditiveexpressionContext* CPP14Parser::AdditiveexpressionContext::additiveexpression() {
  return getRuleContext<CPP14Parser::AdditiveexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::AdditiveexpressionContext::Plus() {
  return getToken(CPP14Parser::Plus, 0);
}

tree::TerminalNode* CPP14Parser::AdditiveexpressionContext::Minus() {
  return getToken(CPP14Parser::Minus, 0);
}


size_t CPP14Parser::AdditiveexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleAdditiveexpression;
}



CPP14Parser::AdditiveexpressionContext* CPP14Parser::additiveexpression() {
   return additiveexpression(0);
}

CPP14Parser::AdditiveexpressionContext* CPP14Parser::additiveexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::AdditiveexpressionContext *_localctx = _tracker.createInstance<AdditiveexpressionContext>(_ctx, parentState);
  CPP14Parser::AdditiveexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, CPP14Parser::RuleAdditiveexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(826);
    multiplicativeexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(836);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(834);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<AdditiveexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAdditiveexpression);
          setState(828);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(829);
          match(CPP14Parser::Plus);
          setState(830);
          multiplicativeexpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<AdditiveexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAdditiveexpression);
          setState(831);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(832);
          match(CPP14Parser::Minus);
          setState(833);
          multiplicativeexpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(838);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ShiftexpressionContext ------------------------------------------------------------------

CPP14Parser::ShiftexpressionContext::ShiftexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AdditiveexpressionContext* CPP14Parser::ShiftexpressionContext::additiveexpression() {
  return getRuleContext<CPP14Parser::AdditiveexpressionContext>(0);
}

CPP14Parser::ShiftexpressionContext* CPP14Parser::ShiftexpressionContext::shiftexpression() {
  return getRuleContext<CPP14Parser::ShiftexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::ShiftexpressionContext::LeftShift() {
  return getToken(CPP14Parser::LeftShift, 0);
}

CPP14Parser::RightShiftContext* CPP14Parser::ShiftexpressionContext::rightShift() {
  return getRuleContext<CPP14Parser::RightShiftContext>(0);
}


size_t CPP14Parser::ShiftexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleShiftexpression;
}



CPP14Parser::ShiftexpressionContext* CPP14Parser::shiftexpression() {
   return shiftexpression(0);
}

CPP14Parser::ShiftexpressionContext* CPP14Parser::shiftexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::ShiftexpressionContext *_localctx = _tracker.createInstance<ShiftexpressionContext>(_ctx, parentState);
  CPP14Parser::ShiftexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, CPP14Parser::RuleShiftexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(840);
    additiveexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(851);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(849);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ShiftexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftexpression);
          setState(842);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(843);
          match(CPP14Parser::LeftShift);
          setState(844);
          additiveexpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ShiftexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftexpression);
          setState(845);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(846);
          rightShift();
          setState(847);
          additiveexpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(853);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalexpressionContext ------------------------------------------------------------------

CPP14Parser::RelationalexpressionContext::RelationalexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ShiftexpressionContext* CPP14Parser::RelationalexpressionContext::shiftexpression() {
  return getRuleContext<CPP14Parser::ShiftexpressionContext>(0);
}

CPP14Parser::RelationalexpressionContext* CPP14Parser::RelationalexpressionContext::relationalexpression() {
  return getRuleContext<CPP14Parser::RelationalexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::RelationalexpressionContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

tree::TerminalNode* CPP14Parser::RelationalexpressionContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

tree::TerminalNode* CPP14Parser::RelationalexpressionContext::LessEqual() {
  return getToken(CPP14Parser::LessEqual, 0);
}

tree::TerminalNode* CPP14Parser::RelationalexpressionContext::GreaterEqual() {
  return getToken(CPP14Parser::GreaterEqual, 0);
}


size_t CPP14Parser::RelationalexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleRelationalexpression;
}



CPP14Parser::RelationalexpressionContext* CPP14Parser::relationalexpression() {
   return relationalexpression(0);
}

CPP14Parser::RelationalexpressionContext* CPP14Parser::relationalexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::RelationalexpressionContext *_localctx = _tracker.createInstance<RelationalexpressionContext>(_ctx, parentState);
  CPP14Parser::RelationalexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 66;
  enterRecursionRule(_localctx, 66, CPP14Parser::RuleRelationalexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(855);
    shiftexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(871);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(869);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<RelationalexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalexpression);
          setState(857);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(858);
          match(CPP14Parser::Less);
          setState(859);
          shiftexpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<RelationalexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalexpression);
          setState(860);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(861);
          match(CPP14Parser::Greater);
          setState(862);
          shiftexpression(0);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<RelationalexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalexpression);
          setState(863);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(864);
          match(CPP14Parser::LessEqual);
          setState(865);
          shiftexpression(0);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<RelationalexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalexpression);
          setState(866);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(867);
          match(CPP14Parser::GreaterEqual);
          setState(868);
          shiftexpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(873);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EqualityexpressionContext ------------------------------------------------------------------

CPP14Parser::EqualityexpressionContext::EqualityexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::RelationalexpressionContext* CPP14Parser::EqualityexpressionContext::relationalexpression() {
  return getRuleContext<CPP14Parser::RelationalexpressionContext>(0);
}

CPP14Parser::EqualityexpressionContext* CPP14Parser::EqualityexpressionContext::equalityexpression() {
  return getRuleContext<CPP14Parser::EqualityexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::EqualityexpressionContext::Equal() {
  return getToken(CPP14Parser::Equal, 0);
}

tree::TerminalNode* CPP14Parser::EqualityexpressionContext::NotEqual() {
  return getToken(CPP14Parser::NotEqual, 0);
}


size_t CPP14Parser::EqualityexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleEqualityexpression;
}



CPP14Parser::EqualityexpressionContext* CPP14Parser::equalityexpression() {
   return equalityexpression(0);
}

CPP14Parser::EqualityexpressionContext* CPP14Parser::equalityexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::EqualityexpressionContext *_localctx = _tracker.createInstance<EqualityexpressionContext>(_ctx, parentState);
  CPP14Parser::EqualityexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 68;
  enterRecursionRule(_localctx, 68, CPP14Parser::RuleEqualityexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(875);
    relationalexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(885);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(883);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<EqualityexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleEqualityexpression);
          setState(877);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(878);
          match(CPP14Parser::Equal);
          setState(879);
          relationalexpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<EqualityexpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleEqualityexpression);
          setState(880);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(881);
          match(CPP14Parser::NotEqual);
          setState(882);
          relationalexpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(887);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AndexpressionContext ------------------------------------------------------------------

CPP14Parser::AndexpressionContext::AndexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::EqualityexpressionContext* CPP14Parser::AndexpressionContext::equalityexpression() {
  return getRuleContext<CPP14Parser::EqualityexpressionContext>(0);
}

CPP14Parser::AndexpressionContext* CPP14Parser::AndexpressionContext::andexpression() {
  return getRuleContext<CPP14Parser::AndexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::AndexpressionContext::And() {
  return getToken(CPP14Parser::And, 0);
}


size_t CPP14Parser::AndexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleAndexpression;
}



CPP14Parser::AndexpressionContext* CPP14Parser::andexpression() {
   return andexpression(0);
}

CPP14Parser::AndexpressionContext* CPP14Parser::andexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::AndexpressionContext *_localctx = _tracker.createInstance<AndexpressionContext>(_ctx, parentState);
  CPP14Parser::AndexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 70;
  enterRecursionRule(_localctx, 70, CPP14Parser::RuleAndexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(889);
    equalityexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(896);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AndexpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAndexpression);
        setState(891);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(892);
        match(CPP14Parser::And);
        setState(893);
        equalityexpression(0); 
      }
      setState(898);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExclusiveorexpressionContext ------------------------------------------------------------------

CPP14Parser::ExclusiveorexpressionContext::ExclusiveorexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AndexpressionContext* CPP14Parser::ExclusiveorexpressionContext::andexpression() {
  return getRuleContext<CPP14Parser::AndexpressionContext>(0);
}

CPP14Parser::ExclusiveorexpressionContext* CPP14Parser::ExclusiveorexpressionContext::exclusiveorexpression() {
  return getRuleContext<CPP14Parser::ExclusiveorexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::ExclusiveorexpressionContext::Caret() {
  return getToken(CPP14Parser::Caret, 0);
}


size_t CPP14Parser::ExclusiveorexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleExclusiveorexpression;
}



CPP14Parser::ExclusiveorexpressionContext* CPP14Parser::exclusiveorexpression() {
   return exclusiveorexpression(0);
}

CPP14Parser::ExclusiveorexpressionContext* CPP14Parser::exclusiveorexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::ExclusiveorexpressionContext *_localctx = _tracker.createInstance<ExclusiveorexpressionContext>(_ctx, parentState);
  CPP14Parser::ExclusiveorexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 72;
  enterRecursionRule(_localctx, 72, CPP14Parser::RuleExclusiveorexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(900);
    andexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(907);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExclusiveorexpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExclusiveorexpression);
        setState(902);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(903);
        match(CPP14Parser::Caret);
        setState(904);
        andexpression(0); 
      }
      setState(909);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InclusiveorexpressionContext ------------------------------------------------------------------

CPP14Parser::InclusiveorexpressionContext::InclusiveorexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ExclusiveorexpressionContext* CPP14Parser::InclusiveorexpressionContext::exclusiveorexpression() {
  return getRuleContext<CPP14Parser::ExclusiveorexpressionContext>(0);
}

CPP14Parser::InclusiveorexpressionContext* CPP14Parser::InclusiveorexpressionContext::inclusiveorexpression() {
  return getRuleContext<CPP14Parser::InclusiveorexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::InclusiveorexpressionContext::Or() {
  return getToken(CPP14Parser::Or, 0);
}


size_t CPP14Parser::InclusiveorexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleInclusiveorexpression;
}



CPP14Parser::InclusiveorexpressionContext* CPP14Parser::inclusiveorexpression() {
   return inclusiveorexpression(0);
}

CPP14Parser::InclusiveorexpressionContext* CPP14Parser::inclusiveorexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::InclusiveorexpressionContext *_localctx = _tracker.createInstance<InclusiveorexpressionContext>(_ctx, parentState);
  CPP14Parser::InclusiveorexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 74;
  enterRecursionRule(_localctx, 74, CPP14Parser::RuleInclusiveorexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(911);
    exclusiveorexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(918);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InclusiveorexpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInclusiveorexpression);
        setState(913);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(914);
        match(CPP14Parser::Or);
        setState(915);
        exclusiveorexpression(0); 
      }
      setState(920);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LogicalandexpressionContext ------------------------------------------------------------------

CPP14Parser::LogicalandexpressionContext::LogicalandexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::InclusiveorexpressionContext* CPP14Parser::LogicalandexpressionContext::inclusiveorexpression() {
  return getRuleContext<CPP14Parser::InclusiveorexpressionContext>(0);
}

CPP14Parser::LogicalandexpressionContext* CPP14Parser::LogicalandexpressionContext::logicalandexpression() {
  return getRuleContext<CPP14Parser::LogicalandexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::LogicalandexpressionContext::AndAnd() {
  return getToken(CPP14Parser::AndAnd, 0);
}


size_t CPP14Parser::LogicalandexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleLogicalandexpression;
}



CPP14Parser::LogicalandexpressionContext* CPP14Parser::logicalandexpression() {
   return logicalandexpression(0);
}

CPP14Parser::LogicalandexpressionContext* CPP14Parser::logicalandexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::LogicalandexpressionContext *_localctx = _tracker.createInstance<LogicalandexpressionContext>(_ctx, parentState);
  CPP14Parser::LogicalandexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 76;
  enterRecursionRule(_localctx, 76, CPP14Parser::RuleLogicalandexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(922);
    inclusiveorexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(929);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<LogicalandexpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleLogicalandexpression);
        setState(924);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(925);
        match(CPP14Parser::AndAnd);
        setState(926);
        inclusiveorexpression(0); 
      }
      setState(931);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LogicalorexpressionContext ------------------------------------------------------------------

CPP14Parser::LogicalorexpressionContext::LogicalorexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::LogicalandexpressionContext* CPP14Parser::LogicalorexpressionContext::logicalandexpression() {
  return getRuleContext<CPP14Parser::LogicalandexpressionContext>(0);
}

CPP14Parser::LogicalorexpressionContext* CPP14Parser::LogicalorexpressionContext::logicalorexpression() {
  return getRuleContext<CPP14Parser::LogicalorexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::LogicalorexpressionContext::OrOr() {
  return getToken(CPP14Parser::OrOr, 0);
}


size_t CPP14Parser::LogicalorexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleLogicalorexpression;
}



CPP14Parser::LogicalorexpressionContext* CPP14Parser::logicalorexpression() {
   return logicalorexpression(0);
}

CPP14Parser::LogicalorexpressionContext* CPP14Parser::logicalorexpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::LogicalorexpressionContext *_localctx = _tracker.createInstance<LogicalorexpressionContext>(_ctx, parentState);
  CPP14Parser::LogicalorexpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 78;
  enterRecursionRule(_localctx, 78, CPP14Parser::RuleLogicalorexpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(933);
    logicalandexpression(0);
    _ctx->stop = _input->LT(-1);
    setState(940);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<LogicalorexpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleLogicalorexpression);
        setState(935);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(936);
        match(CPP14Parser::OrOr);
        setState(937);
        logicalandexpression(0); 
      }
      setState(942);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConditionalexpressionContext ------------------------------------------------------------------

CPP14Parser::ConditionalexpressionContext::ConditionalexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::LogicalorexpressionContext* CPP14Parser::ConditionalexpressionContext::logicalorexpression() {
  return getRuleContext<CPP14Parser::LogicalorexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::ConditionalexpressionContext::Question() {
  return getToken(CPP14Parser::Question, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::ConditionalexpressionContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::ConditionalexpressionContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::AssignmentexpressionContext* CPP14Parser::ConditionalexpressionContext::assignmentexpression() {
  return getRuleContext<CPP14Parser::AssignmentexpressionContext>(0);
}


size_t CPP14Parser::ConditionalexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleConditionalexpression;
}


CPP14Parser::ConditionalexpressionContext* CPP14Parser::conditionalexpression() {
  ConditionalexpressionContext *_localctx = _tracker.createInstance<ConditionalexpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, CPP14Parser::RuleConditionalexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(950);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(943);
      logicalorexpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(944);
      logicalorexpression(0);
      setState(945);
      match(CPP14Parser::Question);
      setState(946);
      expression(0);
      setState(947);
      match(CPP14Parser::Colon);
      setState(948);
      assignmentexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentexpressionContext ------------------------------------------------------------------

CPP14Parser::AssignmentexpressionContext::AssignmentexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ConditionalexpressionContext* CPP14Parser::AssignmentexpressionContext::conditionalexpression() {
  return getRuleContext<CPP14Parser::ConditionalexpressionContext>(0);
}

CPP14Parser::LogicalorexpressionContext* CPP14Parser::AssignmentexpressionContext::logicalorexpression() {
  return getRuleContext<CPP14Parser::LogicalorexpressionContext>(0);
}

CPP14Parser::AssignmentoperatorContext* CPP14Parser::AssignmentexpressionContext::assignmentoperator() {
  return getRuleContext<CPP14Parser::AssignmentoperatorContext>(0);
}

CPP14Parser::InitializerclauseContext* CPP14Parser::AssignmentexpressionContext::initializerclause() {
  return getRuleContext<CPP14Parser::InitializerclauseContext>(0);
}

CPP14Parser::ThrowexpressionContext* CPP14Parser::AssignmentexpressionContext::throwexpression() {
  return getRuleContext<CPP14Parser::ThrowexpressionContext>(0);
}


size_t CPP14Parser::AssignmentexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleAssignmentexpression;
}


CPP14Parser::AssignmentexpressionContext* CPP14Parser::assignmentexpression() {
  AssignmentexpressionContext *_localctx = _tracker.createInstance<AssignmentexpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, CPP14Parser::RuleAssignmentexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(958);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(952);
      conditionalexpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(953);
      logicalorexpression(0);
      setState(954);
      assignmentoperator();
      setState(955);
      initializerclause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(957);
      throwexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentoperatorContext ------------------------------------------------------------------

CPP14Parser::AssignmentoperatorContext::AssignmentoperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::StarAssign() {
  return getToken(CPP14Parser::StarAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::DivAssign() {
  return getToken(CPP14Parser::DivAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::ModAssign() {
  return getToken(CPP14Parser::ModAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::PlusAssign() {
  return getToken(CPP14Parser::PlusAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::MinusAssign() {
  return getToken(CPP14Parser::MinusAssign, 0);
}

CPP14Parser::RightShiftAssignContext* CPP14Parser::AssignmentoperatorContext::rightShiftAssign() {
  return getRuleContext<CPP14Parser::RightShiftAssignContext>(0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::LeftShiftAssign() {
  return getToken(CPP14Parser::LeftShiftAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::AndAssign() {
  return getToken(CPP14Parser::AndAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::XorAssign() {
  return getToken(CPP14Parser::XorAssign, 0);
}

tree::TerminalNode* CPP14Parser::AssignmentoperatorContext::OrAssign() {
  return getToken(CPP14Parser::OrAssign, 0);
}


size_t CPP14Parser::AssignmentoperatorContext::getRuleIndex() const {
  return CPP14Parser::RuleAssignmentoperator;
}


CPP14Parser::AssignmentoperatorContext* CPP14Parser::assignmentoperator() {
  AssignmentoperatorContext *_localctx = _tracker.createInstance<AssignmentoperatorContext>(_ctx, getState());
  enterRule(_localctx, 84, CPP14Parser::RuleAssignmentoperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(971);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(960);
        match(CPP14Parser::Assign);
        break;
      }

      case CPP14Parser::StarAssign: {
        enterOuterAlt(_localctx, 2);
        setState(961);
        match(CPP14Parser::StarAssign);
        break;
      }

      case CPP14Parser::DivAssign: {
        enterOuterAlt(_localctx, 3);
        setState(962);
        match(CPP14Parser::DivAssign);
        break;
      }

      case CPP14Parser::ModAssign: {
        enterOuterAlt(_localctx, 4);
        setState(963);
        match(CPP14Parser::ModAssign);
        break;
      }

      case CPP14Parser::PlusAssign: {
        enterOuterAlt(_localctx, 5);
        setState(964);
        match(CPP14Parser::PlusAssign);
        break;
      }

      case CPP14Parser::MinusAssign: {
        enterOuterAlt(_localctx, 6);
        setState(965);
        match(CPP14Parser::MinusAssign);
        break;
      }

      case CPP14Parser::Greater: {
        enterOuterAlt(_localctx, 7);
        setState(966);
        rightShiftAssign();
        break;
      }

      case CPP14Parser::LeftShiftAssign: {
        enterOuterAlt(_localctx, 8);
        setState(967);
        match(CPP14Parser::LeftShiftAssign);
        break;
      }

      case CPP14Parser::AndAssign: {
        enterOuterAlt(_localctx, 9);
        setState(968);
        match(CPP14Parser::AndAssign);
        break;
      }

      case CPP14Parser::XorAssign: {
        enterOuterAlt(_localctx, 10);
        setState(969);
        match(CPP14Parser::XorAssign);
        break;
      }

      case CPP14Parser::OrAssign: {
        enterOuterAlt(_localctx, 11);
        setState(970);
        match(CPP14Parser::OrAssign);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

CPP14Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AssignmentexpressionContext* CPP14Parser::ExpressionContext::assignmentexpression() {
  return getRuleContext<CPP14Parser::AssignmentexpressionContext>(0);
}

CPP14Parser::ExpressionContext* CPP14Parser::ExpressionContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::ExpressionContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::ExpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleExpression;
}



CPP14Parser::ExpressionContext* CPP14Parser::expression() {
   return expression(0);
}

CPP14Parser::ExpressionContext* CPP14Parser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  CPP14Parser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 86;
  enterRecursionRule(_localctx, 86, CPP14Parser::RuleExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(974);
    assignmentexpression();
    _ctx->stop = _input->LT(-1);
    setState(981);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExpression);
        setState(976);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(977);
        match(CPP14Parser::Comma);
        setState(978);
        assignmentexpression(); 
      }
      setState(983);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConstantexpressionContext ------------------------------------------------------------------

CPP14Parser::ConstantexpressionContext::ConstantexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ConditionalexpressionContext* CPP14Parser::ConstantexpressionContext::conditionalexpression() {
  return getRuleContext<CPP14Parser::ConditionalexpressionContext>(0);
}


size_t CPP14Parser::ConstantexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleConstantexpression;
}


CPP14Parser::ConstantexpressionContext* CPP14Parser::constantexpression() {
  ConstantexpressionContext *_localctx = _tracker.createInstance<ConstantexpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, CPP14Parser::RuleConstantexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(984);
    conditionalexpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

CPP14Parser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::LabeledstatementContext* CPP14Parser::StatementContext::labeledstatement() {
  return getRuleContext<CPP14Parser::LabeledstatementContext>(0);
}

CPP14Parser::ExpressionstatementContext* CPP14Parser::StatementContext::expressionstatement() {
  return getRuleContext<CPP14Parser::ExpressionstatementContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::StatementContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::CompoundstatementContext* CPP14Parser::StatementContext::compoundstatement() {
  return getRuleContext<CPP14Parser::CompoundstatementContext>(0);
}

CPP14Parser::SelectionstatementContext* CPP14Parser::StatementContext::selectionstatement() {
  return getRuleContext<CPP14Parser::SelectionstatementContext>(0);
}

CPP14Parser::IterationstatementContext* CPP14Parser::StatementContext::iterationstatement() {
  return getRuleContext<CPP14Parser::IterationstatementContext>(0);
}

CPP14Parser::JumpstatementContext* CPP14Parser::StatementContext::jumpstatement() {
  return getRuleContext<CPP14Parser::JumpstatementContext>(0);
}

CPP14Parser::DeclarationstatementContext* CPP14Parser::StatementContext::declarationstatement() {
  return getRuleContext<CPP14Parser::DeclarationstatementContext>(0);
}

CPP14Parser::TryblockContext* CPP14Parser::StatementContext::tryblock() {
  return getRuleContext<CPP14Parser::TryblockContext>(0);
}


size_t CPP14Parser::StatementContext::getRuleIndex() const {
  return CPP14Parser::RuleStatement;
}


CPP14Parser::StatementContext* CPP14Parser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 90, CPP14Parser::RuleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1012);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(986);
      labeledstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(988);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
      case 1: {
        setState(987);
        attributespecifierseq(0);
        break;
      }

      default:
        break;
      }
      setState(990);
      expressionstatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(992);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(991);
        attributespecifierseq(0);
      }
      setState(994);
      compoundstatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(996);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(995);
        attributespecifierseq(0);
      }
      setState(998);
      selectionstatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1000);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(999);
        attributespecifierseq(0);
      }
      setState(1002);
      iterationstatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1004);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1003);
        attributespecifierseq(0);
      }
      setState(1006);
      jumpstatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1007);
      declarationstatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1009);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1008);
        attributespecifierseq(0);
      }
      setState(1011);
      tryblock();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledstatementContext ------------------------------------------------------------------

CPP14Parser::LabeledstatementContext::LabeledstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::LabeledstatementContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::LabeledstatementContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::StatementContext* CPP14Parser::LabeledstatementContext::statement() {
  return getRuleContext<CPP14Parser::StatementContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::LabeledstatementContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::LabeledstatementContext::Case() {
  return getToken(CPP14Parser::Case, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::LabeledstatementContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::LabeledstatementContext::Default() {
  return getToken(CPP14Parser::Default, 0);
}


size_t CPP14Parser::LabeledstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleLabeledstatement;
}


CPP14Parser::LabeledstatementContext* CPP14Parser::labeledstatement() {
  LabeledstatementContext *_localctx = _tracker.createInstance<LabeledstatementContext>(_ctx, getState());
  enterRule(_localctx, 92, CPP14Parser::RuleLabeledstatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1015);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1014);
        attributespecifierseq(0);
      }
      setState(1017);
      match(CPP14Parser::Identifier);
      setState(1018);
      match(CPP14Parser::Colon);
      setState(1019);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1021);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1020);
        attributespecifierseq(0);
      }
      setState(1023);
      match(CPP14Parser::Case);
      setState(1024);
      constantexpression();
      setState(1025);
      match(CPP14Parser::Colon);
      setState(1026);
      statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1029);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1028);
        attributespecifierseq(0);
      }
      setState(1031);
      match(CPP14Parser::Default);
      setState(1032);
      match(CPP14Parser::Colon);
      setState(1033);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionstatementContext ------------------------------------------------------------------

CPP14Parser::ExpressionstatementContext::ExpressionstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ExpressionstatementContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::ExpressionstatementContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}


size_t CPP14Parser::ExpressionstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleExpressionstatement;
}


CPP14Parser::ExpressionstatementContext* CPP14Parser::expressionstatement() {
  ExpressionstatementContext *_localctx = _tracker.createInstance<ExpressionstatementContext>(_ctx, getState());
  enterRule(_localctx, 94, CPP14Parser::RuleExpressionstatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 6991275472553333939) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 127) != 0)) {
      setState(1036);
      expression(0);
    }
    setState(1039);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundstatementContext ------------------------------------------------------------------

CPP14Parser::CompoundstatementContext::CompoundstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::CompoundstatementContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

tree::TerminalNode* CPP14Parser::CompoundstatementContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

CPP14Parser::StatementseqContext* CPP14Parser::CompoundstatementContext::statementseq() {
  return getRuleContext<CPP14Parser::StatementseqContext>(0);
}


size_t CPP14Parser::CompoundstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleCompoundstatement;
}


CPP14Parser::CompoundstatementContext* CPP14Parser::compoundstatement() {
  CompoundstatementContext *_localctx = _tracker.createInstance<CompoundstatementContext>(_ctx, getState());
  enterRule(_localctx, 96, CPP14Parser::RuleCompoundstatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1041);
    match(CPP14Parser::LeftBrace);
    setState(1043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2306898542825833480) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8288452902724665343) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 127) != 0)) {
      setState(1042);
      statementseq(0);
    }
    setState(1045);
    match(CPP14Parser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementseqContext ------------------------------------------------------------------

CPP14Parser::StatementseqContext::StatementseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::StatementContext* CPP14Parser::StatementseqContext::statement() {
  return getRuleContext<CPP14Parser::StatementContext>(0);
}

CPP14Parser::StatementseqContext* CPP14Parser::StatementseqContext::statementseq() {
  return getRuleContext<CPP14Parser::StatementseqContext>(0);
}


size_t CPP14Parser::StatementseqContext::getRuleIndex() const {
  return CPP14Parser::RuleStatementseq;
}



CPP14Parser::StatementseqContext* CPP14Parser::statementseq() {
   return statementseq(0);
}

CPP14Parser::StatementseqContext* CPP14Parser::statementseq(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::StatementseqContext *_localctx = _tracker.createInstance<StatementseqContext>(_ctx, parentState);
  CPP14Parser::StatementseqContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 98;
  enterRecursionRule(_localctx, 98, CPP14Parser::RuleStatementseq, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1048);
    statement();
    _ctx->stop = _input->LT(-1);
    setState(1054);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<StatementseqContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleStatementseq);
        setState(1050);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1051);
        statement(); 
      }
      setState(1056);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SelectionstatementContext ------------------------------------------------------------------

CPP14Parser::SelectionstatementContext::SelectionstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::SelectionstatementContext::If() {
  return getToken(CPP14Parser::If, 0);
}

tree::TerminalNode* CPP14Parser::SelectionstatementContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ConditionContext* CPP14Parser::SelectionstatementContext::condition() {
  return getRuleContext<CPP14Parser::ConditionContext>(0);
}

tree::TerminalNode* CPP14Parser::SelectionstatementContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

std::vector<CPP14Parser::StatementContext *> CPP14Parser::SelectionstatementContext::statement() {
  return getRuleContexts<CPP14Parser::StatementContext>();
}

CPP14Parser::StatementContext* CPP14Parser::SelectionstatementContext::statement(size_t i) {
  return getRuleContext<CPP14Parser::StatementContext>(i);
}

tree::TerminalNode* CPP14Parser::SelectionstatementContext::Else() {
  return getToken(CPP14Parser::Else, 0);
}

tree::TerminalNode* CPP14Parser::SelectionstatementContext::Switch() {
  return getToken(CPP14Parser::Switch, 0);
}


size_t CPP14Parser::SelectionstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleSelectionstatement;
}


CPP14Parser::SelectionstatementContext* CPP14Parser::selectionstatement() {
  SelectionstatementContext *_localctx = _tracker.createInstance<SelectionstatementContext>(_ctx, getState());
  enterRule(_localctx, 100, CPP14Parser::RuleSelectionstatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1077);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1057);
      match(CPP14Parser::If);
      setState(1058);
      match(CPP14Parser::LeftParen);
      setState(1059);
      condition();
      setState(1060);
      match(CPP14Parser::RightParen);
      setState(1061);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1063);
      match(CPP14Parser::If);
      setState(1064);
      match(CPP14Parser::LeftParen);
      setState(1065);
      condition();
      setState(1066);
      match(CPP14Parser::RightParen);
      setState(1067);
      statement();
      setState(1068);
      match(CPP14Parser::Else);
      setState(1069);
      statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1071);
      match(CPP14Parser::Switch);
      setState(1072);
      match(CPP14Parser::LeftParen);
      setState(1073);
      condition();
      setState(1074);
      match(CPP14Parser::RightParen);
      setState(1075);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

CPP14Parser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ExpressionContext* CPP14Parser::ConditionContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::ConditionContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}

CPP14Parser::DeclaratorContext* CPP14Parser::ConditionContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

tree::TerminalNode* CPP14Parser::ConditionContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::InitializerclauseContext* CPP14Parser::ConditionContext::initializerclause() {
  return getRuleContext<CPP14Parser::InitializerclauseContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ConditionContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::ConditionContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}


size_t CPP14Parser::ConditionContext::getRuleIndex() const {
  return CPP14Parser::RuleCondition;
}


CPP14Parser::ConditionContext* CPP14Parser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 102, CPP14Parser::RuleCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1095);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1079);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1081);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1080);
        attributespecifierseq(0);
      }
      setState(1083);
      declspecifierseq();
      setState(1084);
      declarator();
      setState(1085);
      match(CPP14Parser::Assign);
      setState(1086);
      initializerclause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1088);
        attributespecifierseq(0);
      }
      setState(1091);
      declspecifierseq();
      setState(1092);
      declarator();
      setState(1093);
      bracedinitlist();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationstatementContext ------------------------------------------------------------------

CPP14Parser::IterationstatementContext::IterationstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::While() {
  return getToken(CPP14Parser::While, 0);
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ConditionContext* CPP14Parser::IterationstatementContext::condition() {
  return getRuleContext<CPP14Parser::ConditionContext>(0);
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::StatementContext* CPP14Parser::IterationstatementContext::statement() {
  return getRuleContext<CPP14Parser::StatementContext>(0);
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::Do() {
  return getToken(CPP14Parser::Do, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::IterationstatementContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::For() {
  return getToken(CPP14Parser::For, 0);
}

CPP14Parser::ForinitstatementContext* CPP14Parser::IterationstatementContext::forinitstatement() {
  return getRuleContext<CPP14Parser::ForinitstatementContext>(0);
}

CPP14Parser::ForrangedeclarationContext* CPP14Parser::IterationstatementContext::forrangedeclaration() {
  return getRuleContext<CPP14Parser::ForrangedeclarationContext>(0);
}

tree::TerminalNode* CPP14Parser::IterationstatementContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::ForrangeinitializerContext* CPP14Parser::IterationstatementContext::forrangeinitializer() {
  return getRuleContext<CPP14Parser::ForrangeinitializerContext>(0);
}


size_t CPP14Parser::IterationstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleIterationstatement;
}


CPP14Parser::IterationstatementContext* CPP14Parser::iterationstatement() {
  IterationstatementContext *_localctx = _tracker.createInstance<IterationstatementContext>(_ctx, getState());
  enterRule(_localctx, 104, CPP14Parser::RuleIterationstatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1132);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1097);
      match(CPP14Parser::While);
      setState(1098);
      match(CPP14Parser::LeftParen);
      setState(1099);
      condition();
      setState(1100);
      match(CPP14Parser::RightParen);
      setState(1101);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1103);
      match(CPP14Parser::Do);
      setState(1104);
      statement();
      setState(1105);
      match(CPP14Parser::While);
      setState(1106);
      match(CPP14Parser::LeftParen);
      setState(1107);
      expression(0);
      setState(1108);
      match(CPP14Parser::RightParen);
      setState(1109);
      match(CPP14Parser::Semi);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1111);
      match(CPP14Parser::For);
      setState(1112);
      match(CPP14Parser::LeftParen);
      setState(1113);
      forinitstatement();
      setState(1115);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -3608441145833817896) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6991275472553336571) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(1114);
        condition();
      }
      setState(1117);
      match(CPP14Parser::Semi);
      setState(1119);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6991275472553333939) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(1118);
        expression(0);
      }
      setState(1121);
      match(CPP14Parser::RightParen);
      setState(1122);
      statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1124);
      match(CPP14Parser::For);
      setState(1125);
      match(CPP14Parser::LeftParen);
      setState(1126);
      forrangedeclaration();
      setState(1127);
      match(CPP14Parser::Colon);
      setState(1128);
      forrangeinitializer();
      setState(1129);
      match(CPP14Parser::RightParen);
      setState(1130);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForinitstatementContext ------------------------------------------------------------------

CPP14Parser::ForinitstatementContext::ForinitstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ExpressionstatementContext* CPP14Parser::ForinitstatementContext::expressionstatement() {
  return getRuleContext<CPP14Parser::ExpressionstatementContext>(0);
}

CPP14Parser::SimpledeclarationContext* CPP14Parser::ForinitstatementContext::simpledeclaration() {
  return getRuleContext<CPP14Parser::SimpledeclarationContext>(0);
}


size_t CPP14Parser::ForinitstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleForinitstatement;
}


CPP14Parser::ForinitstatementContext* CPP14Parser::forinitstatement() {
  ForinitstatementContext *_localctx = _tracker.createInstance<ForinitstatementContext>(_ctx, getState());
  enterRule(_localctx, 106, CPP14Parser::RuleForinitstatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1136);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1134);
      expressionstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1135);
      simpledeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForrangedeclarationContext ------------------------------------------------------------------

CPP14Parser::ForrangedeclarationContext::ForrangedeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::ForrangedeclarationContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}

CPP14Parser::DeclaratorContext* CPP14Parser::ForrangedeclarationContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ForrangedeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::ForrangedeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleForrangedeclaration;
}


CPP14Parser::ForrangedeclarationContext* CPP14Parser::forrangedeclaration() {
  ForrangedeclarationContext *_localctx = _tracker.createInstance<ForrangedeclarationContext>(_ctx, getState());
  enterRule(_localctx, 108, CPP14Parser::RuleForrangedeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1139);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
      setState(1138);
      attributespecifierseq(0);
    }
    setState(1141);
    declspecifierseq();
    setState(1142);
    declarator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForrangeinitializerContext ------------------------------------------------------------------

CPP14Parser::ForrangeinitializerContext::ForrangeinitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ExpressionContext* CPP14Parser::ForrangeinitializerContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::ForrangeinitializerContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}


size_t CPP14Parser::ForrangeinitializerContext::getRuleIndex() const {
  return CPP14Parser::RuleForrangeinitializer;
}


CPP14Parser::ForrangeinitializerContext* CPP14Parser::forrangeinitializer() {
  ForrangeinitializerContext *_localctx = _tracker.createInstance<ForrangeinitializerContext>(_ctx, getState());
  enterRule(_localctx, 110, CPP14Parser::RuleForrangeinitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1146);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Alignof:
      case CPP14Parser::Auto:
      case CPP14Parser::Bool:
      case CPP14Parser::Char:
      case CPP14Parser::Char16:
      case CPP14Parser::Char32:
      case CPP14Parser::Const_cast:
      case CPP14Parser::Decltype:
      case CPP14Parser::Delete:
      case CPP14Parser::Double:
      case CPP14Parser::Dynamic_cast:
      case CPP14Parser::False:
      case CPP14Parser::Float:
      case CPP14Parser::Int:
      case CPP14Parser::Long:
      case CPP14Parser::New:
      case CPP14Parser::Noexcept:
      case CPP14Parser::Nullptr:
      case CPP14Parser::Operator:
      case CPP14Parser::Reinterpret_cast:
      case CPP14Parser::Short:
      case CPP14Parser::Signed:
      case CPP14Parser::Sizeof:
      case CPP14Parser::Static_cast:
      case CPP14Parser::This:
      case CPP14Parser::Throw:
      case CPP14Parser::True:
      case CPP14Parser::Typeid:
      case CPP14Parser::Typename:
      case CPP14Parser::Unsigned:
      case CPP14Parser::Void:
      case CPP14Parser::Wchar:
      case CPP14Parser::LeftParen:
      case CPP14Parser::LeftBracket:
      case CPP14Parser::Plus:
      case CPP14Parser::Minus:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::Or:
      case CPP14Parser::Tilde:
      case CPP14Parser::Not:
      case CPP14Parser::PlusPlus:
      case CPP14Parser::MinusMinus:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier:
      case CPP14Parser::Integerliteral:
      case CPP14Parser::Characterliteral:
      case CPP14Parser::Floatingliteral:
      case CPP14Parser::Stringliteral:
      case CPP14Parser::Userdefinedintegerliteral:
      case CPP14Parser::Userdefinedfloatingliteral:
      case CPP14Parser::Userdefinedstringliteral:
      case CPP14Parser::Userdefinedcharacterliteral: {
        enterOuterAlt(_localctx, 1);
        setState(1144);
        expression(0);
        break;
      }

      case CPP14Parser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(1145);
        bracedinitlist();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JumpstatementContext ------------------------------------------------------------------

CPP14Parser::JumpstatementContext::JumpstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::JumpstatementContext::Break() {
  return getToken(CPP14Parser::Break, 0);
}

tree::TerminalNode* CPP14Parser::JumpstatementContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

tree::TerminalNode* CPP14Parser::JumpstatementContext::Continue() {
  return getToken(CPP14Parser::Continue, 0);
}

tree::TerminalNode* CPP14Parser::JumpstatementContext::Return() {
  return getToken(CPP14Parser::Return, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::JumpstatementContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::JumpstatementContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}

tree::TerminalNode* CPP14Parser::JumpstatementContext::Goto() {
  return getToken(CPP14Parser::Goto, 0);
}

tree::TerminalNode* CPP14Parser::JumpstatementContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::JumpstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleJumpstatement;
}


CPP14Parser::JumpstatementContext* CPP14Parser::jumpstatement() {
  JumpstatementContext *_localctx = _tracker.createInstance<JumpstatementContext>(_ctx, getState());
  enterRule(_localctx, 112, CPP14Parser::RuleJumpstatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1164);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1148);
      match(CPP14Parser::Break);
      setState(1149);
      match(CPP14Parser::Semi);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1150);
      match(CPP14Parser::Continue);
      setState(1151);
      match(CPP14Parser::Semi);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1152);
      match(CPP14Parser::Return);
      setState(1154);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6991275472553333939) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(1153);
        expression(0);
      }
      setState(1156);
      match(CPP14Parser::Semi);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1157);
      match(CPP14Parser::Return);
      setState(1158);
      bracedinitlist();
      setState(1159);
      match(CPP14Parser::Semi);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1161);
      match(CPP14Parser::Goto);
      setState(1162);
      match(CPP14Parser::Identifier);
      setState(1163);
      match(CPP14Parser::Semi);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationstatementContext ------------------------------------------------------------------

CPP14Parser::DeclarationstatementContext::DeclarationstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::BlockdeclarationContext* CPP14Parser::DeclarationstatementContext::blockdeclaration() {
  return getRuleContext<CPP14Parser::BlockdeclarationContext>(0);
}


size_t CPP14Parser::DeclarationstatementContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclarationstatement;
}


CPP14Parser::DeclarationstatementContext* CPP14Parser::declarationstatement() {
  DeclarationstatementContext *_localctx = _tracker.createInstance<DeclarationstatementContext>(_ctx, getState());
  enterRule(_localctx, 114, CPP14Parser::RuleDeclarationstatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1166);
    blockdeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationseqContext ------------------------------------------------------------------

CPP14Parser::DeclarationseqContext::DeclarationseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclarationContext* CPP14Parser::DeclarationseqContext::declaration() {
  return getRuleContext<CPP14Parser::DeclarationContext>(0);
}

CPP14Parser::DeclarationseqContext* CPP14Parser::DeclarationseqContext::declarationseq() {
  return getRuleContext<CPP14Parser::DeclarationseqContext>(0);
}


size_t CPP14Parser::DeclarationseqContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclarationseq;
}



CPP14Parser::DeclarationseqContext* CPP14Parser::declarationseq() {
   return declarationseq(0);
}

CPP14Parser::DeclarationseqContext* CPP14Parser::declarationseq(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::DeclarationseqContext *_localctx = _tracker.createInstance<DeclarationseqContext>(_ctx, parentState);
  CPP14Parser::DeclarationseqContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 116;
  enterRecursionRule(_localctx, 116, CPP14Parser::RuleDeclarationseq, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1169);
    declaration();
    _ctx->stop = _input->LT(-1);
    setState(1175);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DeclarationseqContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDeclarationseq);
        setState(1171);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1172);
        declaration(); 
      }
      setState(1177);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

CPP14Parser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::BlockdeclarationContext* CPP14Parser::DeclarationContext::blockdeclaration() {
  return getRuleContext<CPP14Parser::BlockdeclarationContext>(0);
}

CPP14Parser::FunctiondefinitionContext* CPP14Parser::DeclarationContext::functiondefinition() {
  return getRuleContext<CPP14Parser::FunctiondefinitionContext>(0);
}

CPP14Parser::TemplatedeclarationContext* CPP14Parser::DeclarationContext::templatedeclaration() {
  return getRuleContext<CPP14Parser::TemplatedeclarationContext>(0);
}

CPP14Parser::ExplicitinstantiationContext* CPP14Parser::DeclarationContext::explicitinstantiation() {
  return getRuleContext<CPP14Parser::ExplicitinstantiationContext>(0);
}

CPP14Parser::ExplicitspecializationContext* CPP14Parser::DeclarationContext::explicitspecialization() {
  return getRuleContext<CPP14Parser::ExplicitspecializationContext>(0);
}

CPP14Parser::LinkagespecificationContext* CPP14Parser::DeclarationContext::linkagespecification() {
  return getRuleContext<CPP14Parser::LinkagespecificationContext>(0);
}

CPP14Parser::NamespacedefinitionContext* CPP14Parser::DeclarationContext::namespacedefinition() {
  return getRuleContext<CPP14Parser::NamespacedefinitionContext>(0);
}

CPP14Parser::EmptydeclarationContext* CPP14Parser::DeclarationContext::emptydeclaration() {
  return getRuleContext<CPP14Parser::EmptydeclarationContext>(0);
}

CPP14Parser::AttributedeclarationContext* CPP14Parser::DeclarationContext::attributedeclaration() {
  return getRuleContext<CPP14Parser::AttributedeclarationContext>(0);
}


size_t CPP14Parser::DeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclaration;
}


CPP14Parser::DeclarationContext* CPP14Parser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 118, CPP14Parser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1187);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1178);
      blockdeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1179);
      functiondefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1180);
      templatedeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1181);
      explicitinstantiation();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1182);
      explicitspecialization();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1183);
      linkagespecification();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1184);
      namespacedefinition();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1185);
      emptydeclaration();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1186);
      attributedeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockdeclarationContext ------------------------------------------------------------------

CPP14Parser::BlockdeclarationContext::BlockdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::SimpledeclarationContext* CPP14Parser::BlockdeclarationContext::simpledeclaration() {
  return getRuleContext<CPP14Parser::SimpledeclarationContext>(0);
}

CPP14Parser::AsmdefinitionContext* CPP14Parser::BlockdeclarationContext::asmdefinition() {
  return getRuleContext<CPP14Parser::AsmdefinitionContext>(0);
}

CPP14Parser::NamespacealiasdefinitionContext* CPP14Parser::BlockdeclarationContext::namespacealiasdefinition() {
  return getRuleContext<CPP14Parser::NamespacealiasdefinitionContext>(0);
}

CPP14Parser::UsingdeclarationContext* CPP14Parser::BlockdeclarationContext::usingdeclaration() {
  return getRuleContext<CPP14Parser::UsingdeclarationContext>(0);
}

CPP14Parser::UsingdirectiveContext* CPP14Parser::BlockdeclarationContext::usingdirective() {
  return getRuleContext<CPP14Parser::UsingdirectiveContext>(0);
}

CPP14Parser::Static_assertdeclarationContext* CPP14Parser::BlockdeclarationContext::static_assertdeclaration() {
  return getRuleContext<CPP14Parser::Static_assertdeclarationContext>(0);
}

CPP14Parser::AliasdeclarationContext* CPP14Parser::BlockdeclarationContext::aliasdeclaration() {
  return getRuleContext<CPP14Parser::AliasdeclarationContext>(0);
}

CPP14Parser::OpaqueenumdeclarationContext* CPP14Parser::BlockdeclarationContext::opaqueenumdeclaration() {
  return getRuleContext<CPP14Parser::OpaqueenumdeclarationContext>(0);
}


size_t CPP14Parser::BlockdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleBlockdeclaration;
}


CPP14Parser::BlockdeclarationContext* CPP14Parser::blockdeclaration() {
  BlockdeclarationContext *_localctx = _tracker.createInstance<BlockdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 120, CPP14Parser::RuleBlockdeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1197);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1189);
      simpledeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1190);
      asmdefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1191);
      namespacealiasdefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1192);
      usingdeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1193);
      usingdirective();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1194);
      static_assertdeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1195);
      aliasdeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1196);
      opaqueenumdeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasdeclarationContext ------------------------------------------------------------------

CPP14Parser::AliasdeclarationContext::AliasdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AliasdeclarationContext::Using() {
  return getToken(CPP14Parser::Using, 0);
}

tree::TerminalNode* CPP14Parser::AliasdeclarationContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::AliasdeclarationContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::AliasdeclarationContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::AliasdeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::AliasdeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::AliasdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleAliasdeclaration;
}


CPP14Parser::AliasdeclarationContext* CPP14Parser::aliasdeclaration() {
  AliasdeclarationContext *_localctx = _tracker.createInstance<AliasdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 122, CPP14Parser::RuleAliasdeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1199);
    match(CPP14Parser::Using);
    setState(1200);
    match(CPP14Parser::Identifier);
    setState(1202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
      setState(1201);
      attributespecifierseq(0);
    }
    setState(1204);
    match(CPP14Parser::Assign);
    setState(1205);
    typeid_();
    setState(1206);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpledeclarationContext ------------------------------------------------------------------

CPP14Parser::SimpledeclarationContext::SimpledeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::SimpledeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::SimpledeclarationContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}

CPP14Parser::InitdeclaratorlistContext* CPP14Parser::SimpledeclarationContext::initdeclaratorlist() {
  return getRuleContext<CPP14Parser::InitdeclaratorlistContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::SimpledeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::SimpledeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleSimpledeclaration;
}


CPP14Parser::SimpledeclarationContext* CPP14Parser::simpledeclaration() {
  SimpledeclarationContext *_localctx = _tracker.createInstance<SimpledeclarationContext>(_ctx, getState());
  enterRule(_localctx, 124, CPP14Parser::RuleSimpledeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1222);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Auto:
      case CPP14Parser::Bool:
      case CPP14Parser::Char:
      case CPP14Parser::Char16:
      case CPP14Parser::Char32:
      case CPP14Parser::Class:
      case CPP14Parser::Const:
      case CPP14Parser::Constexpr:
      case CPP14Parser::Decltype:
      case CPP14Parser::Double:
      case CPP14Parser::Enum:
      case CPP14Parser::Explicit:
      case CPP14Parser::Extern:
      case CPP14Parser::Float:
      case CPP14Parser::Friend:
      case CPP14Parser::Inline:
      case CPP14Parser::Int:
      case CPP14Parser::Long:
      case CPP14Parser::Mutable:
      case CPP14Parser::Operator:
      case CPP14Parser::Register:
      case CPP14Parser::Short:
      case CPP14Parser::Signed:
      case CPP14Parser::Static:
      case CPP14Parser::Struct:
      case CPP14Parser::Thread_local:
      case CPP14Parser::Typedef:
      case CPP14Parser::Typename:
      case CPP14Parser::Union:
      case CPP14Parser::Unsigned:
      case CPP14Parser::Virtual:
      case CPP14Parser::Void:
      case CPP14Parser::Volatile:
      case CPP14Parser::Wchar:
      case CPP14Parser::LeftParen:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::Tilde:
      case CPP14Parser::AndAnd:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Semi:
      case CPP14Parser::Ellipsis:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1209);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
        case 1: {
          setState(1208);
          declspecifierseq();
          break;
        }

        default:
          break;
        }
        setState(1212);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CPP14Parser::Decltype

        || _la == CPP14Parser::Operator || ((((_la - 78) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 78)) & 215512868999425) != 0)) {
          setState(1211);
          initdeclaratorlist(0);
        }
        setState(1214);
        match(CPP14Parser::Semi);
        break;
      }

      case CPP14Parser::Alignas:
      case CPP14Parser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(1215);
        attributespecifierseq(0);
        setState(1217);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(1216);
          declspecifierseq();
          break;
        }

        default:
          break;
        }
        setState(1219);
        initdeclaratorlist(0);
        setState(1220);
        match(CPP14Parser::Semi);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Static_assertdeclarationContext ------------------------------------------------------------------

CPP14Parser::Static_assertdeclarationContext::Static_assertdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::Static_assertdeclarationContext::Static_assert() {
  return getToken(CPP14Parser::Static_assert, 0);
}

tree::TerminalNode* CPP14Parser::Static_assertdeclarationContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::Static_assertdeclarationContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::Static_assertdeclarationContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}

tree::TerminalNode* CPP14Parser::Static_assertdeclarationContext::Stringliteral() {
  return getToken(CPP14Parser::Stringliteral, 0);
}

tree::TerminalNode* CPP14Parser::Static_assertdeclarationContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::Static_assertdeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}


size_t CPP14Parser::Static_assertdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleStatic_assertdeclaration;
}


CPP14Parser::Static_assertdeclarationContext* CPP14Parser::static_assertdeclaration() {
  Static_assertdeclarationContext *_localctx = _tracker.createInstance<Static_assertdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 126, CPP14Parser::RuleStatic_assertdeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    match(CPP14Parser::Static_assert);
    setState(1225);
    match(CPP14Parser::LeftParen);
    setState(1226);
    constantexpression();
    setState(1227);
    match(CPP14Parser::Comma);
    setState(1228);
    match(CPP14Parser::Stringliteral);
    setState(1229);
    match(CPP14Parser::RightParen);
    setState(1230);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptydeclarationContext ------------------------------------------------------------------

CPP14Parser::EmptydeclarationContext::EmptydeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::EmptydeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}


size_t CPP14Parser::EmptydeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleEmptydeclaration;
}


CPP14Parser::EmptydeclarationContext* CPP14Parser::emptydeclaration() {
  EmptydeclarationContext *_localctx = _tracker.createInstance<EmptydeclarationContext>(_ctx, getState());
  enterRule(_localctx, 128, CPP14Parser::RuleEmptydeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1232);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributedeclarationContext ------------------------------------------------------------------

CPP14Parser::AttributedeclarationContext::AttributedeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::AttributedeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::AttributedeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}


size_t CPP14Parser::AttributedeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributedeclaration;
}


CPP14Parser::AttributedeclarationContext* CPP14Parser::attributedeclaration() {
  AttributedeclarationContext *_localctx = _tracker.createInstance<AttributedeclarationContext>(_ctx, getState());
  enterRule(_localctx, 130, CPP14Parser::RuleAttributedeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    attributespecifierseq(0);
    setState(1235);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclspecifierContext ------------------------------------------------------------------

CPP14Parser::DeclspecifierContext::DeclspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::StorageclassspecifierContext* CPP14Parser::DeclspecifierContext::storageclassspecifier() {
  return getRuleContext<CPP14Parser::StorageclassspecifierContext>(0);
}

CPP14Parser::TypespecifierContext* CPP14Parser::DeclspecifierContext::typespecifier() {
  return getRuleContext<CPP14Parser::TypespecifierContext>(0);
}

CPP14Parser::FunctionspecifierContext* CPP14Parser::DeclspecifierContext::functionspecifier() {
  return getRuleContext<CPP14Parser::FunctionspecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::DeclspecifierContext::Friend() {
  return getToken(CPP14Parser::Friend, 0);
}

tree::TerminalNode* CPP14Parser::DeclspecifierContext::Typedef() {
  return getToken(CPP14Parser::Typedef, 0);
}

tree::TerminalNode* CPP14Parser::DeclspecifierContext::Constexpr() {
  return getToken(CPP14Parser::Constexpr, 0);
}


size_t CPP14Parser::DeclspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclspecifier;
}


CPP14Parser::DeclspecifierContext* CPP14Parser::declspecifier() {
  DeclspecifierContext *_localctx = _tracker.createInstance<DeclspecifierContext>(_ctx, getState());
  enterRule(_localctx, 132, CPP14Parser::RuleDeclspecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1243);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Extern:
      case CPP14Parser::Mutable:
      case CPP14Parser::Register:
      case CPP14Parser::Static:
      case CPP14Parser::Thread_local: {
        enterOuterAlt(_localctx, 1);
        setState(1237);
        storageclassspecifier();
        break;
      }

      case CPP14Parser::Auto:
      case CPP14Parser::Bool:
      case CPP14Parser::Char:
      case CPP14Parser::Char16:
      case CPP14Parser::Char32:
      case CPP14Parser::Class:
      case CPP14Parser::Const:
      case CPP14Parser::Decltype:
      case CPP14Parser::Double:
      case CPP14Parser::Enum:
      case CPP14Parser::Float:
      case CPP14Parser::Int:
      case CPP14Parser::Long:
      case CPP14Parser::Short:
      case CPP14Parser::Signed:
      case CPP14Parser::Struct:
      case CPP14Parser::Typename:
      case CPP14Parser::Union:
      case CPP14Parser::Unsigned:
      case CPP14Parser::Void:
      case CPP14Parser::Volatile:
      case CPP14Parser::Wchar:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(1238);
        typespecifier();
        break;
      }

      case CPP14Parser::Explicit:
      case CPP14Parser::Inline:
      case CPP14Parser::Virtual: {
        enterOuterAlt(_localctx, 3);
        setState(1239);
        functionspecifier();
        break;
      }

      case CPP14Parser::Friend: {
        enterOuterAlt(_localctx, 4);
        setState(1240);
        match(CPP14Parser::Friend);
        break;
      }

      case CPP14Parser::Typedef: {
        enterOuterAlt(_localctx, 5);
        setState(1241);
        match(CPP14Parser::Typedef);
        break;
      }

      case CPP14Parser::Constexpr: {
        enterOuterAlt(_localctx, 6);
        setState(1242);
        match(CPP14Parser::Constexpr);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclspecifierseqContext ------------------------------------------------------------------

CPP14Parser::DeclspecifierseqContext::DeclspecifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclspecifierContext* CPP14Parser::DeclspecifierseqContext::declspecifier() {
  return getRuleContext<CPP14Parser::DeclspecifierContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::DeclspecifierseqContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::DeclspecifierseqContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}


size_t CPP14Parser::DeclspecifierseqContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclspecifierseq;
}


CPP14Parser::DeclspecifierseqContext* CPP14Parser::declspecifierseq() {
  DeclspecifierseqContext *_localctx = _tracker.createInstance<DeclspecifierseqContext>(_ctx, getState());
  enterRule(_localctx, 134, CPP14Parser::RuleDeclspecifierseq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1252);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1245);
      declspecifier();
      setState(1247);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
      case 1: {
        setState(1246);
        attributespecifierseq(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1249);
      declspecifier();
      setState(1250);
      declspecifierseq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StorageclassspecifierContext ------------------------------------------------------------------

CPP14Parser::StorageclassspecifierContext::StorageclassspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::StorageclassspecifierContext::Register() {
  return getToken(CPP14Parser::Register, 0);
}

tree::TerminalNode* CPP14Parser::StorageclassspecifierContext::Static() {
  return getToken(CPP14Parser::Static, 0);
}

tree::TerminalNode* CPP14Parser::StorageclassspecifierContext::Thread_local() {
  return getToken(CPP14Parser::Thread_local, 0);
}

tree::TerminalNode* CPP14Parser::StorageclassspecifierContext::Extern() {
  return getToken(CPP14Parser::Extern, 0);
}

tree::TerminalNode* CPP14Parser::StorageclassspecifierContext::Mutable() {
  return getToken(CPP14Parser::Mutable, 0);
}


size_t CPP14Parser::StorageclassspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleStorageclassspecifier;
}


CPP14Parser::StorageclassspecifierContext* CPP14Parser::storageclassspecifier() {
  StorageclassspecifierContext *_localctx = _tracker.createInstance<StorageclassspecifierContext>(_ctx, getState());
  enterRule(_localctx, 136, CPP14Parser::RuleStorageclassspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1254);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9150187442861506560) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionspecifierContext ------------------------------------------------------------------

CPP14Parser::FunctionspecifierContext::FunctionspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::FunctionspecifierContext::Inline() {
  return getToken(CPP14Parser::Inline, 0);
}

tree::TerminalNode* CPP14Parser::FunctionspecifierContext::Virtual() {
  return getToken(CPP14Parser::Virtual, 0);
}

tree::TerminalNode* CPP14Parser::FunctionspecifierContext::Explicit() {
  return getToken(CPP14Parser::Explicit, 0);
}


size_t CPP14Parser::FunctionspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleFunctionspecifier;
}


CPP14Parser::FunctionspecifierContext* CPP14Parser::functionspecifier() {
  FunctionspecifierContext *_localctx = _tracker.createInstance<FunctionspecifierContext>(_ctx, getState());
  enterRule(_localctx, 138, CPP14Parser::RuleFunctionspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1256);
    _la = _input->LA(1);
    if (!(((((_la - 27) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 27)) & 70368744178689) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedefnameContext ------------------------------------------------------------------

CPP14Parser::TypedefnameContext::TypedefnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TypedefnameContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::TypedefnameContext::getRuleIndex() const {
  return CPP14Parser::RuleTypedefname;
}


CPP14Parser::TypedefnameContext* CPP14Parser::typedefname() {
  TypedefnameContext *_localctx = _tracker.createInstance<TypedefnameContext>(_ctx, getState());
  enterRule(_localctx, 140, CPP14Parser::RuleTypedefname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1258);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypespecifierContext ------------------------------------------------------------------

CPP14Parser::TypespecifierContext::TypespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TrailingtypespecifierContext* CPP14Parser::TypespecifierContext::trailingtypespecifier() {
  return getRuleContext<CPP14Parser::TrailingtypespecifierContext>(0);
}

CPP14Parser::ClassspecifierContext* CPP14Parser::TypespecifierContext::classspecifier() {
  return getRuleContext<CPP14Parser::ClassspecifierContext>(0);
}

CPP14Parser::EnumspecifierContext* CPP14Parser::TypespecifierContext::enumspecifier() {
  return getRuleContext<CPP14Parser::EnumspecifierContext>(0);
}


size_t CPP14Parser::TypespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleTypespecifier;
}


CPP14Parser::TypespecifierContext* CPP14Parser::typespecifier() {
  TypespecifierContext *_localctx = _tracker.createInstance<TypespecifierContext>(_ctx, getState());
  enterRule(_localctx, 142, CPP14Parser::RuleTypespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1263);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1260);
      trailingtypespecifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1261);
      classspecifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1262);
      enumspecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingtypespecifierContext ------------------------------------------------------------------

CPP14Parser::TrailingtypespecifierContext::TrailingtypespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::SimpletypespecifierContext* CPP14Parser::TrailingtypespecifierContext::simpletypespecifier() {
  return getRuleContext<CPP14Parser::SimpletypespecifierContext>(0);
}

CPP14Parser::ElaboratedtypespecifierContext* CPP14Parser::TrailingtypespecifierContext::elaboratedtypespecifier() {
  return getRuleContext<CPP14Parser::ElaboratedtypespecifierContext>(0);
}

CPP14Parser::TypenamespecifierContext* CPP14Parser::TrailingtypespecifierContext::typenamespecifier() {
  return getRuleContext<CPP14Parser::TypenamespecifierContext>(0);
}

CPP14Parser::CvqualifierContext* CPP14Parser::TrailingtypespecifierContext::cvqualifier() {
  return getRuleContext<CPP14Parser::CvqualifierContext>(0);
}


size_t CPP14Parser::TrailingtypespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleTrailingtypespecifier;
}


CPP14Parser::TrailingtypespecifierContext* CPP14Parser::trailingtypespecifier() {
  TrailingtypespecifierContext *_localctx = _tracker.createInstance<TrailingtypespecifierContext>(_ctx, getState());
  enterRule(_localctx, 144, CPP14Parser::RuleTrailingtypespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1269);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Auto:
      case CPP14Parser::Bool:
      case CPP14Parser::Char:
      case CPP14Parser::Char16:
      case CPP14Parser::Char32:
      case CPP14Parser::Decltype:
      case CPP14Parser::Double:
      case CPP14Parser::Float:
      case CPP14Parser::Int:
      case CPP14Parser::Long:
      case CPP14Parser::Short:
      case CPP14Parser::Signed:
      case CPP14Parser::Unsigned:
      case CPP14Parser::Void:
      case CPP14Parser::Wchar:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1265);
        simpletypespecifier();
        break;
      }

      case CPP14Parser::Class:
      case CPP14Parser::Enum:
      case CPP14Parser::Struct:
      case CPP14Parser::Union: {
        enterOuterAlt(_localctx, 2);
        setState(1266);
        elaboratedtypespecifier();
        break;
      }

      case CPP14Parser::Typename: {
        enterOuterAlt(_localctx, 3);
        setState(1267);
        typenamespecifier();
        break;
      }

      case CPP14Parser::Const:
      case CPP14Parser::Volatile: {
        enterOuterAlt(_localctx, 4);
        setState(1268);
        cvqualifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypespecifierseqContext ------------------------------------------------------------------

CPP14Parser::TypespecifierseqContext::TypespecifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypespecifierContext* CPP14Parser::TypespecifierseqContext::typespecifier() {
  return getRuleContext<CPP14Parser::TypespecifierContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::TypespecifierseqContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::TypespecifierseqContext* CPP14Parser::TypespecifierseqContext::typespecifierseq() {
  return getRuleContext<CPP14Parser::TypespecifierseqContext>(0);
}


size_t CPP14Parser::TypespecifierseqContext::getRuleIndex() const {
  return CPP14Parser::RuleTypespecifierseq;
}


CPP14Parser::TypespecifierseqContext* CPP14Parser::typespecifierseq() {
  TypespecifierseqContext *_localctx = _tracker.createInstance<TypespecifierseqContext>(_ctx, getState());
  enterRule(_localctx, 146, CPP14Parser::RuleTypespecifierseq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1271);
      typespecifier();
      setState(1273);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
      case 1: {
        setState(1272);
        attributespecifierseq(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1275);
      typespecifier();
      setState(1276);
      typespecifierseq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingtypespecifierseqContext ------------------------------------------------------------------

CPP14Parser::TrailingtypespecifierseqContext::TrailingtypespecifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TrailingtypespecifierContext* CPP14Parser::TrailingtypespecifierseqContext::trailingtypespecifier() {
  return getRuleContext<CPP14Parser::TrailingtypespecifierContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::TrailingtypespecifierseqContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::TrailingtypespecifierseqContext* CPP14Parser::TrailingtypespecifierseqContext::trailingtypespecifierseq() {
  return getRuleContext<CPP14Parser::TrailingtypespecifierseqContext>(0);
}


size_t CPP14Parser::TrailingtypespecifierseqContext::getRuleIndex() const {
  return CPP14Parser::RuleTrailingtypespecifierseq;
}


CPP14Parser::TrailingtypespecifierseqContext* CPP14Parser::trailingtypespecifierseq() {
  TrailingtypespecifierseqContext *_localctx = _tracker.createInstance<TrailingtypespecifierseqContext>(_ctx, getState());
  enterRule(_localctx, 148, CPP14Parser::RuleTrailingtypespecifierseq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1287);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1280);
      trailingtypespecifier();
      setState(1282);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
      case 1: {
        setState(1281);
        attributespecifierseq(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1284);
      trailingtypespecifier();
      setState(1285);
      trailingtypespecifierseq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpletypespecifierContext ------------------------------------------------------------------

CPP14Parser::SimpletypespecifierContext::SimpletypespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypenameContext* CPP14Parser::SimpletypespecifierContext::typename_() {
  return getRuleContext<CPP14Parser::TypenameContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::SimpletypespecifierContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::SimpletypespecifierContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Char() {
  return getToken(CPP14Parser::Char, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Char16() {
  return getToken(CPP14Parser::Char16, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Char32() {
  return getToken(CPP14Parser::Char32, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Wchar() {
  return getToken(CPP14Parser::Wchar, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Bool() {
  return getToken(CPP14Parser::Bool, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Short() {
  return getToken(CPP14Parser::Short, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Int() {
  return getToken(CPP14Parser::Int, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Long() {
  return getToken(CPP14Parser::Long, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Signed() {
  return getToken(CPP14Parser::Signed, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Unsigned() {
  return getToken(CPP14Parser::Unsigned, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Float() {
  return getToken(CPP14Parser::Float, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Double() {
  return getToken(CPP14Parser::Double, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Void() {
  return getToken(CPP14Parser::Void, 0);
}

tree::TerminalNode* CPP14Parser::SimpletypespecifierContext::Auto() {
  return getToken(CPP14Parser::Auto, 0);
}

CPP14Parser::DecltypespecifierContext* CPP14Parser::SimpletypespecifierContext::decltypespecifier() {
  return getRuleContext<CPP14Parser::DecltypespecifierContext>(0);
}


size_t CPP14Parser::SimpletypespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleSimpletypespecifier;
}


CPP14Parser::SimpletypespecifierContext* CPP14Parser::simpletypespecifier() {
  SimpletypespecifierContext *_localctx = _tracker.createInstance<SimpletypespecifierContext>(_ctx, getState());
  enterRule(_localctx, 150, CPP14Parser::RuleSimpletypespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1312);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1290);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
      case 1: {
        setState(1289);
        nestednamespecifier(0);
        break;
      }

      default:
        break;
      }
      setState(1292);
      typename_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1293);
      nestednamespecifier(0);
      setState(1294);
      match(CPP14Parser::Template);
      setState(1295);
      simpletemplateid();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1297);
      match(CPP14Parser::Char);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1298);
      match(CPP14Parser::Char16);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1299);
      match(CPP14Parser::Char32);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1300);
      match(CPP14Parser::Wchar);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1301);
      match(CPP14Parser::Bool);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1302);
      match(CPP14Parser::Short);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1303);
      match(CPP14Parser::Int);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1304);
      match(CPP14Parser::Long);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1305);
      match(CPP14Parser::Signed);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1306);
      match(CPP14Parser::Unsigned);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1307);
      match(CPP14Parser::Float);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1308);
      match(CPP14Parser::Double);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1309);
      match(CPP14Parser::Void);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1310);
      match(CPP14Parser::Auto);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1311);
      decltypespecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypenameContext ------------------------------------------------------------------

CPP14Parser::TypenameContext::TypenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClassnameContext* CPP14Parser::TypenameContext::classname() {
  return getRuleContext<CPP14Parser::ClassnameContext>(0);
}

CPP14Parser::EnumnameContext* CPP14Parser::TypenameContext::enumname() {
  return getRuleContext<CPP14Parser::EnumnameContext>(0);
}

CPP14Parser::TypedefnameContext* CPP14Parser::TypenameContext::typedefname() {
  return getRuleContext<CPP14Parser::TypedefnameContext>(0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::TypenameContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}


size_t CPP14Parser::TypenameContext::getRuleIndex() const {
  return CPP14Parser::RuleTypename;
}


CPP14Parser::TypenameContext* CPP14Parser::typename_() {
  TypenameContext *_localctx = _tracker.createInstance<TypenameContext>(_ctx, getState());
  enterRule(_localctx, 152, CPP14Parser::RuleTypename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1318);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1314);
      classname();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1315);
      enumname();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1316);
      typedefname();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1317);
      simpletemplateid();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecltypespecifierContext ------------------------------------------------------------------

CPP14Parser::DecltypespecifierContext::DecltypespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::DecltypespecifierContext::Decltype() {
  return getToken(CPP14Parser::Decltype, 0);
}

tree::TerminalNode* CPP14Parser::DecltypespecifierContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ExpressionContext* CPP14Parser::DecltypespecifierContext::expression() {
  return getRuleContext<CPP14Parser::ExpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::DecltypespecifierContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::DecltypespecifierContext::Auto() {
  return getToken(CPP14Parser::Auto, 0);
}


size_t CPP14Parser::DecltypespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleDecltypespecifier;
}


CPP14Parser::DecltypespecifierContext* CPP14Parser::decltypespecifier() {
  DecltypespecifierContext *_localctx = _tracker.createInstance<DecltypespecifierContext>(_ctx, getState());
  enterRule(_localctx, 154, CPP14Parser::RuleDecltypespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1329);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1320);
      match(CPP14Parser::Decltype);
      setState(1321);
      match(CPP14Parser::LeftParen);
      setState(1322);
      expression(0);
      setState(1323);
      match(CPP14Parser::RightParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1325);
      match(CPP14Parser::Decltype);
      setState(1326);
      match(CPP14Parser::LeftParen);
      setState(1327);
      match(CPP14Parser::Auto);
      setState(1328);
      match(CPP14Parser::RightParen);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElaboratedtypespecifierContext ------------------------------------------------------------------

CPP14Parser::ElaboratedtypespecifierContext::ElaboratedtypespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClasskeyContext* CPP14Parser::ElaboratedtypespecifierContext::classkey() {
  return getRuleContext<CPP14Parser::ClasskeyContext>(0);
}

tree::TerminalNode* CPP14Parser::ElaboratedtypespecifierContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ElaboratedtypespecifierContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::ElaboratedtypespecifierContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::ElaboratedtypespecifierContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}

tree::TerminalNode* CPP14Parser::ElaboratedtypespecifierContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

tree::TerminalNode* CPP14Parser::ElaboratedtypespecifierContext::Enum() {
  return getToken(CPP14Parser::Enum, 0);
}


size_t CPP14Parser::ElaboratedtypespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleElaboratedtypespecifier;
}


CPP14Parser::ElaboratedtypespecifierContext* CPP14Parser::elaboratedtypespecifier() {
  ElaboratedtypespecifierContext *_localctx = _tracker.createInstance<ElaboratedtypespecifierContext>(_ctx, getState());
  enterRule(_localctx, 156, CPP14Parser::RuleElaboratedtypespecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1355);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1331);
      classkey();
      setState(1333);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1332);
        attributespecifierseq(0);
      }
      setState(1336);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
      case 1: {
        setState(1335);
        nestednamespecifier(0);
        break;
      }

      default:
        break;
      }
      setState(1338);
      match(CPP14Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1340);
      classkey();
      setState(1341);
      simpletemplateid();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1343);
      classkey();
      setState(1344);
      nestednamespecifier(0);
      setState(1346);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Template) {
        setState(1345);
        match(CPP14Parser::Template);
      }
      setState(1348);
      simpletemplateid();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1350);
      match(CPP14Parser::Enum);
      setState(1352);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(1351);
        nestednamespecifier(0);
        break;
      }

      default:
        break;
      }
      setState(1354);
      match(CPP14Parser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumnameContext ------------------------------------------------------------------

CPP14Parser::EnumnameContext::EnumnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::EnumnameContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::EnumnameContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumname;
}


CPP14Parser::EnumnameContext* CPP14Parser::enumname() {
  EnumnameContext *_localctx = _tracker.createInstance<EnumnameContext>(_ctx, getState());
  enterRule(_localctx, 158, CPP14Parser::RuleEnumname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumspecifierContext ------------------------------------------------------------------

CPP14Parser::EnumspecifierContext::EnumspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::EnumheadContext* CPP14Parser::EnumspecifierContext::enumhead() {
  return getRuleContext<CPP14Parser::EnumheadContext>(0);
}

tree::TerminalNode* CPP14Parser::EnumspecifierContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

tree::TerminalNode* CPP14Parser::EnumspecifierContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

CPP14Parser::EnumeratorlistContext* CPP14Parser::EnumspecifierContext::enumeratorlist() {
  return getRuleContext<CPP14Parser::EnumeratorlistContext>(0);
}

tree::TerminalNode* CPP14Parser::EnumspecifierContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::EnumspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumspecifier;
}


CPP14Parser::EnumspecifierContext* CPP14Parser::enumspecifier() {
  EnumspecifierContext *_localctx = _tracker.createInstance<EnumspecifierContext>(_ctx, getState());
  enterRule(_localctx, 160, CPP14Parser::RuleEnumspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1372);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1359);
      enumhead();
      setState(1360);
      match(CPP14Parser::LeftBrace);
      setState(1362);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Identifier) {
        setState(1361);
        enumeratorlist(0);
      }
      setState(1364);
      match(CPP14Parser::RightBrace);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1366);
      enumhead();
      setState(1367);
      match(CPP14Parser::LeftBrace);
      setState(1368);
      enumeratorlist(0);
      setState(1369);
      match(CPP14Parser::Comma);
      setState(1370);
      match(CPP14Parser::RightBrace);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumheadContext ------------------------------------------------------------------

CPP14Parser::EnumheadContext::EnumheadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::EnumkeyContext* CPP14Parser::EnumheadContext::enumkey() {
  return getRuleContext<CPP14Parser::EnumkeyContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::EnumheadContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::EnumheadContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::EnumbaseContext* CPP14Parser::EnumheadContext::enumbase() {
  return getRuleContext<CPP14Parser::EnumbaseContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::EnumheadContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}


size_t CPP14Parser::EnumheadContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumhead;
}


CPP14Parser::EnumheadContext* CPP14Parser::enumhead() {
  EnumheadContext *_localctx = _tracker.createInstance<EnumheadContext>(_ctx, getState());
  enterRule(_localctx, 162, CPP14Parser::RuleEnumhead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1393);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1374);
      enumkey();
      setState(1376);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1375);
        attributespecifierseq(0);
      }
      setState(1379);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Identifier) {
        setState(1378);
        match(CPP14Parser::Identifier);
      }
      setState(1382);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Colon) {
        setState(1381);
        enumbase();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1384);
      enumkey();
      setState(1386);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1385);
        attributespecifierseq(0);
      }
      setState(1388);
      nestednamespecifier(0);
      setState(1389);
      match(CPP14Parser::Identifier);
      setState(1391);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Colon) {
        setState(1390);
        enumbase();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpaqueenumdeclarationContext ------------------------------------------------------------------

CPP14Parser::OpaqueenumdeclarationContext::OpaqueenumdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::EnumkeyContext* CPP14Parser::OpaqueenumdeclarationContext::enumkey() {
  return getRuleContext<CPP14Parser::EnumkeyContext>(0);
}

tree::TerminalNode* CPP14Parser::OpaqueenumdeclarationContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::OpaqueenumdeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::OpaqueenumdeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::EnumbaseContext* CPP14Parser::OpaqueenumdeclarationContext::enumbase() {
  return getRuleContext<CPP14Parser::EnumbaseContext>(0);
}


size_t CPP14Parser::OpaqueenumdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleOpaqueenumdeclaration;
}


CPP14Parser::OpaqueenumdeclarationContext* CPP14Parser::opaqueenumdeclaration() {
  OpaqueenumdeclarationContext *_localctx = _tracker.createInstance<OpaqueenumdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 164, CPP14Parser::RuleOpaqueenumdeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1395);
    enumkey();
    setState(1397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
      setState(1396);
      attributespecifierseq(0);
    }
    setState(1399);
    match(CPP14Parser::Identifier);
    setState(1401);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Colon) {
      setState(1400);
      enumbase();
    }
    setState(1403);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumkeyContext ------------------------------------------------------------------

CPP14Parser::EnumkeyContext::EnumkeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::EnumkeyContext::Enum() {
  return getToken(CPP14Parser::Enum, 0);
}

tree::TerminalNode* CPP14Parser::EnumkeyContext::Class() {
  return getToken(CPP14Parser::Class, 0);
}

tree::TerminalNode* CPP14Parser::EnumkeyContext::Struct() {
  return getToken(CPP14Parser::Struct, 0);
}


size_t CPP14Parser::EnumkeyContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumkey;
}


CPP14Parser::EnumkeyContext* CPP14Parser::enumkey() {
  EnumkeyContext *_localctx = _tracker.createInstance<EnumkeyContext>(_ctx, getState());
  enterRule(_localctx, 166, CPP14Parser::RuleEnumkey);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1410);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1405);
      match(CPP14Parser::Enum);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1406);
      match(CPP14Parser::Enum);
      setState(1407);
      match(CPP14Parser::Class);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1408);
      match(CPP14Parser::Enum);
      setState(1409);
      match(CPP14Parser::Struct);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumbaseContext ------------------------------------------------------------------

CPP14Parser::EnumbaseContext::EnumbaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::EnumbaseContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::TypespecifierseqContext* CPP14Parser::EnumbaseContext::typespecifierseq() {
  return getRuleContext<CPP14Parser::TypespecifierseqContext>(0);
}


size_t CPP14Parser::EnumbaseContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumbase;
}


CPP14Parser::EnumbaseContext* CPP14Parser::enumbase() {
  EnumbaseContext *_localctx = _tracker.createInstance<EnumbaseContext>(_ctx, getState());
  enterRule(_localctx, 168, CPP14Parser::RuleEnumbase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1412);
    match(CPP14Parser::Colon);
    setState(1413);
    typespecifierseq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorlistContext ------------------------------------------------------------------

CPP14Parser::EnumeratorlistContext::EnumeratorlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::EnumeratordefinitionContext* CPP14Parser::EnumeratorlistContext::enumeratordefinition() {
  return getRuleContext<CPP14Parser::EnumeratordefinitionContext>(0);
}

CPP14Parser::EnumeratorlistContext* CPP14Parser::EnumeratorlistContext::enumeratorlist() {
  return getRuleContext<CPP14Parser::EnumeratorlistContext>(0);
}

tree::TerminalNode* CPP14Parser::EnumeratorlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::EnumeratorlistContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumeratorlist;
}



CPP14Parser::EnumeratorlistContext* CPP14Parser::enumeratorlist() {
   return enumeratorlist(0);
}

CPP14Parser::EnumeratorlistContext* CPP14Parser::enumeratorlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::EnumeratorlistContext *_localctx = _tracker.createInstance<EnumeratorlistContext>(_ctx, parentState);
  CPP14Parser::EnumeratorlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 170;
  enterRecursionRule(_localctx, 170, CPP14Parser::RuleEnumeratorlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1416);
    enumeratordefinition();
    _ctx->stop = _input->LT(-1);
    setState(1423);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<EnumeratorlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleEnumeratorlist);
        setState(1418);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1419);
        match(CPP14Parser::Comma);
        setState(1420);
        enumeratordefinition(); 
      }
      setState(1425);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EnumeratordefinitionContext ------------------------------------------------------------------

CPP14Parser::EnumeratordefinitionContext::EnumeratordefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::EnumeratorContext* CPP14Parser::EnumeratordefinitionContext::enumerator() {
  return getRuleContext<CPP14Parser::EnumeratorContext>(0);
}

tree::TerminalNode* CPP14Parser::EnumeratordefinitionContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::EnumeratordefinitionContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}


size_t CPP14Parser::EnumeratordefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumeratordefinition;
}


CPP14Parser::EnumeratordefinitionContext* CPP14Parser::enumeratordefinition() {
  EnumeratordefinitionContext *_localctx = _tracker.createInstance<EnumeratordefinitionContext>(_ctx, getState());
  enterRule(_localctx, 172, CPP14Parser::RuleEnumeratordefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1426);
      enumerator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1427);
      enumerator();
      setState(1428);
      match(CPP14Parser::Assign);
      setState(1429);
      constantexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorContext ------------------------------------------------------------------

CPP14Parser::EnumeratorContext::EnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::EnumeratorContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::EnumeratorContext::getRuleIndex() const {
  return CPP14Parser::RuleEnumerator;
}


CPP14Parser::EnumeratorContext* CPP14Parser::enumerator() {
  EnumeratorContext *_localctx = _tracker.createInstance<EnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 174, CPP14Parser::RuleEnumerator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1433);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacenameContext ------------------------------------------------------------------

CPP14Parser::NamespacenameContext::NamespacenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::OriginalnamespacenameContext* CPP14Parser::NamespacenameContext::originalnamespacename() {
  return getRuleContext<CPP14Parser::OriginalnamespacenameContext>(0);
}

CPP14Parser::NamespacealiasContext* CPP14Parser::NamespacenameContext::namespacealias() {
  return getRuleContext<CPP14Parser::NamespacealiasContext>(0);
}


size_t CPP14Parser::NamespacenameContext::getRuleIndex() const {
  return CPP14Parser::RuleNamespacename;
}


CPP14Parser::NamespacenameContext* CPP14Parser::namespacename() {
  NamespacenameContext *_localctx = _tracker.createInstance<NamespacenameContext>(_ctx, getState());
  enterRule(_localctx, 176, CPP14Parser::RuleNamespacename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1437);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1435);
      originalnamespacename();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1436);
      namespacealias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OriginalnamespacenameContext ------------------------------------------------------------------

CPP14Parser::OriginalnamespacenameContext::OriginalnamespacenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::OriginalnamespacenameContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::OriginalnamespacenameContext::getRuleIndex() const {
  return CPP14Parser::RuleOriginalnamespacename;
}


CPP14Parser::OriginalnamespacenameContext* CPP14Parser::originalnamespacename() {
  OriginalnamespacenameContext *_localctx = _tracker.createInstance<OriginalnamespacenameContext>(_ctx, getState());
  enterRule(_localctx, 178, CPP14Parser::RuleOriginalnamespacename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1439);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacedefinitionContext ------------------------------------------------------------------

CPP14Parser::NamespacedefinitionContext::NamespacedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::NamednamespacedefinitionContext* CPP14Parser::NamespacedefinitionContext::namednamespacedefinition() {
  return getRuleContext<CPP14Parser::NamednamespacedefinitionContext>(0);
}

CPP14Parser::UnnamednamespacedefinitionContext* CPP14Parser::NamespacedefinitionContext::unnamednamespacedefinition() {
  return getRuleContext<CPP14Parser::UnnamednamespacedefinitionContext>(0);
}


size_t CPP14Parser::NamespacedefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleNamespacedefinition;
}


CPP14Parser::NamespacedefinitionContext* CPP14Parser::namespacedefinition() {
  NamespacedefinitionContext *_localctx = _tracker.createInstance<NamespacedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 180, CPP14Parser::RuleNamespacedefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1443);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1441);
      namednamespacedefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1442);
      unnamednamespacedefinition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamednamespacedefinitionContext ------------------------------------------------------------------

CPP14Parser::NamednamespacedefinitionContext::NamednamespacedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::OriginalnamespacedefinitionContext* CPP14Parser::NamednamespacedefinitionContext::originalnamespacedefinition() {
  return getRuleContext<CPP14Parser::OriginalnamespacedefinitionContext>(0);
}

CPP14Parser::ExtensionnamespacedefinitionContext* CPP14Parser::NamednamespacedefinitionContext::extensionnamespacedefinition() {
  return getRuleContext<CPP14Parser::ExtensionnamespacedefinitionContext>(0);
}


size_t CPP14Parser::NamednamespacedefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleNamednamespacedefinition;
}


CPP14Parser::NamednamespacedefinitionContext* CPP14Parser::namednamespacedefinition() {
  NamednamespacedefinitionContext *_localctx = _tracker.createInstance<NamednamespacedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 182, CPP14Parser::RuleNamednamespacedefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1447);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1445);
      originalnamespacedefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1446);
      extensionnamespacedefinition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OriginalnamespacedefinitionContext ------------------------------------------------------------------

CPP14Parser::OriginalnamespacedefinitionContext::OriginalnamespacedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::OriginalnamespacedefinitionContext::Namespace() {
  return getToken(CPP14Parser::Namespace, 0);
}

tree::TerminalNode* CPP14Parser::OriginalnamespacedefinitionContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::OriginalnamespacedefinitionContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

CPP14Parser::NamespacebodyContext* CPP14Parser::OriginalnamespacedefinitionContext::namespacebody() {
  return getRuleContext<CPP14Parser::NamespacebodyContext>(0);
}

tree::TerminalNode* CPP14Parser::OriginalnamespacedefinitionContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

tree::TerminalNode* CPP14Parser::OriginalnamespacedefinitionContext::Inline() {
  return getToken(CPP14Parser::Inline, 0);
}


size_t CPP14Parser::OriginalnamespacedefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleOriginalnamespacedefinition;
}


CPP14Parser::OriginalnamespacedefinitionContext* CPP14Parser::originalnamespacedefinition() {
  OriginalnamespacedefinitionContext *_localctx = _tracker.createInstance<OriginalnamespacedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 184, CPP14Parser::RuleOriginalnamespacedefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Inline) {
      setState(1449);
      match(CPP14Parser::Inline);
    }
    setState(1452);
    match(CPP14Parser::Namespace);
    setState(1453);
    match(CPP14Parser::Identifier);
    setState(1454);
    match(CPP14Parser::LeftBrace);
    setState(1455);
    namespacebody();
    setState(1456);
    match(CPP14Parser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtensionnamespacedefinitionContext ------------------------------------------------------------------

CPP14Parser::ExtensionnamespacedefinitionContext::ExtensionnamespacedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ExtensionnamespacedefinitionContext::Namespace() {
  return getToken(CPP14Parser::Namespace, 0);
}

CPP14Parser::OriginalnamespacenameContext* CPP14Parser::ExtensionnamespacedefinitionContext::originalnamespacename() {
  return getRuleContext<CPP14Parser::OriginalnamespacenameContext>(0);
}

tree::TerminalNode* CPP14Parser::ExtensionnamespacedefinitionContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

CPP14Parser::NamespacebodyContext* CPP14Parser::ExtensionnamespacedefinitionContext::namespacebody() {
  return getRuleContext<CPP14Parser::NamespacebodyContext>(0);
}

tree::TerminalNode* CPP14Parser::ExtensionnamespacedefinitionContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

tree::TerminalNode* CPP14Parser::ExtensionnamespacedefinitionContext::Inline() {
  return getToken(CPP14Parser::Inline, 0);
}


size_t CPP14Parser::ExtensionnamespacedefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleExtensionnamespacedefinition;
}


CPP14Parser::ExtensionnamespacedefinitionContext* CPP14Parser::extensionnamespacedefinition() {
  ExtensionnamespacedefinitionContext *_localctx = _tracker.createInstance<ExtensionnamespacedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 186, CPP14Parser::RuleExtensionnamespacedefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Inline) {
      setState(1458);
      match(CPP14Parser::Inline);
    }
    setState(1461);
    match(CPP14Parser::Namespace);
    setState(1462);
    originalnamespacename();
    setState(1463);
    match(CPP14Parser::LeftBrace);
    setState(1464);
    namespacebody();
    setState(1465);
    match(CPP14Parser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnnamednamespacedefinitionContext ------------------------------------------------------------------

CPP14Parser::UnnamednamespacedefinitionContext::UnnamednamespacedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::UnnamednamespacedefinitionContext::Namespace() {
  return getToken(CPP14Parser::Namespace, 0);
}

tree::TerminalNode* CPP14Parser::UnnamednamespacedefinitionContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

CPP14Parser::NamespacebodyContext* CPP14Parser::UnnamednamespacedefinitionContext::namespacebody() {
  return getRuleContext<CPP14Parser::NamespacebodyContext>(0);
}

tree::TerminalNode* CPP14Parser::UnnamednamespacedefinitionContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

tree::TerminalNode* CPP14Parser::UnnamednamespacedefinitionContext::Inline() {
  return getToken(CPP14Parser::Inline, 0);
}


size_t CPP14Parser::UnnamednamespacedefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleUnnamednamespacedefinition;
}


CPP14Parser::UnnamednamespacedefinitionContext* CPP14Parser::unnamednamespacedefinition() {
  UnnamednamespacedefinitionContext *_localctx = _tracker.createInstance<UnnamednamespacedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 188, CPP14Parser::RuleUnnamednamespacedefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Inline) {
      setState(1467);
      match(CPP14Parser::Inline);
    }
    setState(1470);
    match(CPP14Parser::Namespace);
    setState(1471);
    match(CPP14Parser::LeftBrace);
    setState(1472);
    namespacebody();
    setState(1473);
    match(CPP14Parser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacebodyContext ------------------------------------------------------------------

CPP14Parser::NamespacebodyContext::NamespacebodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclarationseqContext* CPP14Parser::NamespacebodyContext::declarationseq() {
  return getRuleContext<CPP14Parser::DeclarationseqContext>(0);
}


size_t CPP14Parser::NamespacebodyContext::getRuleIndex() const {
  return CPP14Parser::RuleNamespacebody;
}


CPP14Parser::NamespacebodyContext* CPP14Parser::namespacebody() {
  NamespacebodyContext *_localctx = _tracker.createInstance<NamespacebodyContext>(_ctx, getState());
  enterRule(_localctx, 190, CPP14Parser::RuleNamespacebody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6096708528351086360) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 459384754220313597) != 0)) {
      setState(1475);
      declarationseq(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacealiasContext ------------------------------------------------------------------

CPP14Parser::NamespacealiasContext::NamespacealiasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NamespacealiasContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::NamespacealiasContext::getRuleIndex() const {
  return CPP14Parser::RuleNamespacealias;
}


CPP14Parser::NamespacealiasContext* CPP14Parser::namespacealias() {
  NamespacealiasContext *_localctx = _tracker.createInstance<NamespacealiasContext>(_ctx, getState());
  enterRule(_localctx, 192, CPP14Parser::RuleNamespacealias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1478);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespacealiasdefinitionContext ------------------------------------------------------------------

CPP14Parser::NamespacealiasdefinitionContext::NamespacealiasdefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NamespacealiasdefinitionContext::Namespace() {
  return getToken(CPP14Parser::Namespace, 0);
}

tree::TerminalNode* CPP14Parser::NamespacealiasdefinitionContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::NamespacealiasdefinitionContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::QualifiednamespacespecifierContext* CPP14Parser::NamespacealiasdefinitionContext::qualifiednamespacespecifier() {
  return getRuleContext<CPP14Parser::QualifiednamespacespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::NamespacealiasdefinitionContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}


size_t CPP14Parser::NamespacealiasdefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleNamespacealiasdefinition;
}


CPP14Parser::NamespacealiasdefinitionContext* CPP14Parser::namespacealiasdefinition() {
  NamespacealiasdefinitionContext *_localctx = _tracker.createInstance<NamespacealiasdefinitionContext>(_ctx, getState());
  enterRule(_localctx, 194, CPP14Parser::RuleNamespacealiasdefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1480);
    match(CPP14Parser::Namespace);
    setState(1481);
    match(CPP14Parser::Identifier);
    setState(1482);
    match(CPP14Parser::Assign);
    setState(1483);
    qualifiednamespacespecifier();
    setState(1484);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiednamespacespecifierContext ------------------------------------------------------------------

CPP14Parser::QualifiednamespacespecifierContext::QualifiednamespacespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::NamespacenameContext* CPP14Parser::QualifiednamespacespecifierContext::namespacename() {
  return getRuleContext<CPP14Parser::NamespacenameContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::QualifiednamespacespecifierContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}


size_t CPP14Parser::QualifiednamespacespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleQualifiednamespacespecifier;
}


CPP14Parser::QualifiednamespacespecifierContext* CPP14Parser::qualifiednamespacespecifier() {
  QualifiednamespacespecifierContext *_localctx = _tracker.createInstance<QualifiednamespacespecifierContext>(_ctx, getState());
  enterRule(_localctx, 196, CPP14Parser::RuleQualifiednamespacespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1487);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      setState(1486);
      nestednamespecifier(0);
      break;
    }

    default:
      break;
    }
    setState(1489);
    namespacename();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsingdeclarationContext ------------------------------------------------------------------

CPP14Parser::UsingdeclarationContext::UsingdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::UsingdeclarationContext::Using() {
  return getToken(CPP14Parser::Using, 0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::UsingdeclarationContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

CPP14Parser::UnqualifiedidContext* CPP14Parser::UsingdeclarationContext::unqualifiedid() {
  return getRuleContext<CPP14Parser::UnqualifiedidContext>(0);
}

tree::TerminalNode* CPP14Parser::UsingdeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

tree::TerminalNode* CPP14Parser::UsingdeclarationContext::Typename() {
  return getToken(CPP14Parser::Typename, 0);
}

tree::TerminalNode* CPP14Parser::UsingdeclarationContext::Doublecolon() {
  return getToken(CPP14Parser::Doublecolon, 0);
}


size_t CPP14Parser::UsingdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleUsingdeclaration;
}


CPP14Parser::UsingdeclarationContext* CPP14Parser::usingdeclaration() {
  UsingdeclarationContext *_localctx = _tracker.createInstance<UsingdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 198, CPP14Parser::RuleUsingdeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1491);
      match(CPP14Parser::Using);
      setState(1493);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Typename) {
        setState(1492);
        match(CPP14Parser::Typename);
      }
      setState(1495);
      nestednamespecifier(0);
      setState(1496);
      unqualifiedid();
      setState(1497);
      match(CPP14Parser::Semi);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1499);
      match(CPP14Parser::Using);
      setState(1500);
      match(CPP14Parser::Doublecolon);
      setState(1501);
      unqualifiedid();
      setState(1502);
      match(CPP14Parser::Semi);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsingdirectiveContext ------------------------------------------------------------------

CPP14Parser::UsingdirectiveContext::UsingdirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::UsingdirectiveContext::Using() {
  return getToken(CPP14Parser::Using, 0);
}

tree::TerminalNode* CPP14Parser::UsingdirectiveContext::Namespace() {
  return getToken(CPP14Parser::Namespace, 0);
}

CPP14Parser::NamespacenameContext* CPP14Parser::UsingdirectiveContext::namespacename() {
  return getRuleContext<CPP14Parser::NamespacenameContext>(0);
}

tree::TerminalNode* CPP14Parser::UsingdirectiveContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::UsingdirectiveContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::UsingdirectiveContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}


size_t CPP14Parser::UsingdirectiveContext::getRuleIndex() const {
  return CPP14Parser::RuleUsingdirective;
}


CPP14Parser::UsingdirectiveContext* CPP14Parser::usingdirective() {
  UsingdirectiveContext *_localctx = _tracker.createInstance<UsingdirectiveContext>(_ctx, getState());
  enterRule(_localctx, 200, CPP14Parser::RuleUsingdirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
      setState(1506);
      attributespecifierseq(0);
    }
    setState(1509);
    match(CPP14Parser::Using);
    setState(1510);
    match(CPP14Parser::Namespace);
    setState(1512);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      setState(1511);
      nestednamespecifier(0);
      break;
    }

    default:
      break;
    }
    setState(1514);
    namespacename();
    setState(1515);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsmdefinitionContext ------------------------------------------------------------------

CPP14Parser::AsmdefinitionContext::AsmdefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AsmdefinitionContext::Asm() {
  return getToken(CPP14Parser::Asm, 0);
}

tree::TerminalNode* CPP14Parser::AsmdefinitionContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

tree::TerminalNode* CPP14Parser::AsmdefinitionContext::Stringliteral() {
  return getToken(CPP14Parser::Stringliteral, 0);
}

tree::TerminalNode* CPP14Parser::AsmdefinitionContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::AsmdefinitionContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}


size_t CPP14Parser::AsmdefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleAsmdefinition;
}


CPP14Parser::AsmdefinitionContext* CPP14Parser::asmdefinition() {
  AsmdefinitionContext *_localctx = _tracker.createInstance<AsmdefinitionContext>(_ctx, getState());
  enterRule(_localctx, 202, CPP14Parser::RuleAsmdefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1517);
    match(CPP14Parser::Asm);
    setState(1518);
    match(CPP14Parser::LeftParen);
    setState(1519);
    match(CPP14Parser::Stringliteral);
    setState(1520);
    match(CPP14Parser::RightParen);
    setState(1521);
    match(CPP14Parser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkagespecificationContext ------------------------------------------------------------------

CPP14Parser::LinkagespecificationContext::LinkagespecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::LinkagespecificationContext::Extern() {
  return getToken(CPP14Parser::Extern, 0);
}

tree::TerminalNode* CPP14Parser::LinkagespecificationContext::Stringliteral() {
  return getToken(CPP14Parser::Stringliteral, 0);
}

tree::TerminalNode* CPP14Parser::LinkagespecificationContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

tree::TerminalNode* CPP14Parser::LinkagespecificationContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

CPP14Parser::DeclarationseqContext* CPP14Parser::LinkagespecificationContext::declarationseq() {
  return getRuleContext<CPP14Parser::DeclarationseqContext>(0);
}

CPP14Parser::DeclarationContext* CPP14Parser::LinkagespecificationContext::declaration() {
  return getRuleContext<CPP14Parser::DeclarationContext>(0);
}


size_t CPP14Parser::LinkagespecificationContext::getRuleIndex() const {
  return CPP14Parser::RuleLinkagespecification;
}


CPP14Parser::LinkagespecificationContext* CPP14Parser::linkagespecification() {
  LinkagespecificationContext *_localctx = _tracker.createInstance<LinkagespecificationContext>(_ctx, getState());
  enterRule(_localctx, 204, CPP14Parser::RuleLinkagespecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1533);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1523);
      match(CPP14Parser::Extern);
      setState(1524);
      match(CPP14Parser::Stringliteral);
      setState(1525);
      match(CPP14Parser::LeftBrace);
      setState(1527);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -6096708528351086360) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 459384754220313597) != 0)) {
        setState(1526);
        declarationseq(0);
      }
      setState(1529);
      match(CPP14Parser::RightBrace);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1530);
      match(CPP14Parser::Extern);
      setState(1531);
      match(CPP14Parser::Stringliteral);
      setState(1532);
      declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributespecifierseqContext ------------------------------------------------------------------

CPP14Parser::AttributespecifierseqContext::AttributespecifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AttributespecifierContext* CPP14Parser::AttributespecifierseqContext::attributespecifier() {
  return getRuleContext<CPP14Parser::AttributespecifierContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::AttributespecifierseqContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::AttributespecifierseqContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributespecifierseq;
}



CPP14Parser::AttributespecifierseqContext* CPP14Parser::attributespecifierseq() {
   return attributespecifierseq(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::attributespecifierseq(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::AttributespecifierseqContext *_localctx = _tracker.createInstance<AttributespecifierseqContext>(_ctx, parentState);
  CPP14Parser::AttributespecifierseqContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 206;
  enterRecursionRule(_localctx, 206, CPP14Parser::RuleAttributespecifierseq, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1536);
    attributespecifier();
    _ctx->stop = _input->LT(-1);
    setState(1542);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AttributespecifierseqContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAttributespecifierseq);
        setState(1538);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1539);
        attributespecifier(); 
      }
      setState(1544);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AttributespecifierContext ------------------------------------------------------------------

CPP14Parser::AttributespecifierContext::AttributespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CPP14Parser::AttributespecifierContext::LeftBracket() {
  return getTokens(CPP14Parser::LeftBracket);
}

tree::TerminalNode* CPP14Parser::AttributespecifierContext::LeftBracket(size_t i) {
  return getToken(CPP14Parser::LeftBracket, i);
}

CPP14Parser::AttributelistContext* CPP14Parser::AttributespecifierContext::attributelist() {
  return getRuleContext<CPP14Parser::AttributelistContext>(0);
}

std::vector<tree::TerminalNode *> CPP14Parser::AttributespecifierContext::RightBracket() {
  return getTokens(CPP14Parser::RightBracket);
}

tree::TerminalNode* CPP14Parser::AttributespecifierContext::RightBracket(size_t i) {
  return getToken(CPP14Parser::RightBracket, i);
}

CPP14Parser::AlignmentspecifierContext* CPP14Parser::AttributespecifierContext::alignmentspecifier() {
  return getRuleContext<CPP14Parser::AlignmentspecifierContext>(0);
}


size_t CPP14Parser::AttributespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributespecifier;
}


CPP14Parser::AttributespecifierContext* CPP14Parser::attributespecifier() {
  AttributespecifierContext *_localctx = _tracker.createInstance<AttributespecifierContext>(_ctx, getState());
  enterRule(_localctx, 208, CPP14Parser::RuleAttributespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1552);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::LeftBracket: {
        enterOuterAlt(_localctx, 1);
        setState(1545);
        match(CPP14Parser::LeftBracket);
        setState(1546);
        match(CPP14Parser::LeftBracket);
        setState(1547);
        attributelist(0);
        setState(1548);
        match(CPP14Parser::RightBracket);
        setState(1549);
        match(CPP14Parser::RightBracket);
        break;
      }

      case CPP14Parser::Alignas: {
        enterOuterAlt(_localctx, 2);
        setState(1551);
        alignmentspecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignmentspecifierContext ------------------------------------------------------------------

CPP14Parser::AlignmentspecifierContext::AlignmentspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AlignmentspecifierContext::Alignas() {
  return getToken(CPP14Parser::Alignas, 0);
}

tree::TerminalNode* CPP14Parser::AlignmentspecifierContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::AlignmentspecifierContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::AlignmentspecifierContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::AlignmentspecifierContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::AlignmentspecifierContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}


size_t CPP14Parser::AlignmentspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleAlignmentspecifier;
}


CPP14Parser::AlignmentspecifierContext* CPP14Parser::alignmentspecifier() {
  AlignmentspecifierContext *_localctx = _tracker.createInstance<AlignmentspecifierContext>(_ctx, getState());
  enterRule(_localctx, 210, CPP14Parser::RuleAlignmentspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1570);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1554);
      match(CPP14Parser::Alignas);
      setState(1555);
      match(CPP14Parser::LeftParen);
      setState(1556);
      typeid_();
      setState(1558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Ellipsis) {
        setState(1557);
        match(CPP14Parser::Ellipsis);
      }
      setState(1560);
      match(CPP14Parser::RightParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1562);
      match(CPP14Parser::Alignas);
      setState(1563);
      match(CPP14Parser::LeftParen);
      setState(1564);
      constantexpression();
      setState(1566);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Ellipsis) {
        setState(1565);
        match(CPP14Parser::Ellipsis);
      }
      setState(1568);
      match(CPP14Parser::RightParen);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributelistContext ------------------------------------------------------------------

CPP14Parser::AttributelistContext::AttributelistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AttributeContext* CPP14Parser::AttributelistContext::attribute() {
  return getRuleContext<CPP14Parser::AttributeContext>(0);
}

tree::TerminalNode* CPP14Parser::AttributelistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::AttributelistContext* CPP14Parser::AttributelistContext::attributelist() {
  return getRuleContext<CPP14Parser::AttributelistContext>(0);
}

tree::TerminalNode* CPP14Parser::AttributelistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::AttributelistContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributelist;
}



CPP14Parser::AttributelistContext* CPP14Parser::attributelist() {
   return attributelist(0);
}

CPP14Parser::AttributelistContext* CPP14Parser::attributelist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::AttributelistContext *_localctx = _tracker.createInstance<AttributelistContext>(_ctx, parentState);
  CPP14Parser::AttributelistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 212;
  enterRecursionRule(_localctx, 212, CPP14Parser::RuleAttributelist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1579);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      setState(1574);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
      case 1: {
        setState(1573);
        attribute();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(1576);
      attribute();
      setState(1577);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1591);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<AttributelistContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAttributelist);
          setState(1581);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1582);
          match(CPP14Parser::Comma);
          setState(1584);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
          case 1: {
            setState(1583);
            attribute();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<AttributelistContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAttributelist);
          setState(1586);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1587);
          match(CPP14Parser::Comma);
          setState(1588);
          attribute();
          setState(1589);
          match(CPP14Parser::Ellipsis);
          break;
        }

        default:
          break;
        } 
      }
      setState(1595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

CPP14Parser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AttributetokenContext* CPP14Parser::AttributeContext::attributetoken() {
  return getRuleContext<CPP14Parser::AttributetokenContext>(0);
}

CPP14Parser::AttributeargumentclauseContext* CPP14Parser::AttributeContext::attributeargumentclause() {
  return getRuleContext<CPP14Parser::AttributeargumentclauseContext>(0);
}


size_t CPP14Parser::AttributeContext::getRuleIndex() const {
  return CPP14Parser::RuleAttribute;
}


CPP14Parser::AttributeContext* CPP14Parser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 214, CPP14Parser::RuleAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1596);
    attributetoken();
    setState(1598);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      setState(1597);
      attributeargumentclause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributetokenContext ------------------------------------------------------------------

CPP14Parser::AttributetokenContext::AttributetokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AttributetokenContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::AttributescopedtokenContext* CPP14Parser::AttributetokenContext::attributescopedtoken() {
  return getRuleContext<CPP14Parser::AttributescopedtokenContext>(0);
}


size_t CPP14Parser::AttributetokenContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributetoken;
}


CPP14Parser::AttributetokenContext* CPP14Parser::attributetoken() {
  AttributetokenContext *_localctx = _tracker.createInstance<AttributetokenContext>(_ctx, getState());
  enterRule(_localctx, 216, CPP14Parser::RuleAttributetoken);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1602);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1600);
      match(CPP14Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1601);
      attributescopedtoken();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributescopedtokenContext ------------------------------------------------------------------

CPP14Parser::AttributescopedtokenContext::AttributescopedtokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AttributenamespaceContext* CPP14Parser::AttributescopedtokenContext::attributenamespace() {
  return getRuleContext<CPP14Parser::AttributenamespaceContext>(0);
}

tree::TerminalNode* CPP14Parser::AttributescopedtokenContext::Doublecolon() {
  return getToken(CPP14Parser::Doublecolon, 0);
}

tree::TerminalNode* CPP14Parser::AttributescopedtokenContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::AttributescopedtokenContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributescopedtoken;
}


CPP14Parser::AttributescopedtokenContext* CPP14Parser::attributescopedtoken() {
  AttributescopedtokenContext *_localctx = _tracker.createInstance<AttributescopedtokenContext>(_ctx, getState());
  enterRule(_localctx, 218, CPP14Parser::RuleAttributescopedtoken);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1604);
    attributenamespace();
    setState(1605);
    match(CPP14Parser::Doublecolon);
    setState(1606);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributenamespaceContext ------------------------------------------------------------------

CPP14Parser::AttributenamespaceContext::AttributenamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AttributenamespaceContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::AttributenamespaceContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributenamespace;
}


CPP14Parser::AttributenamespaceContext* CPP14Parser::attributenamespace() {
  AttributenamespaceContext *_localctx = _tracker.createInstance<AttributenamespaceContext>(_ctx, getState());
  enterRule(_localctx, 220, CPP14Parser::RuleAttributenamespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeargumentclauseContext ------------------------------------------------------------------

CPP14Parser::AttributeargumentclauseContext::AttributeargumentclauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AttributeargumentclauseContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::BalancedtokenseqContext* CPP14Parser::AttributeargumentclauseContext::balancedtokenseq() {
  return getRuleContext<CPP14Parser::BalancedtokenseqContext>(0);
}

tree::TerminalNode* CPP14Parser::AttributeargumentclauseContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::AttributeargumentclauseContext::getRuleIndex() const {
  return CPP14Parser::RuleAttributeargumentclause;
}


CPP14Parser::AttributeargumentclauseContext* CPP14Parser::attributeargumentclause() {
  AttributeargumentclauseContext *_localctx = _tracker.createInstance<AttributeargumentclauseContext>(_ctx, getState());
  enterRule(_localctx, 222, CPP14Parser::RuleAttributeargumentclause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1610);
    match(CPP14Parser::LeftParen);
    setState(1611);
    balancedtokenseq(0);
    setState(1612);
    match(CPP14Parser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BalancedtokenseqContext ------------------------------------------------------------------

CPP14Parser::BalancedtokenseqContext::BalancedtokenseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::BalancedtokenContext* CPP14Parser::BalancedtokenseqContext::balancedtoken() {
  return getRuleContext<CPP14Parser::BalancedtokenContext>(0);
}

CPP14Parser::BalancedtokenseqContext* CPP14Parser::BalancedtokenseqContext::balancedtokenseq() {
  return getRuleContext<CPP14Parser::BalancedtokenseqContext>(0);
}


size_t CPP14Parser::BalancedtokenseqContext::getRuleIndex() const {
  return CPP14Parser::RuleBalancedtokenseq;
}



CPP14Parser::BalancedtokenseqContext* CPP14Parser::balancedtokenseq() {
   return balancedtokenseq(0);
}

CPP14Parser::BalancedtokenseqContext* CPP14Parser::balancedtokenseq(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::BalancedtokenseqContext *_localctx = _tracker.createInstance<BalancedtokenseqContext>(_ctx, parentState);
  CPP14Parser::BalancedtokenseqContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 224;
  enterRecursionRule(_localctx, 224, CPP14Parser::RuleBalancedtokenseq, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1616);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1615);
      balancedtoken();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1622);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BalancedtokenseqContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBalancedtokenseq);
        setState(1618);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1619);
        balancedtoken(); 
      }
      setState(1624);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BalancedtokenContext ------------------------------------------------------------------

CPP14Parser::BalancedtokenContext::BalancedtokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::BalancedtokenContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::BalancedtokenseqContext* CPP14Parser::BalancedtokenContext::balancedtokenseq() {
  return getRuleContext<CPP14Parser::BalancedtokenseqContext>(0);
}

tree::TerminalNode* CPP14Parser::BalancedtokenContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

tree::TerminalNode* CPP14Parser::BalancedtokenContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::BalancedtokenContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

tree::TerminalNode* CPP14Parser::BalancedtokenContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

tree::TerminalNode* CPP14Parser::BalancedtokenContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}


size_t CPP14Parser::BalancedtokenContext::getRuleIndex() const {
  return CPP14Parser::RuleBalancedtoken;
}


CPP14Parser::BalancedtokenContext* CPP14Parser::balancedtoken() {
  BalancedtokenContext *_localctx = _tracker.createInstance<BalancedtokenContext>(_ctx, getState());
  enterRule(_localctx, 226, CPP14Parser::RuleBalancedtoken);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1637);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::LeftParen: {
        enterOuterAlt(_localctx, 1);
        setState(1625);
        match(CPP14Parser::LeftParen);
        setState(1626);
        balancedtokenseq(0);
        setState(1627);
        match(CPP14Parser::RightParen);
        break;
      }

      case CPP14Parser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(1629);
        match(CPP14Parser::LeftBracket);
        setState(1630);
        balancedtokenseq(0);
        setState(1631);
        match(CPP14Parser::RightBracket);
        break;
      }

      case CPP14Parser::LeftBrace: {
        enterOuterAlt(_localctx, 3);
        setState(1633);
        match(CPP14Parser::LeftBrace);
        setState(1634);
        balancedtokenseq(0);
        setState(1635);
        match(CPP14Parser::RightBrace);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitdeclaratorlistContext ------------------------------------------------------------------

CPP14Parser::InitdeclaratorlistContext::InitdeclaratorlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::InitdeclaratorContext* CPP14Parser::InitdeclaratorlistContext::initdeclarator() {
  return getRuleContext<CPP14Parser::InitdeclaratorContext>(0);
}

CPP14Parser::InitdeclaratorlistContext* CPP14Parser::InitdeclaratorlistContext::initdeclaratorlist() {
  return getRuleContext<CPP14Parser::InitdeclaratorlistContext>(0);
}

tree::TerminalNode* CPP14Parser::InitdeclaratorlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::InitdeclaratorlistContext::getRuleIndex() const {
  return CPP14Parser::RuleInitdeclaratorlist;
}



CPP14Parser::InitdeclaratorlistContext* CPP14Parser::initdeclaratorlist() {
   return initdeclaratorlist(0);
}

CPP14Parser::InitdeclaratorlistContext* CPP14Parser::initdeclaratorlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::InitdeclaratorlistContext *_localctx = _tracker.createInstance<InitdeclaratorlistContext>(_ctx, parentState);
  CPP14Parser::InitdeclaratorlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 228;
  enterRecursionRule(_localctx, 228, CPP14Parser::RuleInitdeclaratorlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1640);
    initdeclarator();
    _ctx->stop = _input->LT(-1);
    setState(1647);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InitdeclaratorlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInitdeclaratorlist);
        setState(1642);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1643);
        match(CPP14Parser::Comma);
        setState(1644);
        initdeclarator(); 
      }
      setState(1649);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InitdeclaratorContext ------------------------------------------------------------------

CPP14Parser::InitdeclaratorContext::InitdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclaratorContext* CPP14Parser::InitdeclaratorContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

CPP14Parser::InitializerContext* CPP14Parser::InitdeclaratorContext::initializer() {
  return getRuleContext<CPP14Parser::InitializerContext>(0);
}


size_t CPP14Parser::InitdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleInitdeclarator;
}


CPP14Parser::InitdeclaratorContext* CPP14Parser::initdeclarator() {
  InitdeclaratorContext *_localctx = _tracker.createInstance<InitdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 230, CPP14Parser::RuleInitdeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1650);
    declarator();
    setState(1652);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1651);
      initializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorContext ------------------------------------------------------------------

CPP14Parser::DeclaratorContext::DeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PtrdeclaratorContext* CPP14Parser::DeclaratorContext::ptrdeclarator() {
  return getRuleContext<CPP14Parser::PtrdeclaratorContext>(0);
}

CPP14Parser::NoptrdeclaratorContext* CPP14Parser::DeclaratorContext::noptrdeclarator() {
  return getRuleContext<CPP14Parser::NoptrdeclaratorContext>(0);
}

CPP14Parser::ParametersandqualifiersContext* CPP14Parser::DeclaratorContext::parametersandqualifiers() {
  return getRuleContext<CPP14Parser::ParametersandqualifiersContext>(0);
}

CPP14Parser::TrailingreturntypeContext* CPP14Parser::DeclaratorContext::trailingreturntype() {
  return getRuleContext<CPP14Parser::TrailingreturntypeContext>(0);
}


size_t CPP14Parser::DeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclarator;
}


CPP14Parser::DeclaratorContext* CPP14Parser::declarator() {
  DeclaratorContext *_localctx = _tracker.createInstance<DeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 232, CPP14Parser::RuleDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1659);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1654);
      ptrdeclarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1655);
      noptrdeclarator(0);
      setState(1656);
      parametersandqualifiers();
      setState(1657);
      trailingreturntype();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtrdeclaratorContext ------------------------------------------------------------------

CPP14Parser::PtrdeclaratorContext::PtrdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::NoptrdeclaratorContext* CPP14Parser::PtrdeclaratorContext::noptrdeclarator() {
  return getRuleContext<CPP14Parser::NoptrdeclaratorContext>(0);
}

CPP14Parser::PtroperatorContext* CPP14Parser::PtrdeclaratorContext::ptroperator() {
  return getRuleContext<CPP14Parser::PtroperatorContext>(0);
}

CPP14Parser::PtrdeclaratorContext* CPP14Parser::PtrdeclaratorContext::ptrdeclarator() {
  return getRuleContext<CPP14Parser::PtrdeclaratorContext>(0);
}


size_t CPP14Parser::PtrdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RulePtrdeclarator;
}


CPP14Parser::PtrdeclaratorContext* CPP14Parser::ptrdeclarator() {
  PtrdeclaratorContext *_localctx = _tracker.createInstance<PtrdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 234, CPP14Parser::RulePtrdeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1665);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1661);
      noptrdeclarator(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1662);
      ptroperator();
      setState(1663);
      ptrdeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoptrdeclaratorContext ------------------------------------------------------------------

CPP14Parser::NoptrdeclaratorContext::NoptrdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclaratoridContext* CPP14Parser::NoptrdeclaratorContext::declaratorid() {
  return getRuleContext<CPP14Parser::DeclaratoridContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::NoptrdeclaratorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrdeclaratorContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::PtrdeclaratorContext* CPP14Parser::NoptrdeclaratorContext::ptrdeclarator() {
  return getRuleContext<CPP14Parser::PtrdeclaratorContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrdeclaratorContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::NoptrdeclaratorContext* CPP14Parser::NoptrdeclaratorContext::noptrdeclarator() {
  return getRuleContext<CPP14Parser::NoptrdeclaratorContext>(0);
}

CPP14Parser::ParametersandqualifiersContext* CPP14Parser::NoptrdeclaratorContext::parametersandqualifiers() {
  return getRuleContext<CPP14Parser::ParametersandqualifiersContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrdeclaratorContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::NoptrdeclaratorContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::NoptrdeclaratorContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}


size_t CPP14Parser::NoptrdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleNoptrdeclarator;
}



CPP14Parser::NoptrdeclaratorContext* CPP14Parser::noptrdeclarator() {
   return noptrdeclarator(0);
}

CPP14Parser::NoptrdeclaratorContext* CPP14Parser::noptrdeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::NoptrdeclaratorContext *_localctx = _tracker.createInstance<NoptrdeclaratorContext>(_ctx, parentState);
  CPP14Parser::NoptrdeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 236;
  enterRecursionRule(_localctx, 236, CPP14Parser::RuleNoptrdeclarator, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1676);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Decltype:
      case CPP14Parser::Operator:
      case CPP14Parser::Tilde:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Ellipsis:
      case CPP14Parser::Identifier: {
        setState(1668);
        declaratorid();
        setState(1670);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
        case 1: {
          setState(1669);
          attributespecifierseq(0);
          break;
        }

        default:
          break;
        }
        break;
      }

      case CPP14Parser::LeftParen: {
        setState(1672);
        match(CPP14Parser::LeftParen);
        setState(1673);
        ptrdeclarator();
        setState(1674);
        match(CPP14Parser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1691);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1689);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NoptrdeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNoptrdeclarator);
          setState(1678);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1679);
          parametersandqualifiers();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NoptrdeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNoptrdeclarator);
          setState(1680);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1681);
          match(CPP14Parser::LeftBracket);
          setState(1683);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 3495637736276666969) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 132)) & 127) != 0)) {
            setState(1682);
            constantexpression();
          }
          setState(1685);
          match(CPP14Parser::RightBracket);
          setState(1687);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
          case 1: {
            setState(1686);
            attributespecifierseq(0);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1693);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParametersandqualifiersContext ------------------------------------------------------------------

CPP14Parser::ParametersandqualifiersContext::ParametersandqualifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ParametersandqualifiersContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ParameterdeclarationclauseContext* CPP14Parser::ParametersandqualifiersContext::parameterdeclarationclause() {
  return getRuleContext<CPP14Parser::ParameterdeclarationclauseContext>(0);
}

tree::TerminalNode* CPP14Parser::ParametersandqualifiersContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::CvqualifierseqContext* CPP14Parser::ParametersandqualifiersContext::cvqualifierseq() {
  return getRuleContext<CPP14Parser::CvqualifierseqContext>(0);
}

CPP14Parser::RefqualifierContext* CPP14Parser::ParametersandqualifiersContext::refqualifier() {
  return getRuleContext<CPP14Parser::RefqualifierContext>(0);
}

CPP14Parser::ExceptionspecificationContext* CPP14Parser::ParametersandqualifiersContext::exceptionspecification() {
  return getRuleContext<CPP14Parser::ExceptionspecificationContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ParametersandqualifiersContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::ParametersandqualifiersContext::getRuleIndex() const {
  return CPP14Parser::RuleParametersandqualifiers;
}


CPP14Parser::ParametersandqualifiersContext* CPP14Parser::parametersandqualifiers() {
  ParametersandqualifiersContext *_localctx = _tracker.createInstance<ParametersandqualifiersContext>(_ctx, getState());
  enterRule(_localctx, 238, CPP14Parser::RuleParametersandqualifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1694);
    match(CPP14Parser::LeftParen);
    setState(1695);
    parameterdeclarationclause();
    setState(1696);
    match(CPP14Parser::RightParen);
    setState(1698);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(1697);
      cvqualifierseq();
      break;
    }

    default:
      break;
    }
    setState(1701);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1700);
      refqualifier();
      break;
    }

    default:
      break;
    }
    setState(1704);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1703);
      exceptionspecification();
      break;
    }

    default:
      break;
    }
    setState(1707);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      setState(1706);
      attributespecifierseq(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingreturntypeContext ------------------------------------------------------------------

CPP14Parser::TrailingreturntypeContext::TrailingreturntypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TrailingreturntypeContext::Arrow() {
  return getToken(CPP14Parser::Arrow, 0);
}

CPP14Parser::TrailingtypespecifierseqContext* CPP14Parser::TrailingreturntypeContext::trailingtypespecifierseq() {
  return getRuleContext<CPP14Parser::TrailingtypespecifierseqContext>(0);
}

CPP14Parser::AbstractdeclaratorContext* CPP14Parser::TrailingreturntypeContext::abstractdeclarator() {
  return getRuleContext<CPP14Parser::AbstractdeclaratorContext>(0);
}


size_t CPP14Parser::TrailingreturntypeContext::getRuleIndex() const {
  return CPP14Parser::RuleTrailingreturntype;
}


CPP14Parser::TrailingreturntypeContext* CPP14Parser::trailingreturntype() {
  TrailingreturntypeContext *_localctx = _tracker.createInstance<TrailingreturntypeContext>(_ctx, getState());
  enterRule(_localctx, 240, CPP14Parser::RuleTrailingreturntype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1709);
    match(CPP14Parser::Arrow);
    setState(1710);
    trailingtypespecifierseq();
    setState(1712);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      setState(1711);
      abstractdeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtroperatorContext ------------------------------------------------------------------

CPP14Parser::PtroperatorContext::PtroperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::PtroperatorContext::Star() {
  return getToken(CPP14Parser::Star, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::PtroperatorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::CvqualifierseqContext* CPP14Parser::PtroperatorContext::cvqualifierseq() {
  return getRuleContext<CPP14Parser::CvqualifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::PtroperatorContext::And() {
  return getToken(CPP14Parser::And, 0);
}

tree::TerminalNode* CPP14Parser::PtroperatorContext::AndAnd() {
  return getToken(CPP14Parser::AndAnd, 0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::PtroperatorContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}


size_t CPP14Parser::PtroperatorContext::getRuleIndex() const {
  return CPP14Parser::RulePtroperator;
}


CPP14Parser::PtroperatorContext* CPP14Parser::ptroperator() {
  PtroperatorContext *_localctx = _tracker.createInstance<PtroperatorContext>(_ctx, getState());
  enterRule(_localctx, 242, CPP14Parser::RulePtroperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1737);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Star: {
        enterOuterAlt(_localctx, 1);
        setState(1714);
        match(CPP14Parser::Star);
        setState(1716);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
        case 1: {
          setState(1715);
          attributespecifierseq(0);
          break;
        }

        default:
          break;
        }
        setState(1719);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
        case 1: {
          setState(1718);
          cvqualifierseq();
          break;
        }

        default:
          break;
        }
        break;
      }

      case CPP14Parser::And: {
        enterOuterAlt(_localctx, 2);
        setState(1721);
        match(CPP14Parser::And);
        setState(1723);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
        case 1: {
          setState(1722);
          attributespecifierseq(0);
          break;
        }

        default:
          break;
        }
        break;
      }

      case CPP14Parser::AndAnd: {
        enterOuterAlt(_localctx, 3);
        setState(1725);
        match(CPP14Parser::AndAnd);
        setState(1727);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
        case 1: {
          setState(1726);
          attributespecifierseq(0);
          break;
        }

        default:
          break;
        }
        break;
      }

      case CPP14Parser::Decltype:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 4);
        setState(1729);
        nestednamespecifier(0);
        setState(1730);
        match(CPP14Parser::Star);
        setState(1732);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
        case 1: {
          setState(1731);
          attributespecifierseq(0);
          break;
        }

        default:
          break;
        }
        setState(1735);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
        case 1: {
          setState(1734);
          cvqualifierseq();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvqualifierseqContext ------------------------------------------------------------------

CPP14Parser::CvqualifierseqContext::CvqualifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::CvqualifierContext* CPP14Parser::CvqualifierseqContext::cvqualifier() {
  return getRuleContext<CPP14Parser::CvqualifierContext>(0);
}

CPP14Parser::CvqualifierseqContext* CPP14Parser::CvqualifierseqContext::cvqualifierseq() {
  return getRuleContext<CPP14Parser::CvqualifierseqContext>(0);
}


size_t CPP14Parser::CvqualifierseqContext::getRuleIndex() const {
  return CPP14Parser::RuleCvqualifierseq;
}


CPP14Parser::CvqualifierseqContext* CPP14Parser::cvqualifierseq() {
  CvqualifierseqContext *_localctx = _tracker.createInstance<CvqualifierseqContext>(_ctx, getState());
  enterRule(_localctx, 244, CPP14Parser::RuleCvqualifierseq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1739);
    cvqualifier();
    setState(1741);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      setState(1740);
      cvqualifierseq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvqualifierContext ------------------------------------------------------------------

CPP14Parser::CvqualifierContext::CvqualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::CvqualifierContext::Const() {
  return getToken(CPP14Parser::Const, 0);
}

tree::TerminalNode* CPP14Parser::CvqualifierContext::Volatile() {
  return getToken(CPP14Parser::Volatile, 0);
}


size_t CPP14Parser::CvqualifierContext::getRuleIndex() const {
  return CPP14Parser::RuleCvqualifier;
}


CPP14Parser::CvqualifierContext* CPP14Parser::cvqualifier() {
  CvqualifierContext *_localctx = _tracker.createInstance<CvqualifierContext>(_ctx, getState());
  enterRule(_localctx, 246, CPP14Parser::RuleCvqualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1743);
    _la = _input->LA(1);
    if (!(_la == CPP14Parser::Const

    || _la == CPP14Parser::Volatile)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RefqualifierContext ------------------------------------------------------------------

CPP14Parser::RefqualifierContext::RefqualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::RefqualifierContext::And() {
  return getToken(CPP14Parser::And, 0);
}

tree::TerminalNode* CPP14Parser::RefqualifierContext::AndAnd() {
  return getToken(CPP14Parser::AndAnd, 0);
}


size_t CPP14Parser::RefqualifierContext::getRuleIndex() const {
  return CPP14Parser::RuleRefqualifier;
}


CPP14Parser::RefqualifierContext* CPP14Parser::refqualifier() {
  RefqualifierContext *_localctx = _tracker.createInstance<RefqualifierContext>(_ctx, getState());
  enterRule(_localctx, 248, CPP14Parser::RuleRefqualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1745);
    _la = _input->LA(1);
    if (!(_la == CPP14Parser::And

    || _la == CPP14Parser::AndAnd)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratoridContext ------------------------------------------------------------------

CPP14Parser::DeclaratoridContext::DeclaratoridContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::IdexpressionContext* CPP14Parser::DeclaratoridContext::idexpression() {
  return getRuleContext<CPP14Parser::IdexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::DeclaratoridContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}


size_t CPP14Parser::DeclaratoridContext::getRuleIndex() const {
  return CPP14Parser::RuleDeclaratorid;
}


CPP14Parser::DeclaratoridContext* CPP14Parser::declaratorid() {
  DeclaratoridContext *_localctx = _tracker.createInstance<DeclaratoridContext>(_ctx, getState());
  enterRule(_localctx, 250, CPP14Parser::RuleDeclaratorid);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Ellipsis) {
      setState(1747);
      match(CPP14Parser::Ellipsis);
    }
    setState(1750);
    idexpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeidContext ------------------------------------------------------------------

CPP14Parser::TypeidContext::TypeidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypespecifierseqContext* CPP14Parser::TypeidContext::typespecifierseq() {
  return getRuleContext<CPP14Parser::TypespecifierseqContext>(0);
}

CPP14Parser::AbstractdeclaratorContext* CPP14Parser::TypeidContext::abstractdeclarator() {
  return getRuleContext<CPP14Parser::AbstractdeclaratorContext>(0);
}


size_t CPP14Parser::TypeidContext::getRuleIndex() const {
  return CPP14Parser::RuleTypeid;
}


CPP14Parser::TypeidContext* CPP14Parser::typeid_() {
  TypeidContext *_localctx = _tracker.createInstance<TypeidContext>(_ctx, getState());
  enterRule(_localctx, 252, CPP14Parser::RuleTypeid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1752);
    typespecifierseq();
    setState(1754);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(1753);
      abstractdeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbstractdeclaratorContext ------------------------------------------------------------------

CPP14Parser::AbstractdeclaratorContext::AbstractdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PtrabstractdeclaratorContext* CPP14Parser::AbstractdeclaratorContext::ptrabstractdeclarator() {
  return getRuleContext<CPP14Parser::PtrabstractdeclaratorContext>(0);
}

CPP14Parser::ParametersandqualifiersContext* CPP14Parser::AbstractdeclaratorContext::parametersandqualifiers() {
  return getRuleContext<CPP14Parser::ParametersandqualifiersContext>(0);
}

CPP14Parser::TrailingreturntypeContext* CPP14Parser::AbstractdeclaratorContext::trailingreturntype() {
  return getRuleContext<CPP14Parser::TrailingreturntypeContext>(0);
}

CPP14Parser::NoptrabstractdeclaratorContext* CPP14Parser::AbstractdeclaratorContext::noptrabstractdeclarator() {
  return getRuleContext<CPP14Parser::NoptrabstractdeclaratorContext>(0);
}

CPP14Parser::AbstractpackdeclaratorContext* CPP14Parser::AbstractdeclaratorContext::abstractpackdeclarator() {
  return getRuleContext<CPP14Parser::AbstractpackdeclaratorContext>(0);
}


size_t CPP14Parser::AbstractdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleAbstractdeclarator;
}


CPP14Parser::AbstractdeclaratorContext* CPP14Parser::abstractdeclarator() {
  AbstractdeclaratorContext *_localctx = _tracker.createInstance<AbstractdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 254, CPP14Parser::RuleAbstractdeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1764);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1756);
      ptrabstractdeclarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1758);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
      case 1: {
        setState(1757);
        noptrabstractdeclarator(0);
        break;
      }

      default:
        break;
      }
      setState(1760);
      parametersandqualifiers();
      setState(1761);
      trailingreturntype();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1763);
      abstractpackdeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PtrabstractdeclaratorContext ------------------------------------------------------------------

CPP14Parser::PtrabstractdeclaratorContext::PtrabstractdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::NoptrabstractdeclaratorContext* CPP14Parser::PtrabstractdeclaratorContext::noptrabstractdeclarator() {
  return getRuleContext<CPP14Parser::NoptrabstractdeclaratorContext>(0);
}

CPP14Parser::PtroperatorContext* CPP14Parser::PtrabstractdeclaratorContext::ptroperator() {
  return getRuleContext<CPP14Parser::PtroperatorContext>(0);
}

CPP14Parser::PtrabstractdeclaratorContext* CPP14Parser::PtrabstractdeclaratorContext::ptrabstractdeclarator() {
  return getRuleContext<CPP14Parser::PtrabstractdeclaratorContext>(0);
}


size_t CPP14Parser::PtrabstractdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RulePtrabstractdeclarator;
}


CPP14Parser::PtrabstractdeclaratorContext* CPP14Parser::ptrabstractdeclarator() {
  PtrabstractdeclaratorContext *_localctx = _tracker.createInstance<PtrabstractdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 256, CPP14Parser::RulePtrabstractdeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1771);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::LeftParen:
      case CPP14Parser::LeftBracket: {
        enterOuterAlt(_localctx, 1);
        setState(1766);
        noptrabstractdeclarator(0);
        break;
      }

      case CPP14Parser::Decltype:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::AndAnd:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(1767);
        ptroperator();
        setState(1769);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
        case 1: {
          setState(1768);
          ptrabstractdeclarator();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoptrabstractdeclaratorContext ------------------------------------------------------------------

CPP14Parser::NoptrabstractdeclaratorContext::NoptrabstractdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ParametersandqualifiersContext* CPP14Parser::NoptrabstractdeclaratorContext::parametersandqualifiers() {
  return getRuleContext<CPP14Parser::ParametersandqualifiersContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrabstractdeclaratorContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::NoptrabstractdeclaratorContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::NoptrabstractdeclaratorContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::NoptrabstractdeclaratorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrabstractdeclaratorContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::PtrabstractdeclaratorContext* CPP14Parser::NoptrabstractdeclaratorContext::ptrabstractdeclarator() {
  return getRuleContext<CPP14Parser::PtrabstractdeclaratorContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrabstractdeclaratorContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::NoptrabstractdeclaratorContext* CPP14Parser::NoptrabstractdeclaratorContext::noptrabstractdeclarator() {
  return getRuleContext<CPP14Parser::NoptrabstractdeclaratorContext>(0);
}


size_t CPP14Parser::NoptrabstractdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleNoptrabstractdeclarator;
}



CPP14Parser::NoptrabstractdeclaratorContext* CPP14Parser::noptrabstractdeclarator() {
   return noptrabstractdeclarator(0);
}

CPP14Parser::NoptrabstractdeclaratorContext* CPP14Parser::noptrabstractdeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::NoptrabstractdeclaratorContext *_localctx = _tracker.createInstance<NoptrabstractdeclaratorContext>(_ctx, parentState);
  CPP14Parser::NoptrabstractdeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 258;
  enterRecursionRule(_localctx, 258, CPP14Parser::RuleNoptrabstractdeclarator, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1774);
      parametersandqualifiers();
      break;
    }

    case 2: {
      setState(1775);
      match(CPP14Parser::LeftBracket);
      setState(1777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 3495637736276666969) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(1776);
        constantexpression();
      }
      setState(1779);
      match(CPP14Parser::RightBracket);
      setState(1781);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
      case 1: {
        setState(1780);
        attributespecifierseq(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      setState(1783);
      match(CPP14Parser::LeftParen);
      setState(1784);
      ptrabstractdeclarator();
      setState(1785);
      match(CPP14Parser::RightParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1802);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1800);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NoptrabstractdeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNoptrabstractdeclarator);
          setState(1789);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(1790);
          parametersandqualifiers();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NoptrabstractdeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNoptrabstractdeclarator);
          setState(1791);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1792);
          match(CPP14Parser::LeftBracket);
          setState(1794);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 3495637736276666969) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 132)) & 127) != 0)) {
            setState(1793);
            constantexpression();
          }
          setState(1796);
          match(CPP14Parser::RightBracket);
          setState(1798);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
          case 1: {
            setState(1797);
            attributespecifierseq(0);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1804);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AbstractpackdeclaratorContext ------------------------------------------------------------------

CPP14Parser::AbstractpackdeclaratorContext::AbstractpackdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::NoptrabstractpackdeclaratorContext* CPP14Parser::AbstractpackdeclaratorContext::noptrabstractpackdeclarator() {
  return getRuleContext<CPP14Parser::NoptrabstractpackdeclaratorContext>(0);
}

CPP14Parser::PtroperatorContext* CPP14Parser::AbstractpackdeclaratorContext::ptroperator() {
  return getRuleContext<CPP14Parser::PtroperatorContext>(0);
}

CPP14Parser::AbstractpackdeclaratorContext* CPP14Parser::AbstractpackdeclaratorContext::abstractpackdeclarator() {
  return getRuleContext<CPP14Parser::AbstractpackdeclaratorContext>(0);
}


size_t CPP14Parser::AbstractpackdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleAbstractpackdeclarator;
}


CPP14Parser::AbstractpackdeclaratorContext* CPP14Parser::abstractpackdeclarator() {
  AbstractpackdeclaratorContext *_localctx = _tracker.createInstance<AbstractpackdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 260, CPP14Parser::RuleAbstractpackdeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1809);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Ellipsis: {
        enterOuterAlt(_localctx, 1);
        setState(1805);
        noptrabstractpackdeclarator(0);
        break;
      }

      case CPP14Parser::Decltype:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::AndAnd:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(1806);
        ptroperator();
        setState(1807);
        abstractpackdeclarator();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoptrabstractpackdeclaratorContext ------------------------------------------------------------------

CPP14Parser::NoptrabstractpackdeclaratorContext::NoptrabstractpackdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NoptrabstractpackdeclaratorContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::NoptrabstractpackdeclaratorContext* CPP14Parser::NoptrabstractpackdeclaratorContext::noptrabstractpackdeclarator() {
  return getRuleContext<CPP14Parser::NoptrabstractpackdeclaratorContext>(0);
}

CPP14Parser::ParametersandqualifiersContext* CPP14Parser::NoptrabstractpackdeclaratorContext::parametersandqualifiers() {
  return getRuleContext<CPP14Parser::ParametersandqualifiersContext>(0);
}

tree::TerminalNode* CPP14Parser::NoptrabstractpackdeclaratorContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::NoptrabstractpackdeclaratorContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::NoptrabstractpackdeclaratorContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::NoptrabstractpackdeclaratorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::NoptrabstractpackdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleNoptrabstractpackdeclarator;
}



CPP14Parser::NoptrabstractpackdeclaratorContext* CPP14Parser::noptrabstractpackdeclarator() {
   return noptrabstractpackdeclarator(0);
}

CPP14Parser::NoptrabstractpackdeclaratorContext* CPP14Parser::noptrabstractpackdeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::NoptrabstractpackdeclaratorContext *_localctx = _tracker.createInstance<NoptrabstractpackdeclaratorContext>(_ctx, parentState);
  CPP14Parser::NoptrabstractpackdeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 262;
  enterRecursionRule(_localctx, 262, CPP14Parser::RuleNoptrabstractpackdeclarator, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1812);
    match(CPP14Parser::Ellipsis);
    _ctx->stop = _input->LT(-1);
    setState(1827);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1825);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NoptrabstractpackdeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNoptrabstractpackdeclarator);
          setState(1814);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1815);
          parametersandqualifiers();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NoptrabstractpackdeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNoptrabstractpackdeclarator);
          setState(1816);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1817);
          match(CPP14Parser::LeftBracket);
          setState(1819);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 3495637736276666969) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 132)) & 127) != 0)) {
            setState(1818);
            constantexpression();
          }
          setState(1821);
          match(CPP14Parser::RightBracket);
          setState(1823);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
          case 1: {
            setState(1822);
            attributespecifierseq(0);
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(1829);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParameterdeclarationclauseContext ------------------------------------------------------------------

CPP14Parser::ParameterdeclarationclauseContext::ParameterdeclarationclauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ParameterdeclarationlistContext* CPP14Parser::ParameterdeclarationclauseContext::parameterdeclarationlist() {
  return getRuleContext<CPP14Parser::ParameterdeclarationlistContext>(0);
}

tree::TerminalNode* CPP14Parser::ParameterdeclarationclauseContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

tree::TerminalNode* CPP14Parser::ParameterdeclarationclauseContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::ParameterdeclarationclauseContext::getRuleIndex() const {
  return CPP14Parser::RuleParameterdeclarationclause;
}


CPP14Parser::ParameterdeclarationclauseContext* CPP14Parser::parameterdeclarationclause() {
  ParameterdeclarationclauseContext *_localctx = _tracker.createInstance<ParameterdeclarationclauseContext>(_ctx, getState());
  enterRule(_localctx, 264, CPP14Parser::RuleParameterdeclarationclause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1840);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1831);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8546704109035980600) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 297237575406461917) != 0)) {
        setState(1830);
        parameterdeclarationlist(0);
      }
      setState(1834);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Ellipsis) {
        setState(1833);
        match(CPP14Parser::Ellipsis);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1836);
      parameterdeclarationlist(0);
      setState(1837);
      match(CPP14Parser::Comma);
      setState(1838);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterdeclarationlistContext ------------------------------------------------------------------

CPP14Parser::ParameterdeclarationlistContext::ParameterdeclarationlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ParameterdeclarationContext* CPP14Parser::ParameterdeclarationlistContext::parameterdeclaration() {
  return getRuleContext<CPP14Parser::ParameterdeclarationContext>(0);
}

CPP14Parser::ParameterdeclarationlistContext* CPP14Parser::ParameterdeclarationlistContext::parameterdeclarationlist() {
  return getRuleContext<CPP14Parser::ParameterdeclarationlistContext>(0);
}

tree::TerminalNode* CPP14Parser::ParameterdeclarationlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::ParameterdeclarationlistContext::getRuleIndex() const {
  return CPP14Parser::RuleParameterdeclarationlist;
}



CPP14Parser::ParameterdeclarationlistContext* CPP14Parser::parameterdeclarationlist() {
   return parameterdeclarationlist(0);
}

CPP14Parser::ParameterdeclarationlistContext* CPP14Parser::parameterdeclarationlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::ParameterdeclarationlistContext *_localctx = _tracker.createInstance<ParameterdeclarationlistContext>(_ctx, parentState);
  CPP14Parser::ParameterdeclarationlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 266;
  enterRecursionRule(_localctx, 266, CPP14Parser::RuleParameterdeclarationlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1843);
    parameterdeclaration();
    _ctx->stop = _input->LT(-1);
    setState(1850);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ParameterdeclarationlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleParameterdeclarationlist);
        setState(1845);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1846);
        match(CPP14Parser::Comma);
        setState(1847);
        parameterdeclaration(); 
      }
      setState(1852);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParameterdeclarationContext ------------------------------------------------------------------

CPP14Parser::ParameterdeclarationContext::ParameterdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::ParameterdeclarationContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}

CPP14Parser::DeclaratorContext* CPP14Parser::ParameterdeclarationContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ParameterdeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::ParameterdeclarationContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::InitializerclauseContext* CPP14Parser::ParameterdeclarationContext::initializerclause() {
  return getRuleContext<CPP14Parser::InitializerclauseContext>(0);
}

CPP14Parser::AbstractdeclaratorContext* CPP14Parser::ParameterdeclarationContext::abstractdeclarator() {
  return getRuleContext<CPP14Parser::AbstractdeclaratorContext>(0);
}


size_t CPP14Parser::ParameterdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleParameterdeclaration;
}


CPP14Parser::ParameterdeclarationContext* CPP14Parser::parameterdeclaration() {
  ParameterdeclarationContext *_localctx = _tracker.createInstance<ParameterdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 268, CPP14Parser::RuleParameterdeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1884);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1854);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1853);
        attributespecifierseq(0);
      }
      setState(1856);
      declspecifierseq();
      setState(1857);
      declarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1860);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1859);
        attributespecifierseq(0);
      }
      setState(1862);
      declspecifierseq();
      setState(1863);
      declarator();
      setState(1864);
      match(CPP14Parser::Assign);
      setState(1865);
      initializerclause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1867);
        attributespecifierseq(0);
      }
      setState(1870);
      declspecifierseq();
      setState(1872);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
      case 1: {
        setState(1871);
        abstractdeclarator();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1874);
        attributespecifierseq(0);
      }
      setState(1877);
      declspecifierseq();
      setState(1879);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Decltype || ((((_la - 78) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 78)) & 215512868983045) != 0)) {
        setState(1878);
        abstractdeclarator();
      }
      setState(1881);
      match(CPP14Parser::Assign);
      setState(1882);
      initializerclause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctiondefinitionContext ------------------------------------------------------------------

CPP14Parser::FunctiondefinitionContext::FunctiondefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclaratorContext* CPP14Parser::FunctiondefinitionContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

CPP14Parser::FunctionbodyContext* CPP14Parser::FunctiondefinitionContext::functionbody() {
  return getRuleContext<CPP14Parser::FunctionbodyContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::FunctiondefinitionContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::FunctiondefinitionContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}

CPP14Parser::VirtspecifierseqContext* CPP14Parser::FunctiondefinitionContext::virtspecifierseq() {
  return getRuleContext<CPP14Parser::VirtspecifierseqContext>(0);
}


size_t CPP14Parser::FunctiondefinitionContext::getRuleIndex() const {
  return CPP14Parser::RuleFunctiondefinition;
}


CPP14Parser::FunctiondefinitionContext* CPP14Parser::functiondefinition() {
  FunctiondefinitionContext *_localctx = _tracker.createInstance<FunctiondefinitionContext>(_ctx, getState());
  enterRule(_localctx, 270, CPP14Parser::RuleFunctiondefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1887);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
      setState(1886);
      attributespecifierseq(0);
    }
    setState(1890);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      setState(1889);
      declspecifierseq();
      break;
    }

    default:
      break;
    }
    setState(1892);
    declarator();
    setState(1894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Final

    || _la == CPP14Parser::Override) {
      setState(1893);
      virtspecifierseq(0);
    }
    setState(1896);
    functionbody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionbodyContext ------------------------------------------------------------------

CPP14Parser::FunctionbodyContext::FunctionbodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::CompoundstatementContext* CPP14Parser::FunctionbodyContext::compoundstatement() {
  return getRuleContext<CPP14Parser::CompoundstatementContext>(0);
}

CPP14Parser::CtorinitializerContext* CPP14Parser::FunctionbodyContext::ctorinitializer() {
  return getRuleContext<CPP14Parser::CtorinitializerContext>(0);
}

CPP14Parser::FunctiontryblockContext* CPP14Parser::FunctionbodyContext::functiontryblock() {
  return getRuleContext<CPP14Parser::FunctiontryblockContext>(0);
}

tree::TerminalNode* CPP14Parser::FunctionbodyContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

tree::TerminalNode* CPP14Parser::FunctionbodyContext::Default() {
  return getToken(CPP14Parser::Default, 0);
}

tree::TerminalNode* CPP14Parser::FunctionbodyContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

tree::TerminalNode* CPP14Parser::FunctionbodyContext::Delete() {
  return getToken(CPP14Parser::Delete, 0);
}


size_t CPP14Parser::FunctionbodyContext::getRuleIndex() const {
  return CPP14Parser::RuleFunctionbody;
}


CPP14Parser::FunctionbodyContext* CPP14Parser::functionbody() {
  FunctionbodyContext *_localctx = _tracker.createInstance<FunctionbodyContext>(_ctx, getState());
  enterRule(_localctx, 272, CPP14Parser::RuleFunctionbody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1909);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1899);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Colon) {
        setState(1898);
        ctorinitializer();
      }
      setState(1901);
      compoundstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1902);
      functiontryblock();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1903);
      match(CPP14Parser::Assign);
      setState(1904);
      match(CPP14Parser::Default);
      setState(1905);
      match(CPP14Parser::Semi);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1906);
      match(CPP14Parser::Assign);
      setState(1907);
      match(CPP14Parser::Delete);
      setState(1908);
      match(CPP14Parser::Semi);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

CPP14Parser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::BraceorequalinitializerContext* CPP14Parser::InitializerContext::braceorequalinitializer() {
  return getRuleContext<CPP14Parser::BraceorequalinitializerContext>(0);
}

tree::TerminalNode* CPP14Parser::InitializerContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ExpressionlistContext* CPP14Parser::InitializerContext::expressionlist() {
  return getRuleContext<CPP14Parser::ExpressionlistContext>(0);
}

tree::TerminalNode* CPP14Parser::InitializerContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::InitializerContext::getRuleIndex() const {
  return CPP14Parser::RuleInitializer;
}


CPP14Parser::InitializerContext* CPP14Parser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 274, CPP14Parser::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1916);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::LeftBrace:
      case CPP14Parser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(1911);
        braceorequalinitializer();
        break;
      }

      case CPP14Parser::LeftParen: {
        enterOuterAlt(_localctx, 2);
        setState(1912);
        match(CPP14Parser::LeftParen);
        setState(1913);
        expressionlist();
        setState(1914);
        match(CPP14Parser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BraceorequalinitializerContext ------------------------------------------------------------------

CPP14Parser::BraceorequalinitializerContext::BraceorequalinitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::BraceorequalinitializerContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::InitializerclauseContext* CPP14Parser::BraceorequalinitializerContext::initializerclause() {
  return getRuleContext<CPP14Parser::InitializerclauseContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::BraceorequalinitializerContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}


size_t CPP14Parser::BraceorequalinitializerContext::getRuleIndex() const {
  return CPP14Parser::RuleBraceorequalinitializer;
}


CPP14Parser::BraceorequalinitializerContext* CPP14Parser::braceorequalinitializer() {
  BraceorequalinitializerContext *_localctx = _tracker.createInstance<BraceorequalinitializerContext>(_ctx, getState());
  enterRule(_localctx, 276, CPP14Parser::RuleBraceorequalinitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1921);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(1918);
        match(CPP14Parser::Assign);
        setState(1919);
        initializerclause();
        break;
      }

      case CPP14Parser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(1920);
        bracedinitlist();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerclauseContext ------------------------------------------------------------------

CPP14Parser::InitializerclauseContext::InitializerclauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::AssignmentexpressionContext* CPP14Parser::InitializerclauseContext::assignmentexpression() {
  return getRuleContext<CPP14Parser::AssignmentexpressionContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::InitializerclauseContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}


size_t CPP14Parser::InitializerclauseContext::getRuleIndex() const {
  return CPP14Parser::RuleInitializerclause;
}


CPP14Parser::InitializerclauseContext* CPP14Parser::initializerclause() {
  InitializerclauseContext *_localctx = _tracker.createInstance<InitializerclauseContext>(_ctx, getState());
  enterRule(_localctx, 278, CPP14Parser::RuleInitializerclause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1925);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Alignof:
      case CPP14Parser::Auto:
      case CPP14Parser::Bool:
      case CPP14Parser::Char:
      case CPP14Parser::Char16:
      case CPP14Parser::Char32:
      case CPP14Parser::Const_cast:
      case CPP14Parser::Decltype:
      case CPP14Parser::Delete:
      case CPP14Parser::Double:
      case CPP14Parser::Dynamic_cast:
      case CPP14Parser::False:
      case CPP14Parser::Float:
      case CPP14Parser::Int:
      case CPP14Parser::Long:
      case CPP14Parser::New:
      case CPP14Parser::Noexcept:
      case CPP14Parser::Nullptr:
      case CPP14Parser::Operator:
      case CPP14Parser::Reinterpret_cast:
      case CPP14Parser::Short:
      case CPP14Parser::Signed:
      case CPP14Parser::Sizeof:
      case CPP14Parser::Static_cast:
      case CPP14Parser::This:
      case CPP14Parser::Throw:
      case CPP14Parser::True:
      case CPP14Parser::Typeid:
      case CPP14Parser::Typename:
      case CPP14Parser::Unsigned:
      case CPP14Parser::Void:
      case CPP14Parser::Wchar:
      case CPP14Parser::LeftParen:
      case CPP14Parser::LeftBracket:
      case CPP14Parser::Plus:
      case CPP14Parser::Minus:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::Or:
      case CPP14Parser::Tilde:
      case CPP14Parser::Not:
      case CPP14Parser::PlusPlus:
      case CPP14Parser::MinusMinus:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Identifier:
      case CPP14Parser::Integerliteral:
      case CPP14Parser::Characterliteral:
      case CPP14Parser::Floatingliteral:
      case CPP14Parser::Stringliteral:
      case CPP14Parser::Userdefinedintegerliteral:
      case CPP14Parser::Userdefinedfloatingliteral:
      case CPP14Parser::Userdefinedstringliteral:
      case CPP14Parser::Userdefinedcharacterliteral: {
        enterOuterAlt(_localctx, 1);
        setState(1923);
        assignmentexpression();
        break;
      }

      case CPP14Parser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(1924);
        bracedinitlist();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerlistContext ------------------------------------------------------------------

CPP14Parser::InitializerlistContext::InitializerlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::InitializerclauseContext* CPP14Parser::InitializerlistContext::initializerclause() {
  return getRuleContext<CPP14Parser::InitializerclauseContext>(0);
}

tree::TerminalNode* CPP14Parser::InitializerlistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::InitializerlistContext* CPP14Parser::InitializerlistContext::initializerlist() {
  return getRuleContext<CPP14Parser::InitializerlistContext>(0);
}

tree::TerminalNode* CPP14Parser::InitializerlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::InitializerlistContext::getRuleIndex() const {
  return CPP14Parser::RuleInitializerlist;
}



CPP14Parser::InitializerlistContext* CPP14Parser::initializerlist() {
   return initializerlist(0);
}

CPP14Parser::InitializerlistContext* CPP14Parser::initializerlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::InitializerlistContext *_localctx = _tracker.createInstance<InitializerlistContext>(_ctx, parentState);
  CPP14Parser::InitializerlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 280;
  enterRecursionRule(_localctx, 280, CPP14Parser::RuleInitializerlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1928);
    initializerclause();
    setState(1930);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      setState(1929);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1940);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InitializerlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInitializerlist);
        setState(1932);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1933);
        match(CPP14Parser::Comma);
        setState(1934);
        initializerclause();
        setState(1936);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
        case 1: {
          setState(1935);
          match(CPP14Parser::Ellipsis);
          break;
        }

        default:
          break;
        } 
      }
      setState(1942);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BracedinitlistContext ------------------------------------------------------------------

CPP14Parser::BracedinitlistContext::BracedinitlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::BracedinitlistContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

CPP14Parser::InitializerlistContext* CPP14Parser::BracedinitlistContext::initializerlist() {
  return getRuleContext<CPP14Parser::InitializerlistContext>(0);
}

tree::TerminalNode* CPP14Parser::BracedinitlistContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

tree::TerminalNode* CPP14Parser::BracedinitlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::BracedinitlistContext::getRuleIndex() const {
  return CPP14Parser::RuleBracedinitlist;
}


CPP14Parser::BracedinitlistContext* CPP14Parser::bracedinitlist() {
  BracedinitlistContext *_localctx = _tracker.createInstance<BracedinitlistContext>(_ctx, getState());
  enterRule(_localctx, 282, CPP14Parser::RuleBracedinitlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1952);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1943);
      match(CPP14Parser::LeftBrace);
      setState(1944);
      initializerlist(0);
      setState(1946);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Comma) {
        setState(1945);
        match(CPP14Parser::Comma);
      }
      setState(1948);
      match(CPP14Parser::RightBrace);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1950);
      match(CPP14Parser::LeftBrace);
      setState(1951);
      match(CPP14Parser::RightBrace);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassnameContext ------------------------------------------------------------------

CPP14Parser::ClassnameContext::ClassnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ClassnameContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::ClassnameContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}


size_t CPP14Parser::ClassnameContext::getRuleIndex() const {
  return CPP14Parser::RuleClassname;
}


CPP14Parser::ClassnameContext* CPP14Parser::classname() {
  ClassnameContext *_localctx = _tracker.createInstance<ClassnameContext>(_ctx, getState());
  enterRule(_localctx, 284, CPP14Parser::RuleClassname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1956);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1954);
      match(CPP14Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1955);
      simpletemplateid();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassspecifierContext ------------------------------------------------------------------

CPP14Parser::ClassspecifierContext::ClassspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClassheadContext* CPP14Parser::ClassspecifierContext::classhead() {
  return getRuleContext<CPP14Parser::ClassheadContext>(0);
}

tree::TerminalNode* CPP14Parser::ClassspecifierContext::LeftBrace() {
  return getToken(CPP14Parser::LeftBrace, 0);
}

tree::TerminalNode* CPP14Parser::ClassspecifierContext::RightBrace() {
  return getToken(CPP14Parser::RightBrace, 0);
}

CPP14Parser::MemberspecificationContext* CPP14Parser::ClassspecifierContext::memberspecification() {
  return getRuleContext<CPP14Parser::MemberspecificationContext>(0);
}


size_t CPP14Parser::ClassspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleClassspecifier;
}


CPP14Parser::ClassspecifierContext* CPP14Parser::classspecifier() {
  ClassspecifierContext *_localctx = _tracker.createInstance<ClassspecifierContext>(_ctx, getState());
  enterRule(_localctx, 286, CPP14Parser::RuleClassspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1958);
    classhead();
    setState(1959);
    match(CPP14Parser::LeftBrace);
    setState(1961);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6095725564955854648) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 463888353847684093) != 0)) {
      setState(1960);
      memberspecification();
    }
    setState(1963);
    match(CPP14Parser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassheadContext ------------------------------------------------------------------

CPP14Parser::ClassheadContext::ClassheadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClasskeyContext* CPP14Parser::ClassheadContext::classkey() {
  return getRuleContext<CPP14Parser::ClasskeyContext>(0);
}

CPP14Parser::ClassheadnameContext* CPP14Parser::ClassheadContext::classheadname() {
  return getRuleContext<CPP14Parser::ClassheadnameContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ClassheadContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::ClassvirtspecifierContext* CPP14Parser::ClassheadContext::classvirtspecifier() {
  return getRuleContext<CPP14Parser::ClassvirtspecifierContext>(0);
}

CPP14Parser::BaseclauseContext* CPP14Parser::ClassheadContext::baseclause() {
  return getRuleContext<CPP14Parser::BaseclauseContext>(0);
}


size_t CPP14Parser::ClassheadContext::getRuleIndex() const {
  return CPP14Parser::RuleClasshead;
}


CPP14Parser::ClassheadContext* CPP14Parser::classhead() {
  ClassheadContext *_localctx = _tracker.createInstance<ClassheadContext>(_ctx, getState());
  enterRule(_localctx, 288, CPP14Parser::RuleClasshead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1983);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1965);
      classkey();
      setState(1967);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1966);
        attributespecifierseq(0);
      }
      setState(1969);
      classheadname();
      setState(1971);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Final) {
        setState(1970);
        classvirtspecifier();
      }
      setState(1974);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Colon) {
        setState(1973);
        baseclause();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1976);
      classkey();
      setState(1978);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(1977);
        attributespecifierseq(0);
      }
      setState(1981);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Colon) {
        setState(1980);
        baseclause();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassheadnameContext ------------------------------------------------------------------

CPP14Parser::ClassheadnameContext::ClassheadnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClassnameContext* CPP14Parser::ClassheadnameContext::classname() {
  return getRuleContext<CPP14Parser::ClassnameContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::ClassheadnameContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}


size_t CPP14Parser::ClassheadnameContext::getRuleIndex() const {
  return CPP14Parser::RuleClassheadname;
}


CPP14Parser::ClassheadnameContext* CPP14Parser::classheadname() {
  ClassheadnameContext *_localctx = _tracker.createInstance<ClassheadnameContext>(_ctx, getState());
  enterRule(_localctx, 290, CPP14Parser::RuleClassheadname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1986);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
    case 1: {
      setState(1985);
      nestednamespecifier(0);
      break;
    }

    default:
      break;
    }
    setState(1988);
    classname();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassvirtspecifierContext ------------------------------------------------------------------

CPP14Parser::ClassvirtspecifierContext::ClassvirtspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ClassvirtspecifierContext::Final() {
  return getToken(CPP14Parser::Final, 0);
}


size_t CPP14Parser::ClassvirtspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleClassvirtspecifier;
}


CPP14Parser::ClassvirtspecifierContext* CPP14Parser::classvirtspecifier() {
  ClassvirtspecifierContext *_localctx = _tracker.createInstance<ClassvirtspecifierContext>(_ctx, getState());
  enterRule(_localctx, 292, CPP14Parser::RuleClassvirtspecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1990);
    match(CPP14Parser::Final);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClasskeyContext ------------------------------------------------------------------

CPP14Parser::ClasskeyContext::ClasskeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ClasskeyContext::Class() {
  return getToken(CPP14Parser::Class, 0);
}

tree::TerminalNode* CPP14Parser::ClasskeyContext::Struct() {
  return getToken(CPP14Parser::Struct, 0);
}

tree::TerminalNode* CPP14Parser::ClasskeyContext::Union() {
  return getToken(CPP14Parser::Union, 0);
}


size_t CPP14Parser::ClasskeyContext::getRuleIndex() const {
  return CPP14Parser::RuleClasskey;
}


CPP14Parser::ClasskeyContext* CPP14Parser::classkey() {
  ClasskeyContext *_localctx = _tracker.createInstance<ClasskeyContext>(_ctx, getState());
  enterRule(_localctx, 294, CPP14Parser::RuleClasskey);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1992);
    _la = _input->LA(1);
    if (!(((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & 72092778410016769) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberspecificationContext ------------------------------------------------------------------

CPP14Parser::MemberspecificationContext::MemberspecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::MemberdeclarationContext* CPP14Parser::MemberspecificationContext::memberdeclaration() {
  return getRuleContext<CPP14Parser::MemberdeclarationContext>(0);
}

CPP14Parser::MemberspecificationContext* CPP14Parser::MemberspecificationContext::memberspecification() {
  return getRuleContext<CPP14Parser::MemberspecificationContext>(0);
}

CPP14Parser::AccessspecifierContext* CPP14Parser::MemberspecificationContext::accessspecifier() {
  return getRuleContext<CPP14Parser::AccessspecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::MemberspecificationContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}


size_t CPP14Parser::MemberspecificationContext::getRuleIndex() const {
  return CPP14Parser::RuleMemberspecification;
}


CPP14Parser::MemberspecificationContext* CPP14Parser::memberspecification() {
  MemberspecificationContext *_localctx = _tracker.createInstance<MemberspecificationContext>(_ctx, getState());
  enterRule(_localctx, 296, CPP14Parser::RuleMemberspecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2003);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Alignas:
      case CPP14Parser::Auto:
      case CPP14Parser::Bool:
      case CPP14Parser::Char:
      case CPP14Parser::Char16:
      case CPP14Parser::Char32:
      case CPP14Parser::Class:
      case CPP14Parser::Const:
      case CPP14Parser::Constexpr:
      case CPP14Parser::Decltype:
      case CPP14Parser::Double:
      case CPP14Parser::Enum:
      case CPP14Parser::Explicit:
      case CPP14Parser::Extern:
      case CPP14Parser::Float:
      case CPP14Parser::Friend:
      case CPP14Parser::Inline:
      case CPP14Parser::Int:
      case CPP14Parser::Long:
      case CPP14Parser::Mutable:
      case CPP14Parser::Operator:
      case CPP14Parser::Register:
      case CPP14Parser::Short:
      case CPP14Parser::Signed:
      case CPP14Parser::Static:
      case CPP14Parser::Static_assert:
      case CPP14Parser::Struct:
      case CPP14Parser::Template:
      case CPP14Parser::Thread_local:
      case CPP14Parser::Typedef:
      case CPP14Parser::Typename:
      case CPP14Parser::Union:
      case CPP14Parser::Unsigned:
      case CPP14Parser::Using:
      case CPP14Parser::Virtual:
      case CPP14Parser::Void:
      case CPP14Parser::Volatile:
      case CPP14Parser::Wchar:
      case CPP14Parser::LeftParen:
      case CPP14Parser::LeftBracket:
      case CPP14Parser::Star:
      case CPP14Parser::And:
      case CPP14Parser::Tilde:
      case CPP14Parser::AndAnd:
      case CPP14Parser::Colon:
      case CPP14Parser::Doublecolon:
      case CPP14Parser::Semi:
      case CPP14Parser::Ellipsis:
      case CPP14Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1994);
        memberdeclaration();
        setState(1996);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -6095725564955854648) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 463888353847684093) != 0)) {
          setState(1995);
          memberspecification();
        }
        break;
      }

      case CPP14Parser::Private:
      case CPP14Parser::Protected:
      case CPP14Parser::Public: {
        enterOuterAlt(_localctx, 2);
        setState(1998);
        accessspecifier();
        setState(1999);
        match(CPP14Parser::Colon);
        setState(2001);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -6095725564955854648) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 463888353847684093) != 0)) {
          setState(2000);
          memberspecification();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberdeclarationContext ------------------------------------------------------------------

CPP14Parser::MemberdeclarationContext::MemberdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::MemberdeclarationContext::Semi() {
  return getToken(CPP14Parser::Semi, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::MemberdeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::DeclspecifierseqContext* CPP14Parser::MemberdeclarationContext::declspecifierseq() {
  return getRuleContext<CPP14Parser::DeclspecifierseqContext>(0);
}

CPP14Parser::MemberdeclaratorlistContext* CPP14Parser::MemberdeclarationContext::memberdeclaratorlist() {
  return getRuleContext<CPP14Parser::MemberdeclaratorlistContext>(0);
}

CPP14Parser::FunctiondefinitionContext* CPP14Parser::MemberdeclarationContext::functiondefinition() {
  return getRuleContext<CPP14Parser::FunctiondefinitionContext>(0);
}

CPP14Parser::UsingdeclarationContext* CPP14Parser::MemberdeclarationContext::usingdeclaration() {
  return getRuleContext<CPP14Parser::UsingdeclarationContext>(0);
}

CPP14Parser::Static_assertdeclarationContext* CPP14Parser::MemberdeclarationContext::static_assertdeclaration() {
  return getRuleContext<CPP14Parser::Static_assertdeclarationContext>(0);
}

CPP14Parser::TemplatedeclarationContext* CPP14Parser::MemberdeclarationContext::templatedeclaration() {
  return getRuleContext<CPP14Parser::TemplatedeclarationContext>(0);
}

CPP14Parser::AliasdeclarationContext* CPP14Parser::MemberdeclarationContext::aliasdeclaration() {
  return getRuleContext<CPP14Parser::AliasdeclarationContext>(0);
}

CPP14Parser::EmptydeclarationContext* CPP14Parser::MemberdeclarationContext::emptydeclaration() {
  return getRuleContext<CPP14Parser::EmptydeclarationContext>(0);
}


size_t CPP14Parser::MemberdeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleMemberdeclaration;
}


CPP14Parser::MemberdeclarationContext* CPP14Parser::memberdeclaration() {
  MemberdeclarationContext *_localctx = _tracker.createInstance<MemberdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 298, CPP14Parser::RuleMemberdeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2021);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2006);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
      case 1: {
        setState(2005);
        attributespecifierseq(0);
        break;
      }

      default:
        break;
      }
      setState(2009);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
      case 1: {
        setState(2008);
        declspecifierseq();
        break;
      }

      default:
        break;
      }
      setState(2012);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 35184372613128) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 78)) & 217711892254981) != 0)) {
        setState(2011);
        memberdeclaratorlist(0);
      }
      setState(2014);
      match(CPP14Parser::Semi);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2015);
      functiondefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2016);
      usingdeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2017);
      static_assertdeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2018);
      templatedeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2019);
      aliasdeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2020);
      emptydeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberdeclaratorlistContext ------------------------------------------------------------------

CPP14Parser::MemberdeclaratorlistContext::MemberdeclaratorlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::MemberdeclaratorContext* CPP14Parser::MemberdeclaratorlistContext::memberdeclarator() {
  return getRuleContext<CPP14Parser::MemberdeclaratorContext>(0);
}

CPP14Parser::MemberdeclaratorlistContext* CPP14Parser::MemberdeclaratorlistContext::memberdeclaratorlist() {
  return getRuleContext<CPP14Parser::MemberdeclaratorlistContext>(0);
}

tree::TerminalNode* CPP14Parser::MemberdeclaratorlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::MemberdeclaratorlistContext::getRuleIndex() const {
  return CPP14Parser::RuleMemberdeclaratorlist;
}



CPP14Parser::MemberdeclaratorlistContext* CPP14Parser::memberdeclaratorlist() {
   return memberdeclaratorlist(0);
}

CPP14Parser::MemberdeclaratorlistContext* CPP14Parser::memberdeclaratorlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::MemberdeclaratorlistContext *_localctx = _tracker.createInstance<MemberdeclaratorlistContext>(_ctx, parentState);
  CPP14Parser::MemberdeclaratorlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 300;
  enterRecursionRule(_localctx, 300, CPP14Parser::RuleMemberdeclaratorlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2024);
    memberdeclarator();
    _ctx->stop = _input->LT(-1);
    setState(2031);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<MemberdeclaratorlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleMemberdeclaratorlist);
        setState(2026);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2027);
        match(CPP14Parser::Comma);
        setState(2028);
        memberdeclarator(); 
      }
      setState(2033);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- MemberdeclaratorContext ------------------------------------------------------------------

CPP14Parser::MemberdeclaratorContext::MemberdeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DeclaratorContext* CPP14Parser::MemberdeclaratorContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

CPP14Parser::VirtspecifierseqContext* CPP14Parser::MemberdeclaratorContext::virtspecifierseq() {
  return getRuleContext<CPP14Parser::VirtspecifierseqContext>(0);
}

CPP14Parser::PurespecifierContext* CPP14Parser::MemberdeclaratorContext::purespecifier() {
  return getRuleContext<CPP14Parser::PurespecifierContext>(0);
}

CPP14Parser::BraceorequalinitializerContext* CPP14Parser::MemberdeclaratorContext::braceorequalinitializer() {
  return getRuleContext<CPP14Parser::BraceorequalinitializerContext>(0);
}

tree::TerminalNode* CPP14Parser::MemberdeclaratorContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::MemberdeclaratorContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::MemberdeclaratorContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::MemberdeclaratorContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}


size_t CPP14Parser::MemberdeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleMemberdeclarator;
}


CPP14Parser::MemberdeclaratorContext* CPP14Parser::memberdeclarator() {
  MemberdeclaratorContext *_localctx = _tracker.createInstance<MemberdeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 302, CPP14Parser::RuleMemberdeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2053);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2034);
      declarator();
      setState(2036);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
      case 1: {
        setState(2035);
        virtspecifierseq(0);
        break;
      }

      default:
        break;
      }
      setState(2039);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
      case 1: {
        setState(2038);
        purespecifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2041);
      declarator();
      setState(2043);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
      case 1: {
        setState(2042);
        braceorequalinitializer();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2046);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Identifier) {
        setState(2045);
        match(CPP14Parser::Identifier);
      }
      setState(2049);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(2048);
        attributespecifierseq(0);
      }
      setState(2051);
      match(CPP14Parser::Colon);
      setState(2052);
      constantexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VirtspecifierseqContext ------------------------------------------------------------------

CPP14Parser::VirtspecifierseqContext::VirtspecifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::VirtspecifierContext* CPP14Parser::VirtspecifierseqContext::virtspecifier() {
  return getRuleContext<CPP14Parser::VirtspecifierContext>(0);
}

CPP14Parser::VirtspecifierseqContext* CPP14Parser::VirtspecifierseqContext::virtspecifierseq() {
  return getRuleContext<CPP14Parser::VirtspecifierseqContext>(0);
}


size_t CPP14Parser::VirtspecifierseqContext::getRuleIndex() const {
  return CPP14Parser::RuleVirtspecifierseq;
}



CPP14Parser::VirtspecifierseqContext* CPP14Parser::virtspecifierseq() {
   return virtspecifierseq(0);
}

CPP14Parser::VirtspecifierseqContext* CPP14Parser::virtspecifierseq(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::VirtspecifierseqContext *_localctx = _tracker.createInstance<VirtspecifierseqContext>(_ctx, parentState);
  CPP14Parser::VirtspecifierseqContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 304;
  enterRecursionRule(_localctx, 304, CPP14Parser::RuleVirtspecifierseq, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2056);
    virtspecifier();
    _ctx->stop = _input->LT(-1);
    setState(2062);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<VirtspecifierseqContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleVirtspecifierseq);
        setState(2058);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2059);
        virtspecifier(); 
      }
      setState(2064);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- VirtspecifierContext ------------------------------------------------------------------

CPP14Parser::VirtspecifierContext::VirtspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::VirtspecifierContext::Override() {
  return getToken(CPP14Parser::Override, 0);
}

tree::TerminalNode* CPP14Parser::VirtspecifierContext::Final() {
  return getToken(CPP14Parser::Final, 0);
}


size_t CPP14Parser::VirtspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleVirtspecifier;
}


CPP14Parser::VirtspecifierContext* CPP14Parser::virtspecifier() {
  VirtspecifierContext *_localctx = _tracker.createInstance<VirtspecifierContext>(_ctx, getState());
  enterRule(_localctx, 306, CPP14Parser::RuleVirtspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    _la = _input->LA(1);
    if (!(_la == CPP14Parser::Final

    || _la == CPP14Parser::Override)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PurespecifierContext ------------------------------------------------------------------

CPP14Parser::PurespecifierContext::PurespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::PurespecifierContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

tree::TerminalNode* CPP14Parser::PurespecifierContext::Octalliteral() {
  return getToken(CPP14Parser::Octalliteral, 0);
}


size_t CPP14Parser::PurespecifierContext::getRuleIndex() const {
  return CPP14Parser::RulePurespecifier;
}


CPP14Parser::PurespecifierContext* CPP14Parser::purespecifier() {
  PurespecifierContext *_localctx = _tracker.createInstance<PurespecifierContext>(_ctx, getState());
  enterRule(_localctx, 308, CPP14Parser::RulePurespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2067);
    match(CPP14Parser::Assign);
    setState(2068);
    antlrcpp::downCast<PurespecifierContext *>(_localctx)->val = match(CPP14Parser::Octalliteral);
    if((antlrcpp::downCast<PurespecifierContext *>(_localctx)->val != nullptr ? antlrcpp::downCast<PurespecifierContext *>(_localctx)->val->getText() : "") != "0") throw new InputMismatchException(this);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseclauseContext ------------------------------------------------------------------

CPP14Parser::BaseclauseContext::BaseclauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::BaseclauseContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::BasespecifierlistContext* CPP14Parser::BaseclauseContext::basespecifierlist() {
  return getRuleContext<CPP14Parser::BasespecifierlistContext>(0);
}


size_t CPP14Parser::BaseclauseContext::getRuleIndex() const {
  return CPP14Parser::RuleBaseclause;
}


CPP14Parser::BaseclauseContext* CPP14Parser::baseclause() {
  BaseclauseContext *_localctx = _tracker.createInstance<BaseclauseContext>(_ctx, getState());
  enterRule(_localctx, 310, CPP14Parser::RuleBaseclause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2071);
    match(CPP14Parser::Colon);
    setState(2072);
    basespecifierlist(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasespecifierlistContext ------------------------------------------------------------------

CPP14Parser::BasespecifierlistContext::BasespecifierlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::BasespecifierContext* CPP14Parser::BasespecifierlistContext::basespecifier() {
  return getRuleContext<CPP14Parser::BasespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::BasespecifierlistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::BasespecifierlistContext* CPP14Parser::BasespecifierlistContext::basespecifierlist() {
  return getRuleContext<CPP14Parser::BasespecifierlistContext>(0);
}

tree::TerminalNode* CPP14Parser::BasespecifierlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::BasespecifierlistContext::getRuleIndex() const {
  return CPP14Parser::RuleBasespecifierlist;
}



CPP14Parser::BasespecifierlistContext* CPP14Parser::basespecifierlist() {
   return basespecifierlist(0);
}

CPP14Parser::BasespecifierlistContext* CPP14Parser::basespecifierlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::BasespecifierlistContext *_localctx = _tracker.createInstance<BasespecifierlistContext>(_ctx, parentState);
  CPP14Parser::BasespecifierlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 312;
  enterRecursionRule(_localctx, 312, CPP14Parser::RuleBasespecifierlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2075);
    basespecifier();
    setState(2077);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      setState(2076);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2087);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<BasespecifierlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBasespecifierlist);
        setState(2079);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2080);
        match(CPP14Parser::Comma);
        setState(2081);
        basespecifier();
        setState(2083);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
        case 1: {
          setState(2082);
          match(CPP14Parser::Ellipsis);
          break;
        }

        default:
          break;
        } 
      }
      setState(2089);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BasespecifierContext ------------------------------------------------------------------

CPP14Parser::BasespecifierContext::BasespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::BasetypespecifierContext* CPP14Parser::BasespecifierContext::basetypespecifier() {
  return getRuleContext<CPP14Parser::BasetypespecifierContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::BasespecifierContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

tree::TerminalNode* CPP14Parser::BasespecifierContext::Virtual() {
  return getToken(CPP14Parser::Virtual, 0);
}

CPP14Parser::AccessspecifierContext* CPP14Parser::BasespecifierContext::accessspecifier() {
  return getRuleContext<CPP14Parser::AccessspecifierContext>(0);
}


size_t CPP14Parser::BasespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleBasespecifier;
}


CPP14Parser::BasespecifierContext* CPP14Parser::basespecifier() {
  BasespecifierContext *_localctx = _tracker.createInstance<BasespecifierContext>(_ctx, getState());
  enterRule(_localctx, 314, CPP14Parser::RuleBasespecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2111);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2091);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(2090);
        attributespecifierseq(0);
      }
      setState(2093);
      basetypespecifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2095);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(2094);
        attributespecifierseq(0);
      }
      setState(2097);
      match(CPP14Parser::Virtual);
      setState(2099);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 985162418487296) != 0)) {
        setState(2098);
        accessspecifier();
      }
      setState(2101);
      basetypespecifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2103);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(2102);
        attributespecifierseq(0);
      }
      setState(2105);
      accessspecifier();
      setState(2107);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Virtual) {
        setState(2106);
        match(CPP14Parser::Virtual);
      }
      setState(2109);
      basetypespecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassordecltypeContext ------------------------------------------------------------------

CPP14Parser::ClassordecltypeContext::ClassordecltypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClassnameContext* CPP14Parser::ClassordecltypeContext::classname() {
  return getRuleContext<CPP14Parser::ClassnameContext>(0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::ClassordecltypeContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

CPP14Parser::DecltypespecifierContext* CPP14Parser::ClassordecltypeContext::decltypespecifier() {
  return getRuleContext<CPP14Parser::DecltypespecifierContext>(0);
}


size_t CPP14Parser::ClassordecltypeContext::getRuleIndex() const {
  return CPP14Parser::RuleClassordecltype;
}


CPP14Parser::ClassordecltypeContext* CPP14Parser::classordecltype() {
  ClassordecltypeContext *_localctx = _tracker.createInstance<ClassordecltypeContext>(_ctx, getState());
  enterRule(_localctx, 316, CPP14Parser::RuleClassordecltype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2118);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2114);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
      case 1: {
        setState(2113);
        nestednamespecifier(0);
        break;
      }

      default:
        break;
      }
      setState(2116);
      classname();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2117);
      decltypespecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasetypespecifierContext ------------------------------------------------------------------

CPP14Parser::BasetypespecifierContext::BasetypespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClassordecltypeContext* CPP14Parser::BasetypespecifierContext::classordecltype() {
  return getRuleContext<CPP14Parser::ClassordecltypeContext>(0);
}


size_t CPP14Parser::BasetypespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleBasetypespecifier;
}


CPP14Parser::BasetypespecifierContext* CPP14Parser::basetypespecifier() {
  BasetypespecifierContext *_localctx = _tracker.createInstance<BasetypespecifierContext>(_ctx, getState());
  enterRule(_localctx, 318, CPP14Parser::RuleBasetypespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2120);
    classordecltype();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessspecifierContext ------------------------------------------------------------------

CPP14Parser::AccessspecifierContext::AccessspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::AccessspecifierContext::Private() {
  return getToken(CPP14Parser::Private, 0);
}

tree::TerminalNode* CPP14Parser::AccessspecifierContext::Protected() {
  return getToken(CPP14Parser::Protected, 0);
}

tree::TerminalNode* CPP14Parser::AccessspecifierContext::Public() {
  return getToken(CPP14Parser::Public, 0);
}


size_t CPP14Parser::AccessspecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleAccessspecifier;
}


CPP14Parser::AccessspecifierContext* CPP14Parser::accessspecifier() {
  AccessspecifierContext *_localctx = _tracker.createInstance<AccessspecifierContext>(_ctx, getState());
  enterRule(_localctx, 320, CPP14Parser::RuleAccessspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2122);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 985162418487296) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConversionfunctionidContext ------------------------------------------------------------------

CPP14Parser::ConversionfunctionidContext::ConversionfunctionidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ConversionfunctionidContext::Operator() {
  return getToken(CPP14Parser::Operator, 0);
}

CPP14Parser::ConversiontypeidContext* CPP14Parser::ConversionfunctionidContext::conversiontypeid() {
  return getRuleContext<CPP14Parser::ConversiontypeidContext>(0);
}


size_t CPP14Parser::ConversionfunctionidContext::getRuleIndex() const {
  return CPP14Parser::RuleConversionfunctionid;
}


CPP14Parser::ConversionfunctionidContext* CPP14Parser::conversionfunctionid() {
  ConversionfunctionidContext *_localctx = _tracker.createInstance<ConversionfunctionidContext>(_ctx, getState());
  enterRule(_localctx, 322, CPP14Parser::RuleConversionfunctionid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2124);
    match(CPP14Parser::Operator);
    setState(2125);
    conversiontypeid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConversiontypeidContext ------------------------------------------------------------------

CPP14Parser::ConversiontypeidContext::ConversiontypeidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypespecifierseqContext* CPP14Parser::ConversiontypeidContext::typespecifierseq() {
  return getRuleContext<CPP14Parser::TypespecifierseqContext>(0);
}

CPP14Parser::ConversiondeclaratorContext* CPP14Parser::ConversiontypeidContext::conversiondeclarator() {
  return getRuleContext<CPP14Parser::ConversiondeclaratorContext>(0);
}


size_t CPP14Parser::ConversiontypeidContext::getRuleIndex() const {
  return CPP14Parser::RuleConversiontypeid;
}


CPP14Parser::ConversiontypeidContext* CPP14Parser::conversiontypeid() {
  ConversiontypeidContext *_localctx = _tracker.createInstance<ConversiontypeidContext>(_ctx, getState());
  enterRule(_localctx, 324, CPP14Parser::RuleConversiontypeid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2127);
    typespecifierseq();
    setState(2129);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(2128);
      conversiondeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConversiondeclaratorContext ------------------------------------------------------------------

CPP14Parser::ConversiondeclaratorContext::ConversiondeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::PtroperatorContext* CPP14Parser::ConversiondeclaratorContext::ptroperator() {
  return getRuleContext<CPP14Parser::PtroperatorContext>(0);
}

CPP14Parser::ConversiondeclaratorContext* CPP14Parser::ConversiondeclaratorContext::conversiondeclarator() {
  return getRuleContext<CPP14Parser::ConversiondeclaratorContext>(0);
}


size_t CPP14Parser::ConversiondeclaratorContext::getRuleIndex() const {
  return CPP14Parser::RuleConversiondeclarator;
}


CPP14Parser::ConversiondeclaratorContext* CPP14Parser::conversiondeclarator() {
  ConversiondeclaratorContext *_localctx = _tracker.createInstance<ConversiondeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 326, CPP14Parser::RuleConversiondeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2131);
    ptroperator();
    setState(2133);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
    case 1: {
      setState(2132);
      conversiondeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CtorinitializerContext ------------------------------------------------------------------

CPP14Parser::CtorinitializerContext::CtorinitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::CtorinitializerContext::Colon() {
  return getToken(CPP14Parser::Colon, 0);
}

CPP14Parser::MeminitializerlistContext* CPP14Parser::CtorinitializerContext::meminitializerlist() {
  return getRuleContext<CPP14Parser::MeminitializerlistContext>(0);
}


size_t CPP14Parser::CtorinitializerContext::getRuleIndex() const {
  return CPP14Parser::RuleCtorinitializer;
}


CPP14Parser::CtorinitializerContext* CPP14Parser::ctorinitializer() {
  CtorinitializerContext *_localctx = _tracker.createInstance<CtorinitializerContext>(_ctx, getState());
  enterRule(_localctx, 328, CPP14Parser::RuleCtorinitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2135);
    match(CPP14Parser::Colon);
    setState(2136);
    meminitializerlist();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MeminitializerlistContext ------------------------------------------------------------------

CPP14Parser::MeminitializerlistContext::MeminitializerlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::MeminitializerContext* CPP14Parser::MeminitializerlistContext::meminitializer() {
  return getRuleContext<CPP14Parser::MeminitializerContext>(0);
}

tree::TerminalNode* CPP14Parser::MeminitializerlistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

tree::TerminalNode* CPP14Parser::MeminitializerlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}

CPP14Parser::MeminitializerlistContext* CPP14Parser::MeminitializerlistContext::meminitializerlist() {
  return getRuleContext<CPP14Parser::MeminitializerlistContext>(0);
}


size_t CPP14Parser::MeminitializerlistContext::getRuleIndex() const {
  return CPP14Parser::RuleMeminitializerlist;
}


CPP14Parser::MeminitializerlistContext* CPP14Parser::meminitializerlist() {
  MeminitializerlistContext *_localctx = _tracker.createInstance<MeminitializerlistContext>(_ctx, getState());
  enterRule(_localctx, 330, CPP14Parser::RuleMeminitializerlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2149);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2138);
      meminitializer();
      setState(2140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Ellipsis) {
        setState(2139);
        match(CPP14Parser::Ellipsis);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2142);
      meminitializer();
      setState(2144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Ellipsis) {
        setState(2143);
        match(CPP14Parser::Ellipsis);
      }
      setState(2146);
      match(CPP14Parser::Comma);
      setState(2147);
      meminitializerlist();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MeminitializerContext ------------------------------------------------------------------

CPP14Parser::MeminitializerContext::MeminitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::MeminitializeridContext* CPP14Parser::MeminitializerContext::meminitializerid() {
  return getRuleContext<CPP14Parser::MeminitializeridContext>(0);
}

tree::TerminalNode* CPP14Parser::MeminitializerContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

tree::TerminalNode* CPP14Parser::MeminitializerContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::ExpressionlistContext* CPP14Parser::MeminitializerContext::expressionlist() {
  return getRuleContext<CPP14Parser::ExpressionlistContext>(0);
}

CPP14Parser::BracedinitlistContext* CPP14Parser::MeminitializerContext::bracedinitlist() {
  return getRuleContext<CPP14Parser::BracedinitlistContext>(0);
}


size_t CPP14Parser::MeminitializerContext::getRuleIndex() const {
  return CPP14Parser::RuleMeminitializer;
}


CPP14Parser::MeminitializerContext* CPP14Parser::meminitializer() {
  MeminitializerContext *_localctx = _tracker.createInstance<MeminitializerContext>(_ctx, getState());
  enterRule(_localctx, 332, CPP14Parser::RuleMeminitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2161);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2151);
      meminitializerid();
      setState(2152);
      match(CPP14Parser::LeftParen);
      setState(2154);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4965285389904001232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 6991275472553596083) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(2153);
        expressionlist();
      }
      setState(2156);
      match(CPP14Parser::RightParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2158);
      meminitializerid();
      setState(2159);
      bracedinitlist();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MeminitializeridContext ------------------------------------------------------------------

CPP14Parser::MeminitializeridContext::MeminitializeridContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::ClassordecltypeContext* CPP14Parser::MeminitializeridContext::classordecltype() {
  return getRuleContext<CPP14Parser::ClassordecltypeContext>(0);
}

tree::TerminalNode* CPP14Parser::MeminitializeridContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::MeminitializeridContext::getRuleIndex() const {
  return CPP14Parser::RuleMeminitializerid;
}


CPP14Parser::MeminitializeridContext* CPP14Parser::meminitializerid() {
  MeminitializeridContext *_localctx = _tracker.createInstance<MeminitializeridContext>(_ctx, getState());
  enterRule(_localctx, 334, CPP14Parser::RuleMeminitializerid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2165);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2163);
      classordecltype();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2164);
      match(CPP14Parser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorfunctionidContext ------------------------------------------------------------------

CPP14Parser::OperatorfunctionidContext::OperatorfunctionidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::OperatorfunctionidContext::Operator() {
  return getToken(CPP14Parser::Operator, 0);
}

CPP14Parser::OperatorContext* CPP14Parser::OperatorfunctionidContext::operator_() {
  return getRuleContext<CPP14Parser::OperatorContext>(0);
}


size_t CPP14Parser::OperatorfunctionidContext::getRuleIndex() const {
  return CPP14Parser::RuleOperatorfunctionid;
}


CPP14Parser::OperatorfunctionidContext* CPP14Parser::operatorfunctionid() {
  OperatorfunctionidContext *_localctx = _tracker.createInstance<OperatorfunctionidContext>(_ctx, getState());
  enterRule(_localctx, 336, CPP14Parser::RuleOperatorfunctionid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2167);
    match(CPP14Parser::Operator);
    setState(2168);
    operator_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteraloperatoridContext ------------------------------------------------------------------

CPP14Parser::LiteraloperatoridContext::LiteraloperatoridContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::LiteraloperatoridContext::Operator() {
  return getToken(CPP14Parser::Operator, 0);
}

tree::TerminalNode* CPP14Parser::LiteraloperatoridContext::Stringliteral() {
  return getToken(CPP14Parser::Stringliteral, 0);
}

tree::TerminalNode* CPP14Parser::LiteraloperatoridContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::LiteraloperatoridContext::Userdefinedstringliteral() {
  return getToken(CPP14Parser::Userdefinedstringliteral, 0);
}


size_t CPP14Parser::LiteraloperatoridContext::getRuleIndex() const {
  return CPP14Parser::RuleLiteraloperatorid;
}


CPP14Parser::LiteraloperatoridContext* CPP14Parser::literaloperatorid() {
  LiteraloperatoridContext *_localctx = _tracker.createInstance<LiteraloperatoridContext>(_ctx, getState());
  enterRule(_localctx, 338, CPP14Parser::RuleLiteraloperatorid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2175);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2170);
      match(CPP14Parser::Operator);
      setState(2171);
      match(CPP14Parser::Stringliteral);
      setState(2172);
      match(CPP14Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2173);
      match(CPP14Parser::Operator);
      setState(2174);
      match(CPP14Parser::Userdefinedstringliteral);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplatedeclarationContext ------------------------------------------------------------------

CPP14Parser::TemplatedeclarationContext::TemplatedeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TemplatedeclarationContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

tree::TerminalNode* CPP14Parser::TemplatedeclarationContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

CPP14Parser::TemplateparameterlistContext* CPP14Parser::TemplatedeclarationContext::templateparameterlist() {
  return getRuleContext<CPP14Parser::TemplateparameterlistContext>(0);
}

tree::TerminalNode* CPP14Parser::TemplatedeclarationContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

CPP14Parser::DeclarationContext* CPP14Parser::TemplatedeclarationContext::declaration() {
  return getRuleContext<CPP14Parser::DeclarationContext>(0);
}


size_t CPP14Parser::TemplatedeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplatedeclaration;
}


CPP14Parser::TemplatedeclarationContext* CPP14Parser::templatedeclaration() {
  TemplatedeclarationContext *_localctx = _tracker.createInstance<TemplatedeclarationContext>(_ctx, getState());
  enterRule(_localctx, 340, CPP14Parser::RuleTemplatedeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2177);
    match(CPP14Parser::Template);
    setState(2178);
    match(CPP14Parser::Less);
    setState(2179);
    templateparameterlist(0);
    setState(2180);
    match(CPP14Parser::Greater);
    setState(2181);
    declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateparameterlistContext ------------------------------------------------------------------

CPP14Parser::TemplateparameterlistContext::TemplateparameterlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TemplateparameterContext* CPP14Parser::TemplateparameterlistContext::templateparameter() {
  return getRuleContext<CPP14Parser::TemplateparameterContext>(0);
}

CPP14Parser::TemplateparameterlistContext* CPP14Parser::TemplateparameterlistContext::templateparameterlist() {
  return getRuleContext<CPP14Parser::TemplateparameterlistContext>(0);
}

tree::TerminalNode* CPP14Parser::TemplateparameterlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::TemplateparameterlistContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplateparameterlist;
}



CPP14Parser::TemplateparameterlistContext* CPP14Parser::templateparameterlist() {
   return templateparameterlist(0);
}

CPP14Parser::TemplateparameterlistContext* CPP14Parser::templateparameterlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::TemplateparameterlistContext *_localctx = _tracker.createInstance<TemplateparameterlistContext>(_ctx, parentState);
  CPP14Parser::TemplateparameterlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 342;
  enterRecursionRule(_localctx, 342, CPP14Parser::RuleTemplateparameterlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2184);
    templateparameter();
    _ctx->stop = _input->LT(-1);
    setState(2191);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TemplateparameterlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTemplateparameterlist);
        setState(2186);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2187);
        match(CPP14Parser::Comma);
        setState(2188);
        templateparameter(); 
      }
      setState(2193);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TemplateparameterContext ------------------------------------------------------------------

CPP14Parser::TemplateparameterContext::TemplateparameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypeparameterContext* CPP14Parser::TemplateparameterContext::typeparameter() {
  return getRuleContext<CPP14Parser::TypeparameterContext>(0);
}

CPP14Parser::ParameterdeclarationContext* CPP14Parser::TemplateparameterContext::parameterdeclaration() {
  return getRuleContext<CPP14Parser::ParameterdeclarationContext>(0);
}


size_t CPP14Parser::TemplateparameterContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplateparameter;
}


CPP14Parser::TemplateparameterContext* CPP14Parser::templateparameter() {
  TemplateparameterContext *_localctx = _tracker.createInstance<TemplateparameterContext>(_ctx, getState());
  enterRule(_localctx, 344, CPP14Parser::RuleTemplateparameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2196);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2194);
      typeparameter();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2195);
      parameterdeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeparameterContext ------------------------------------------------------------------

CPP14Parser::TypeparameterContext::TypeparameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Class() {
  return getToken(CPP14Parser::Class, 0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

CPP14Parser::TypeidContext* CPP14Parser::TypeparameterContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Typename() {
  return getToken(CPP14Parser::Typename, 0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

CPP14Parser::TemplateparameterlistContext* CPP14Parser::TypeparameterContext::templateparameterlist() {
  return getRuleContext<CPP14Parser::TemplateparameterlistContext>(0);
}

tree::TerminalNode* CPP14Parser::TypeparameterContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

CPP14Parser::IdexpressionContext* CPP14Parser::TypeparameterContext::idexpression() {
  return getRuleContext<CPP14Parser::IdexpressionContext>(0);
}


size_t CPP14Parser::TypeparameterContext::getRuleIndex() const {
  return CPP14Parser::RuleTypeparameter;
}


CPP14Parser::TypeparameterContext* CPP14Parser::typeparameter() {
  TypeparameterContext *_localctx = _tracker.createInstance<TypeparameterContext>(_ctx, getState());
  enterRule(_localctx, 346, CPP14Parser::RuleTypeparameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2246);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2198);
      match(CPP14Parser::Class);
      setState(2200);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
      case 1: {
        setState(2199);
        match(CPP14Parser::Ellipsis);
        break;
      }

      default:
        break;
      }
      setState(2203);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
      case 1: {
        setState(2202);
        match(CPP14Parser::Identifier);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2205);
      match(CPP14Parser::Class);
      setState(2207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Identifier) {
        setState(2206);
        match(CPP14Parser::Identifier);
      }
      setState(2209);
      match(CPP14Parser::Assign);
      setState(2210);
      typeid_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2211);
      match(CPP14Parser::Typename);
      setState(2213);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx)) {
      case 1: {
        setState(2212);
        match(CPP14Parser::Ellipsis);
        break;
      }

      default:
        break;
      }
      setState(2216);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
      case 1: {
        setState(2215);
        match(CPP14Parser::Identifier);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2218);
      match(CPP14Parser::Typename);
      setState(2220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Identifier) {
        setState(2219);
        match(CPP14Parser::Identifier);
      }
      setState(2222);
      match(CPP14Parser::Assign);
      setState(2223);
      typeid_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2224);
      match(CPP14Parser::Template);
      setState(2225);
      match(CPP14Parser::Less);
      setState(2226);
      templateparameterlist(0);
      setState(2227);
      match(CPP14Parser::Greater);
      setState(2228);
      match(CPP14Parser::Class);
      setState(2230);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx)) {
      case 1: {
        setState(2229);
        match(CPP14Parser::Ellipsis);
        break;
      }

      default:
        break;
      }
      setState(2233);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
      case 1: {
        setState(2232);
        match(CPP14Parser::Identifier);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2235);
      match(CPP14Parser::Template);
      setState(2236);
      match(CPP14Parser::Less);
      setState(2237);
      templateparameterlist(0);
      setState(2238);
      match(CPP14Parser::Greater);
      setState(2239);
      match(CPP14Parser::Class);
      setState(2241);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Identifier) {
        setState(2240);
        match(CPP14Parser::Identifier);
      }
      setState(2243);
      match(CPP14Parser::Assign);
      setState(2244);
      idexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpletemplateidContext ------------------------------------------------------------------

CPP14Parser::SimpletemplateidContext::SimpletemplateidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TemplatenameContext* CPP14Parser::SimpletemplateidContext::templatename() {
  return getRuleContext<CPP14Parser::TemplatenameContext>(0);
}

tree::TerminalNode* CPP14Parser::SimpletemplateidContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

tree::TerminalNode* CPP14Parser::SimpletemplateidContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

CPP14Parser::TemplateargumentlistContext* CPP14Parser::SimpletemplateidContext::templateargumentlist() {
  return getRuleContext<CPP14Parser::TemplateargumentlistContext>(0);
}


size_t CPP14Parser::SimpletemplateidContext::getRuleIndex() const {
  return CPP14Parser::RuleSimpletemplateid;
}


CPP14Parser::SimpletemplateidContext* CPP14Parser::simpletemplateid() {
  SimpletemplateidContext *_localctx = _tracker.createInstance<SimpletemplateidContext>(_ctx, getState());
  enterRule(_localctx, 348, CPP14Parser::RuleSimpletemplateid);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2248);
    templatename();
    setState(2249);
    match(CPP14Parser::Less);
    setState(2251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5541746142274582736) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 3495637736276668025) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 127) != 0)) {
      setState(2250);
      templateargumentlist(0);
    }
    setState(2253);
    match(CPP14Parser::Greater);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateidContext ------------------------------------------------------------------

CPP14Parser::TemplateidContext::TemplateidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::TemplateidContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}

CPP14Parser::OperatorfunctionidContext* CPP14Parser::TemplateidContext::operatorfunctionid() {
  return getRuleContext<CPP14Parser::OperatorfunctionidContext>(0);
}

tree::TerminalNode* CPP14Parser::TemplateidContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

tree::TerminalNode* CPP14Parser::TemplateidContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

CPP14Parser::TemplateargumentlistContext* CPP14Parser::TemplateidContext::templateargumentlist() {
  return getRuleContext<CPP14Parser::TemplateargumentlistContext>(0);
}

CPP14Parser::LiteraloperatoridContext* CPP14Parser::TemplateidContext::literaloperatorid() {
  return getRuleContext<CPP14Parser::LiteraloperatoridContext>(0);
}


size_t CPP14Parser::TemplateidContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplateid;
}


CPP14Parser::TemplateidContext* CPP14Parser::templateid() {
  TemplateidContext *_localctx = _tracker.createInstance<TemplateidContext>(_ctx, getState());
  enterRule(_localctx, 350, CPP14Parser::RuleTemplateid);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2270);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2255);
      simpletemplateid();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2256);
      operatorfunctionid();
      setState(2257);
      match(CPP14Parser::Less);
      setState(2259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5541746142274582736) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 3495637736276668025) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(2258);
        templateargumentlist(0);
      }
      setState(2261);
      match(CPP14Parser::Greater);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2263);
      literaloperatorid();
      setState(2264);
      match(CPP14Parser::Less);
      setState(2266);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5541746142274582736) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 3495637736276668025) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 132)) & 127) != 0)) {
        setState(2265);
        templateargumentlist(0);
      }
      setState(2268);
      match(CPP14Parser::Greater);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplatenameContext ------------------------------------------------------------------

CPP14Parser::TemplatenameContext::TemplatenameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TemplatenameContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}


size_t CPP14Parser::TemplatenameContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplatename;
}


CPP14Parser::TemplatenameContext* CPP14Parser::templatename() {
  TemplatenameContext *_localctx = _tracker.createInstance<TemplatenameContext>(_ctx, getState());
  enterRule(_localctx, 352, CPP14Parser::RuleTemplatename);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2272);
    match(CPP14Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateargumentlistContext ------------------------------------------------------------------

CPP14Parser::TemplateargumentlistContext::TemplateargumentlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TemplateargumentContext* CPP14Parser::TemplateargumentlistContext::templateargument() {
  return getRuleContext<CPP14Parser::TemplateargumentContext>(0);
}

tree::TerminalNode* CPP14Parser::TemplateargumentlistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::TemplateargumentlistContext* CPP14Parser::TemplateargumentlistContext::templateargumentlist() {
  return getRuleContext<CPP14Parser::TemplateargumentlistContext>(0);
}

tree::TerminalNode* CPP14Parser::TemplateargumentlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::TemplateargumentlistContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplateargumentlist;
}



CPP14Parser::TemplateargumentlistContext* CPP14Parser::templateargumentlist() {
   return templateargumentlist(0);
}

CPP14Parser::TemplateargumentlistContext* CPP14Parser::templateargumentlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::TemplateargumentlistContext *_localctx = _tracker.createInstance<TemplateargumentlistContext>(_ctx, parentState);
  CPP14Parser::TemplateargumentlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 354;
  enterRecursionRule(_localctx, 354, CPP14Parser::RuleTemplateargumentlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2275);
    templateargument();
    setState(2277);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      setState(2276);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2287);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TemplateargumentlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTemplateargumentlist);
        setState(2279);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2280);
        match(CPP14Parser::Comma);
        setState(2281);
        templateargument();
        setState(2283);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
        case 1: {
          setState(2282);
          match(CPP14Parser::Ellipsis);
          break;
        }

        default:
          break;
        } 
      }
      setState(2289);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TemplateargumentContext ------------------------------------------------------------------

CPP14Parser::TemplateargumentContext::TemplateargumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypeidContext* CPP14Parser::TemplateargumentContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::TemplateargumentContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

CPP14Parser::IdexpressionContext* CPP14Parser::TemplateargumentContext::idexpression() {
  return getRuleContext<CPP14Parser::IdexpressionContext>(0);
}


size_t CPP14Parser::TemplateargumentContext::getRuleIndex() const {
  return CPP14Parser::RuleTemplateargument;
}


CPP14Parser::TemplateargumentContext* CPP14Parser::templateargument() {
  TemplateargumentContext *_localctx = _tracker.createInstance<TemplateargumentContext>(_ctx, getState());
  enterRule(_localctx, 356, CPP14Parser::RuleTemplateargument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2293);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2290);
      typeid_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2291);
      constantexpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2292);
      idexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypenamespecifierContext ------------------------------------------------------------------

CPP14Parser::TypenamespecifierContext::TypenamespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TypenamespecifierContext::Typename() {
  return getToken(CPP14Parser::Typename, 0);
}

CPP14Parser::NestednamespecifierContext* CPP14Parser::TypenamespecifierContext::nestednamespecifier() {
  return getRuleContext<CPP14Parser::NestednamespecifierContext>(0);
}

tree::TerminalNode* CPP14Parser::TypenamespecifierContext::Identifier() {
  return getToken(CPP14Parser::Identifier, 0);
}

CPP14Parser::SimpletemplateidContext* CPP14Parser::TypenamespecifierContext::simpletemplateid() {
  return getRuleContext<CPP14Parser::SimpletemplateidContext>(0);
}

tree::TerminalNode* CPP14Parser::TypenamespecifierContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}


size_t CPP14Parser::TypenamespecifierContext::getRuleIndex() const {
  return CPP14Parser::RuleTypenamespecifier;
}


CPP14Parser::TypenamespecifierContext* CPP14Parser::typenamespecifier() {
  TypenamespecifierContext *_localctx = _tracker.createInstance<TypenamespecifierContext>(_ctx, getState());
  enterRule(_localctx, 358, CPP14Parser::RuleTypenamespecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2306);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2295);
      match(CPP14Parser::Typename);
      setState(2296);
      nestednamespecifier(0);
      setState(2297);
      match(CPP14Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2299);
      match(CPP14Parser::Typename);
      setState(2300);
      nestednamespecifier(0);
      setState(2302);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Template) {
        setState(2301);
        match(CPP14Parser::Template);
      }
      setState(2304);
      simpletemplateid();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitinstantiationContext ------------------------------------------------------------------

CPP14Parser::ExplicitinstantiationContext::ExplicitinstantiationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ExplicitinstantiationContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

CPP14Parser::DeclarationContext* CPP14Parser::ExplicitinstantiationContext::declaration() {
  return getRuleContext<CPP14Parser::DeclarationContext>(0);
}

tree::TerminalNode* CPP14Parser::ExplicitinstantiationContext::Extern() {
  return getToken(CPP14Parser::Extern, 0);
}


size_t CPP14Parser::ExplicitinstantiationContext::getRuleIndex() const {
  return CPP14Parser::RuleExplicitinstantiation;
}


CPP14Parser::ExplicitinstantiationContext* CPP14Parser::explicitinstantiation() {
  ExplicitinstantiationContext *_localctx = _tracker.createInstance<ExplicitinstantiationContext>(_ctx, getState());
  enterRule(_localctx, 360, CPP14Parser::RuleExplicitinstantiation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Extern) {
      setState(2308);
      match(CPP14Parser::Extern);
    }
    setState(2311);
    match(CPP14Parser::Template);
    setState(2312);
    declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitspecializationContext ------------------------------------------------------------------

CPP14Parser::ExplicitspecializationContext::ExplicitspecializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ExplicitspecializationContext::Template() {
  return getToken(CPP14Parser::Template, 0);
}

tree::TerminalNode* CPP14Parser::ExplicitspecializationContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

tree::TerminalNode* CPP14Parser::ExplicitspecializationContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

CPP14Parser::DeclarationContext* CPP14Parser::ExplicitspecializationContext::declaration() {
  return getRuleContext<CPP14Parser::DeclarationContext>(0);
}


size_t CPP14Parser::ExplicitspecializationContext::getRuleIndex() const {
  return CPP14Parser::RuleExplicitspecialization;
}


CPP14Parser::ExplicitspecializationContext* CPP14Parser::explicitspecialization() {
  ExplicitspecializationContext *_localctx = _tracker.createInstance<ExplicitspecializationContext>(_ctx, getState());
  enterRule(_localctx, 362, CPP14Parser::RuleExplicitspecialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2314);
    match(CPP14Parser::Template);
    setState(2315);
    match(CPP14Parser::Less);
    setState(2316);
    match(CPP14Parser::Greater);
    setState(2317);
    declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryblockContext ------------------------------------------------------------------

CPP14Parser::TryblockContext::TryblockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::TryblockContext::Try() {
  return getToken(CPP14Parser::Try, 0);
}

CPP14Parser::CompoundstatementContext* CPP14Parser::TryblockContext::compoundstatement() {
  return getRuleContext<CPP14Parser::CompoundstatementContext>(0);
}

CPP14Parser::HandlerseqContext* CPP14Parser::TryblockContext::handlerseq() {
  return getRuleContext<CPP14Parser::HandlerseqContext>(0);
}


size_t CPP14Parser::TryblockContext::getRuleIndex() const {
  return CPP14Parser::RuleTryblock;
}


CPP14Parser::TryblockContext* CPP14Parser::tryblock() {
  TryblockContext *_localctx = _tracker.createInstance<TryblockContext>(_ctx, getState());
  enterRule(_localctx, 364, CPP14Parser::RuleTryblock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2319);
    match(CPP14Parser::Try);
    setState(2320);
    compoundstatement();
    setState(2321);
    handlerseq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctiontryblockContext ------------------------------------------------------------------

CPP14Parser::FunctiontryblockContext::FunctiontryblockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::FunctiontryblockContext::Try() {
  return getToken(CPP14Parser::Try, 0);
}

CPP14Parser::CompoundstatementContext* CPP14Parser::FunctiontryblockContext::compoundstatement() {
  return getRuleContext<CPP14Parser::CompoundstatementContext>(0);
}

CPP14Parser::HandlerseqContext* CPP14Parser::FunctiontryblockContext::handlerseq() {
  return getRuleContext<CPP14Parser::HandlerseqContext>(0);
}

CPP14Parser::CtorinitializerContext* CPP14Parser::FunctiontryblockContext::ctorinitializer() {
  return getRuleContext<CPP14Parser::CtorinitializerContext>(0);
}


size_t CPP14Parser::FunctiontryblockContext::getRuleIndex() const {
  return CPP14Parser::RuleFunctiontryblock;
}


CPP14Parser::FunctiontryblockContext* CPP14Parser::functiontryblock() {
  FunctiontryblockContext *_localctx = _tracker.createInstance<FunctiontryblockContext>(_ctx, getState());
  enterRule(_localctx, 366, CPP14Parser::RuleFunctiontryblock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2323);
    match(CPP14Parser::Try);
    setState(2325);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CPP14Parser::Colon) {
      setState(2324);
      ctorinitializer();
    }
    setState(2327);
    compoundstatement();
    setState(2328);
    handlerseq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerseqContext ------------------------------------------------------------------

CPP14Parser::HandlerseqContext::HandlerseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::HandlerContext* CPP14Parser::HandlerseqContext::handler() {
  return getRuleContext<CPP14Parser::HandlerContext>(0);
}

CPP14Parser::HandlerseqContext* CPP14Parser::HandlerseqContext::handlerseq() {
  return getRuleContext<CPP14Parser::HandlerseqContext>(0);
}


size_t CPP14Parser::HandlerseqContext::getRuleIndex() const {
  return CPP14Parser::RuleHandlerseq;
}


CPP14Parser::HandlerseqContext* CPP14Parser::handlerseq() {
  HandlerseqContext *_localctx = _tracker.createInstance<HandlerseqContext>(_ctx, getState());
  enterRule(_localctx, 368, CPP14Parser::RuleHandlerseq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2330);
    handler();
    setState(2332);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
    case 1: {
      setState(2331);
      handlerseq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerContext ------------------------------------------------------------------

CPP14Parser::HandlerContext::HandlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::HandlerContext::Catch() {
  return getToken(CPP14Parser::Catch, 0);
}

tree::TerminalNode* CPP14Parser::HandlerContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ExceptiondeclarationContext* CPP14Parser::HandlerContext::exceptiondeclaration() {
  return getRuleContext<CPP14Parser::ExceptiondeclarationContext>(0);
}

tree::TerminalNode* CPP14Parser::HandlerContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::CompoundstatementContext* CPP14Parser::HandlerContext::compoundstatement() {
  return getRuleContext<CPP14Parser::CompoundstatementContext>(0);
}


size_t CPP14Parser::HandlerContext::getRuleIndex() const {
  return CPP14Parser::RuleHandler;
}


CPP14Parser::HandlerContext* CPP14Parser::handler() {
  HandlerContext *_localctx = _tracker.createInstance<HandlerContext>(_ctx, getState());
  enterRule(_localctx, 370, CPP14Parser::RuleHandler);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2334);
    match(CPP14Parser::Catch);
    setState(2335);
    match(CPP14Parser::LeftParen);
    setState(2336);
    exceptiondeclaration();
    setState(2337);
    match(CPP14Parser::RightParen);
    setState(2338);
    compoundstatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptiondeclarationContext ------------------------------------------------------------------

CPP14Parser::ExceptiondeclarationContext::ExceptiondeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypespecifierseqContext* CPP14Parser::ExceptiondeclarationContext::typespecifierseq() {
  return getRuleContext<CPP14Parser::TypespecifierseqContext>(0);
}

CPP14Parser::DeclaratorContext* CPP14Parser::ExceptiondeclarationContext::declarator() {
  return getRuleContext<CPP14Parser::DeclaratorContext>(0);
}

CPP14Parser::AttributespecifierseqContext* CPP14Parser::ExceptiondeclarationContext::attributespecifierseq() {
  return getRuleContext<CPP14Parser::AttributespecifierseqContext>(0);
}

CPP14Parser::AbstractdeclaratorContext* CPP14Parser::ExceptiondeclarationContext::abstractdeclarator() {
  return getRuleContext<CPP14Parser::AbstractdeclaratorContext>(0);
}

tree::TerminalNode* CPP14Parser::ExceptiondeclarationContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}


size_t CPP14Parser::ExceptiondeclarationContext::getRuleIndex() const {
  return CPP14Parser::RuleExceptiondeclaration;
}


CPP14Parser::ExceptiondeclarationContext* CPP14Parser::exceptiondeclaration() {
  ExceptiondeclarationContext *_localctx = _tracker.createInstance<ExceptiondeclarationContext>(_ctx, getState());
  enterRule(_localctx, 372, CPP14Parser::RuleExceptiondeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2354);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2341);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(2340);
        attributespecifierseq(0);
      }
      setState(2343);
      typespecifierseq();
      setState(2344);
      declarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2347);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Alignas || _la == CPP14Parser::LeftBracket) {
        setState(2346);
        attributespecifierseq(0);
      }
      setState(2349);
      typespecifierseq();
      setState(2351);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CPP14Parser::Decltype || ((((_la - 78) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 78)) & 215512868983045) != 0)) {
        setState(2350);
        abstractdeclarator();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2353);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowexpressionContext ------------------------------------------------------------------

CPP14Parser::ThrowexpressionContext::ThrowexpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::ThrowexpressionContext::Throw() {
  return getToken(CPP14Parser::Throw, 0);
}

CPP14Parser::AssignmentexpressionContext* CPP14Parser::ThrowexpressionContext::assignmentexpression() {
  return getRuleContext<CPP14Parser::AssignmentexpressionContext>(0);
}


size_t CPP14Parser::ThrowexpressionContext::getRuleIndex() const {
  return CPP14Parser::RuleThrowexpression;
}


CPP14Parser::ThrowexpressionContext* CPP14Parser::throwexpression() {
  ThrowexpressionContext *_localctx = _tracker.createInstance<ThrowexpressionContext>(_ctx, getState());
  enterRule(_localctx, 374, CPP14Parser::RuleThrowexpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2356);
    match(CPP14Parser::Throw);
    setState(2358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
    case 1: {
      setState(2357);
      assignmentexpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionspecificationContext ------------------------------------------------------------------

CPP14Parser::ExceptionspecificationContext::ExceptionspecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::DynamicexceptionspecificationContext* CPP14Parser::ExceptionspecificationContext::dynamicexceptionspecification() {
  return getRuleContext<CPP14Parser::DynamicexceptionspecificationContext>(0);
}

CPP14Parser::NoexceptspecificationContext* CPP14Parser::ExceptionspecificationContext::noexceptspecification() {
  return getRuleContext<CPP14Parser::NoexceptspecificationContext>(0);
}


size_t CPP14Parser::ExceptionspecificationContext::getRuleIndex() const {
  return CPP14Parser::RuleExceptionspecification;
}


CPP14Parser::ExceptionspecificationContext* CPP14Parser::exceptionspecification() {
  ExceptionspecificationContext *_localctx = _tracker.createInstance<ExceptionspecificationContext>(_ctx, getState());
  enterRule(_localctx, 376, CPP14Parser::RuleExceptionspecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2362);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Throw: {
        enterOuterAlt(_localctx, 1);
        setState(2360);
        dynamicexceptionspecification();
        break;
      }

      case CPP14Parser::Noexcept: {
        enterOuterAlt(_localctx, 2);
        setState(2361);
        noexceptspecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DynamicexceptionspecificationContext ------------------------------------------------------------------

CPP14Parser::DynamicexceptionspecificationContext::DynamicexceptionspecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::DynamicexceptionspecificationContext::Throw() {
  return getToken(CPP14Parser::Throw, 0);
}

tree::TerminalNode* CPP14Parser::DynamicexceptionspecificationContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

tree::TerminalNode* CPP14Parser::DynamicexceptionspecificationContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}

CPP14Parser::TypeidlistContext* CPP14Parser::DynamicexceptionspecificationContext::typeidlist() {
  return getRuleContext<CPP14Parser::TypeidlistContext>(0);
}


size_t CPP14Parser::DynamicexceptionspecificationContext::getRuleIndex() const {
  return CPP14Parser::RuleDynamicexceptionspecification;
}


CPP14Parser::DynamicexceptionspecificationContext* CPP14Parser::dynamicexceptionspecification() {
  DynamicexceptionspecificationContext *_localctx = _tracker.createInstance<DynamicexceptionspecificationContext>(_ctx, getState());
  enterRule(_localctx, 378, CPP14Parser::RuleDynamicexceptionspecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2364);
    match(CPP14Parser::Throw);
    setState(2365);
    match(CPP14Parser::LeftParen);
    setState(2367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 603483179072420032) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 74309393851613415) != 0)) {
      setState(2366);
      typeidlist(0);
    }
    setState(2369);
    match(CPP14Parser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeidlistContext ------------------------------------------------------------------

CPP14Parser::TypeidlistContext::TypeidlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CPP14Parser::TypeidContext* CPP14Parser::TypeidlistContext::typeid_() {
  return getRuleContext<CPP14Parser::TypeidContext>(0);
}

tree::TerminalNode* CPP14Parser::TypeidlistContext::Ellipsis() {
  return getToken(CPP14Parser::Ellipsis, 0);
}

CPP14Parser::TypeidlistContext* CPP14Parser::TypeidlistContext::typeidlist() {
  return getRuleContext<CPP14Parser::TypeidlistContext>(0);
}

tree::TerminalNode* CPP14Parser::TypeidlistContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}


size_t CPP14Parser::TypeidlistContext::getRuleIndex() const {
  return CPP14Parser::RuleTypeidlist;
}



CPP14Parser::TypeidlistContext* CPP14Parser::typeidlist() {
   return typeidlist(0);
}

CPP14Parser::TypeidlistContext* CPP14Parser::typeidlist(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CPP14Parser::TypeidlistContext *_localctx = _tracker.createInstance<TypeidlistContext>(_ctx, parentState);
  CPP14Parser::TypeidlistContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 380;
  enterRecursionRule(_localctx, 380, CPP14Parser::RuleTypeidlist, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2372);
    typeid_();
    setState(2374);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      setState(2373);
      match(CPP14Parser::Ellipsis);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2384);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TypeidlistContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleTypeidlist);
        setState(2376);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2377);
        match(CPP14Parser::Comma);
        setState(2378);
        typeid_();
        setState(2380);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
        case 1: {
          setState(2379);
          match(CPP14Parser::Ellipsis);
          break;
        }

        default:
          break;
        } 
      }
      setState(2386);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- NoexceptspecificationContext ------------------------------------------------------------------

CPP14Parser::NoexceptspecificationContext::NoexceptspecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::NoexceptspecificationContext::Noexcept() {
  return getToken(CPP14Parser::Noexcept, 0);
}

tree::TerminalNode* CPP14Parser::NoexceptspecificationContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

CPP14Parser::ConstantexpressionContext* CPP14Parser::NoexceptspecificationContext::constantexpression() {
  return getRuleContext<CPP14Parser::ConstantexpressionContext>(0);
}

tree::TerminalNode* CPP14Parser::NoexceptspecificationContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::NoexceptspecificationContext::getRuleIndex() const {
  return CPP14Parser::RuleNoexceptspecification;
}


CPP14Parser::NoexceptspecificationContext* CPP14Parser::noexceptspecification() {
  NoexceptspecificationContext *_localctx = _tracker.createInstance<NoexceptspecificationContext>(_ctx, getState());
  enterRule(_localctx, 382, CPP14Parser::RuleNoexceptspecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2393);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2387);
      match(CPP14Parser::Noexcept);
      setState(2388);
      match(CPP14Parser::LeftParen);
      setState(2389);
      constantexpression();
      setState(2390);
      match(CPP14Parser::RightParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2392);
      match(CPP14Parser::Noexcept);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RightShiftContext ------------------------------------------------------------------

CPP14Parser::RightShiftContext::RightShiftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CPP14Parser::RightShiftContext::Greater() {
  return getTokens(CPP14Parser::Greater);
}

tree::TerminalNode* CPP14Parser::RightShiftContext::Greater(size_t i) {
  return getToken(CPP14Parser::Greater, i);
}


size_t CPP14Parser::RightShiftContext::getRuleIndex() const {
  return CPP14Parser::RuleRightShift;
}


CPP14Parser::RightShiftContext* CPP14Parser::rightShift() {
  RightShiftContext *_localctx = _tracker.createInstance<RightShiftContext>(_ctx, getState());
  enterRule(_localctx, 384, CPP14Parser::RuleRightShift);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2395);
    match(CPP14Parser::Greater);
    setState(2396);
    match(CPP14Parser::Greater);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RightShiftAssignContext ------------------------------------------------------------------

CPP14Parser::RightShiftAssignContext::RightShiftAssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CPP14Parser::RightShiftAssignContext::Greater() {
  return getTokens(CPP14Parser::Greater);
}

tree::TerminalNode* CPP14Parser::RightShiftAssignContext::Greater(size_t i) {
  return getToken(CPP14Parser::Greater, i);
}

tree::TerminalNode* CPP14Parser::RightShiftAssignContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}


size_t CPP14Parser::RightShiftAssignContext::getRuleIndex() const {
  return CPP14Parser::RuleRightShiftAssign;
}


CPP14Parser::RightShiftAssignContext* CPP14Parser::rightShiftAssign() {
  RightShiftAssignContext *_localctx = _tracker.createInstance<RightShiftAssignContext>(_ctx, getState());
  enterRule(_localctx, 386, CPP14Parser::RuleRightShiftAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2398);
    match(CPP14Parser::Greater);
    setState(2399);
    match(CPP14Parser::Greater);
    setState(2400);
    match(CPP14Parser::Assign);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorContext ------------------------------------------------------------------

CPP14Parser::OperatorContext::OperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::OperatorContext::New() {
  return getToken(CPP14Parser::New, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Delete() {
  return getToken(CPP14Parser::Delete, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::LeftBracket() {
  return getToken(CPP14Parser::LeftBracket, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::RightBracket() {
  return getToken(CPP14Parser::RightBracket, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Plus() {
  return getToken(CPP14Parser::Plus, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Minus() {
  return getToken(CPP14Parser::Minus, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Star() {
  return getToken(CPP14Parser::Star, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Div() {
  return getToken(CPP14Parser::Div, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Mod() {
  return getToken(CPP14Parser::Mod, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Caret() {
  return getToken(CPP14Parser::Caret, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::And() {
  return getToken(CPP14Parser::And, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Or() {
  return getToken(CPP14Parser::Or, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Tilde() {
  return getToken(CPP14Parser::Tilde, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Not() {
  return getToken(CPP14Parser::Not, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Assign() {
  return getToken(CPP14Parser::Assign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Less() {
  return getToken(CPP14Parser::Less, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Greater() {
  return getToken(CPP14Parser::Greater, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::PlusAssign() {
  return getToken(CPP14Parser::PlusAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::MinusAssign() {
  return getToken(CPP14Parser::MinusAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::StarAssign() {
  return getToken(CPP14Parser::StarAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::DivAssign() {
  return getToken(CPP14Parser::DivAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::ModAssign() {
  return getToken(CPP14Parser::ModAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::XorAssign() {
  return getToken(CPP14Parser::XorAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::AndAssign() {
  return getToken(CPP14Parser::AndAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::OrAssign() {
  return getToken(CPP14Parser::OrAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::LeftShift() {
  return getToken(CPP14Parser::LeftShift, 0);
}

CPP14Parser::RightShiftContext* CPP14Parser::OperatorContext::rightShift() {
  return getRuleContext<CPP14Parser::RightShiftContext>(0);
}

CPP14Parser::RightShiftAssignContext* CPP14Parser::OperatorContext::rightShiftAssign() {
  return getRuleContext<CPP14Parser::RightShiftAssignContext>(0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::LeftShiftAssign() {
  return getToken(CPP14Parser::LeftShiftAssign, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Equal() {
  return getToken(CPP14Parser::Equal, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::NotEqual() {
  return getToken(CPP14Parser::NotEqual, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::LessEqual() {
  return getToken(CPP14Parser::LessEqual, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::GreaterEqual() {
  return getToken(CPP14Parser::GreaterEqual, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::AndAnd() {
  return getToken(CPP14Parser::AndAnd, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::OrOr() {
  return getToken(CPP14Parser::OrOr, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::PlusPlus() {
  return getToken(CPP14Parser::PlusPlus, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::MinusMinus() {
  return getToken(CPP14Parser::MinusMinus, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Comma() {
  return getToken(CPP14Parser::Comma, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::ArrowStar() {
  return getToken(CPP14Parser::ArrowStar, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::Arrow() {
  return getToken(CPP14Parser::Arrow, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::LeftParen() {
  return getToken(CPP14Parser::LeftParen, 0);
}

tree::TerminalNode* CPP14Parser::OperatorContext::RightParen() {
  return getToken(CPP14Parser::RightParen, 0);
}


size_t CPP14Parser::OperatorContext::getRuleIndex() const {
  return CPP14Parser::RuleOperator;
}


CPP14Parser::OperatorContext* CPP14Parser::operator_() {
  OperatorContext *_localctx = _tracker.createInstance<OperatorContext>(_ctx, getState());
  enterRule(_localctx, 388, CPP14Parser::RuleOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2450);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2402);
      match(CPP14Parser::New);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2403);
      match(CPP14Parser::Delete);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2404);
      match(CPP14Parser::New);
      setState(2405);
      match(CPP14Parser::LeftBracket);
      setState(2406);
      match(CPP14Parser::RightBracket);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2407);
      match(CPP14Parser::Delete);
      setState(2408);
      match(CPP14Parser::LeftBracket);
      setState(2409);
      match(CPP14Parser::RightBracket);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2410);
      match(CPP14Parser::Plus);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2411);
      match(CPP14Parser::Minus);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2412);
      match(CPP14Parser::Star);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2413);
      match(CPP14Parser::Div);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2414);
      match(CPP14Parser::Mod);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2415);
      match(CPP14Parser::Caret);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2416);
      match(CPP14Parser::And);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2417);
      match(CPP14Parser::Or);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2418);
      match(CPP14Parser::Tilde);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2419);
      match(CPP14Parser::Not);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2420);
      match(CPP14Parser::Assign);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2421);
      match(CPP14Parser::Less);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2422);
      match(CPP14Parser::Greater);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(2423);
      match(CPP14Parser::PlusAssign);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(2424);
      match(CPP14Parser::MinusAssign);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(2425);
      match(CPP14Parser::StarAssign);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(2426);
      match(CPP14Parser::DivAssign);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(2427);
      match(CPP14Parser::ModAssign);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(2428);
      match(CPP14Parser::XorAssign);
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(2429);
      match(CPP14Parser::AndAssign);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(2430);
      match(CPP14Parser::OrAssign);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(2431);
      match(CPP14Parser::LeftShift);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(2432);
      rightShift();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(2433);
      rightShiftAssign();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(2434);
      match(CPP14Parser::LeftShiftAssign);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(2435);
      match(CPP14Parser::Equal);
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(2436);
      match(CPP14Parser::NotEqual);
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(2437);
      match(CPP14Parser::LessEqual);
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(2438);
      match(CPP14Parser::GreaterEqual);
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(2439);
      match(CPP14Parser::AndAnd);
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(2440);
      match(CPP14Parser::OrOr);
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(2441);
      match(CPP14Parser::PlusPlus);
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(2442);
      match(CPP14Parser::MinusMinus);
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(2443);
      match(CPP14Parser::Comma);
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(2444);
      match(CPP14Parser::ArrowStar);
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(2445);
      match(CPP14Parser::Arrow);
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(2446);
      match(CPP14Parser::LeftParen);
      setState(2447);
      match(CPP14Parser::RightParen);
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(2448);
      match(CPP14Parser::LeftBracket);
      setState(2449);
      match(CPP14Parser::RightBracket);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

CPP14Parser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::LiteralContext::Integerliteral() {
  return getToken(CPP14Parser::Integerliteral, 0);
}

tree::TerminalNode* CPP14Parser::LiteralContext::Characterliteral() {
  return getToken(CPP14Parser::Characterliteral, 0);
}

tree::TerminalNode* CPP14Parser::LiteralContext::Floatingliteral() {
  return getToken(CPP14Parser::Floatingliteral, 0);
}

tree::TerminalNode* CPP14Parser::LiteralContext::Stringliteral() {
  return getToken(CPP14Parser::Stringliteral, 0);
}

CPP14Parser::BooleanliteralContext* CPP14Parser::LiteralContext::booleanliteral() {
  return getRuleContext<CPP14Parser::BooleanliteralContext>(0);
}

CPP14Parser::PointerliteralContext* CPP14Parser::LiteralContext::pointerliteral() {
  return getRuleContext<CPP14Parser::PointerliteralContext>(0);
}

CPP14Parser::UserdefinedliteralContext* CPP14Parser::LiteralContext::userdefinedliteral() {
  return getRuleContext<CPP14Parser::UserdefinedliteralContext>(0);
}


size_t CPP14Parser::LiteralContext::getRuleIndex() const {
  return CPP14Parser::RuleLiteral;
}


CPP14Parser::LiteralContext* CPP14Parser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 390, CPP14Parser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2459);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CPP14Parser::Integerliteral: {
        enterOuterAlt(_localctx, 1);
        setState(2452);
        match(CPP14Parser::Integerliteral);
        break;
      }

      case CPP14Parser::Characterliteral: {
        enterOuterAlt(_localctx, 2);
        setState(2453);
        match(CPP14Parser::Characterliteral);
        break;
      }

      case CPP14Parser::Floatingliteral: {
        enterOuterAlt(_localctx, 3);
        setState(2454);
        match(CPP14Parser::Floatingliteral);
        break;
      }

      case CPP14Parser::Stringliteral: {
        enterOuterAlt(_localctx, 4);
        setState(2455);
        match(CPP14Parser::Stringliteral);
        break;
      }

      case CPP14Parser::False:
      case CPP14Parser::True: {
        enterOuterAlt(_localctx, 5);
        setState(2456);
        booleanliteral();
        break;
      }

      case CPP14Parser::Nullptr: {
        enterOuterAlt(_localctx, 6);
        setState(2457);
        pointerliteral();
        break;
      }

      case CPP14Parser::Userdefinedintegerliteral:
      case CPP14Parser::Userdefinedfloatingliteral:
      case CPP14Parser::Userdefinedstringliteral:
      case CPP14Parser::Userdefinedcharacterliteral: {
        enterOuterAlt(_localctx, 7);
        setState(2458);
        userdefinedliteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanliteralContext ------------------------------------------------------------------

CPP14Parser::BooleanliteralContext::BooleanliteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::BooleanliteralContext::False() {
  return getToken(CPP14Parser::False, 0);
}

tree::TerminalNode* CPP14Parser::BooleanliteralContext::True() {
  return getToken(CPP14Parser::True, 0);
}


size_t CPP14Parser::BooleanliteralContext::getRuleIndex() const {
  return CPP14Parser::RuleBooleanliteral;
}


CPP14Parser::BooleanliteralContext* CPP14Parser::booleanliteral() {
  BooleanliteralContext *_localctx = _tracker.createInstance<BooleanliteralContext>(_ctx, getState());
  enterRule(_localctx, 392, CPP14Parser::RuleBooleanliteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2461);
    _la = _input->LA(1);
    if (!(_la == CPP14Parser::False

    || _la == CPP14Parser::True)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerliteralContext ------------------------------------------------------------------

CPP14Parser::PointerliteralContext::PointerliteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::PointerliteralContext::Nullptr() {
  return getToken(CPP14Parser::Nullptr, 0);
}


size_t CPP14Parser::PointerliteralContext::getRuleIndex() const {
  return CPP14Parser::RulePointerliteral;
}


CPP14Parser::PointerliteralContext* CPP14Parser::pointerliteral() {
  PointerliteralContext *_localctx = _tracker.createInstance<PointerliteralContext>(_ctx, getState());
  enterRule(_localctx, 394, CPP14Parser::RulePointerliteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2463);
    match(CPP14Parser::Nullptr);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UserdefinedliteralContext ------------------------------------------------------------------

CPP14Parser::UserdefinedliteralContext::UserdefinedliteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CPP14Parser::UserdefinedliteralContext::Userdefinedintegerliteral() {
  return getToken(CPP14Parser::Userdefinedintegerliteral, 0);
}

tree::TerminalNode* CPP14Parser::UserdefinedliteralContext::Userdefinedfloatingliteral() {
  return getToken(CPP14Parser::Userdefinedfloatingliteral, 0);
}

tree::TerminalNode* CPP14Parser::UserdefinedliteralContext::Userdefinedstringliteral() {
  return getToken(CPP14Parser::Userdefinedstringliteral, 0);
}

tree::TerminalNode* CPP14Parser::UserdefinedliteralContext::Userdefinedcharacterliteral() {
  return getToken(CPP14Parser::Userdefinedcharacterliteral, 0);
}


size_t CPP14Parser::UserdefinedliteralContext::getRuleIndex() const {
  return CPP14Parser::RuleUserdefinedliteral;
}


CPP14Parser::UserdefinedliteralContext* CPP14Parser::userdefinedliteral() {
  UserdefinedliteralContext *_localctx = _tracker.createInstance<UserdefinedliteralContext>(_ctx, getState());
  enterRule(_localctx, 396, CPP14Parser::RuleUserdefinedliteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2465);
    _la = _input->LA(1);
    if (!(((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CPP14Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 5: return nestednamespecifierSempred(antlrcpp::downCast<NestednamespecifierContext *>(context), predicateIndex);
    case 10: return capturelistSempred(antlrcpp::downCast<CapturelistContext *>(context), predicateIndex);
    case 15: return postfixexpressionSempred(antlrcpp::downCast<PostfixexpressionContext *>(context), predicateIndex);
    case 24: return noptrnewdeclaratorSempred(antlrcpp::downCast<NoptrnewdeclaratorContext *>(context), predicateIndex);
    case 29: return pmexpressionSempred(antlrcpp::downCast<PmexpressionContext *>(context), predicateIndex);
    case 30: return multiplicativeexpressionSempred(antlrcpp::downCast<MultiplicativeexpressionContext *>(context), predicateIndex);
    case 31: return additiveexpressionSempred(antlrcpp::downCast<AdditiveexpressionContext *>(context), predicateIndex);
    case 32: return shiftexpressionSempred(antlrcpp::downCast<ShiftexpressionContext *>(context), predicateIndex);
    case 33: return relationalexpressionSempred(antlrcpp::downCast<RelationalexpressionContext *>(context), predicateIndex);
    case 34: return equalityexpressionSempred(antlrcpp::downCast<EqualityexpressionContext *>(context), predicateIndex);
    case 35: return andexpressionSempred(antlrcpp::downCast<AndexpressionContext *>(context), predicateIndex);
    case 36: return exclusiveorexpressionSempred(antlrcpp::downCast<ExclusiveorexpressionContext *>(context), predicateIndex);
    case 37: return inclusiveorexpressionSempred(antlrcpp::downCast<InclusiveorexpressionContext *>(context), predicateIndex);
    case 38: return logicalandexpressionSempred(antlrcpp::downCast<LogicalandexpressionContext *>(context), predicateIndex);
    case 39: return logicalorexpressionSempred(antlrcpp::downCast<LogicalorexpressionContext *>(context), predicateIndex);
    case 43: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 49: return statementseqSempred(antlrcpp::downCast<StatementseqContext *>(context), predicateIndex);
    case 58: return declarationseqSempred(antlrcpp::downCast<DeclarationseqContext *>(context), predicateIndex);
    case 85: return enumeratorlistSempred(antlrcpp::downCast<EnumeratorlistContext *>(context), predicateIndex);
    case 103: return attributespecifierseqSempred(antlrcpp::downCast<AttributespecifierseqContext *>(context), predicateIndex);
    case 106: return attributelistSempred(antlrcpp::downCast<AttributelistContext *>(context), predicateIndex);
    case 112: return balancedtokenseqSempred(antlrcpp::downCast<BalancedtokenseqContext *>(context), predicateIndex);
    case 114: return initdeclaratorlistSempred(antlrcpp::downCast<InitdeclaratorlistContext *>(context), predicateIndex);
    case 118: return noptrdeclaratorSempred(antlrcpp::downCast<NoptrdeclaratorContext *>(context), predicateIndex);
    case 129: return noptrabstractdeclaratorSempred(antlrcpp::downCast<NoptrabstractdeclaratorContext *>(context), predicateIndex);
    case 131: return noptrabstractpackdeclaratorSempred(antlrcpp::downCast<NoptrabstractpackdeclaratorContext *>(context), predicateIndex);
    case 133: return parameterdeclarationlistSempred(antlrcpp::downCast<ParameterdeclarationlistContext *>(context), predicateIndex);
    case 140: return initializerlistSempred(antlrcpp::downCast<InitializerlistContext *>(context), predicateIndex);
    case 150: return memberdeclaratorlistSempred(antlrcpp::downCast<MemberdeclaratorlistContext *>(context), predicateIndex);
    case 152: return virtspecifierseqSempred(antlrcpp::downCast<VirtspecifierseqContext *>(context), predicateIndex);
    case 156: return basespecifierlistSempred(antlrcpp::downCast<BasespecifierlistContext *>(context), predicateIndex);
    case 171: return templateparameterlistSempred(antlrcpp::downCast<TemplateparameterlistContext *>(context), predicateIndex);
    case 177: return templateargumentlistSempred(antlrcpp::downCast<TemplateargumentlistContext *>(context), predicateIndex);
    case 190: return typeidlistSempred(antlrcpp::downCast<TypeidlistContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::nestednamespecifierSempred(NestednamespecifierContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::capturelistSempred(CapturelistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::postfixexpressionSempred(PostfixexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 19);
    case 4: return precpred(_ctx, 18);
    case 5: return precpred(_ctx, 17);
    case 6: return precpred(_ctx, 12);
    case 7: return precpred(_ctx, 11);
    case 8: return precpred(_ctx, 10);
    case 9: return precpred(_ctx, 9);
    case 10: return precpred(_ctx, 8);
    case 11: return precpred(_ctx, 7);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::noptrnewdeclaratorSempred(NoptrnewdeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::pmexpressionSempred(PmexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 2);
    case 14: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::multiplicativeexpressionSempred(MultiplicativeexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 3);
    case 16: return precpred(_ctx, 2);
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::additiveexpressionSempred(AdditiveexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 18: return precpred(_ctx, 2);
    case 19: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::shiftexpressionSempred(ShiftexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 2);
    case 21: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::relationalexpressionSempred(RelationalexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 22: return precpred(_ctx, 4);
    case 23: return precpred(_ctx, 3);
    case 24: return precpred(_ctx, 2);
    case 25: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::equalityexpressionSempred(EqualityexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 26: return precpred(_ctx, 2);
    case 27: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::andexpressionSempred(AndexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 28: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::exclusiveorexpressionSempred(ExclusiveorexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 29: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::inclusiveorexpressionSempred(InclusiveorexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 30: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::logicalandexpressionSempred(LogicalandexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 31: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::logicalorexpressionSempred(LogicalorexpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 32: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 33: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::statementseqSempred(StatementseqContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 34: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::declarationseqSempred(DeclarationseqContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 35: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::enumeratorlistSempred(EnumeratorlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 36: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::attributespecifierseqSempred(AttributespecifierseqContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 37: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::attributelistSempred(AttributelistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 38: return precpred(_ctx, 3);
    case 39: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::balancedtokenseqSempred(BalancedtokenseqContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 40: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::initdeclaratorlistSempred(InitdeclaratorlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 41: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::noptrdeclaratorSempred(NoptrdeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 42: return precpred(_ctx, 3);
    case 43: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::noptrabstractdeclaratorSempred(NoptrabstractdeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 44: return precpred(_ctx, 5);
    case 45: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::noptrabstractpackdeclaratorSempred(NoptrabstractpackdeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 46: return precpred(_ctx, 3);
    case 47: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::parameterdeclarationlistSempred(ParameterdeclarationlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 48: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::initializerlistSempred(InitializerlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 49: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::memberdeclaratorlistSempred(MemberdeclaratorlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 50: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::virtspecifierseqSempred(VirtspecifierseqContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 51: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::basespecifierlistSempred(BasespecifierlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 52: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::templateparameterlistSempred(TemplateparameterlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 53: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::templateargumentlistSempred(TemplateargumentlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 54: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool CPP14Parser::typeidlistSempred(TypeidlistContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 55: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void CPP14Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cpp14ParserInitialize();
#else
  ::antlr4::internal::call_once(cpp14ParserOnceFlag, cpp14ParserInitialize);
#endif
}
